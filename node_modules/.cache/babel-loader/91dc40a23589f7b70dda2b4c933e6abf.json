{"ast":null,"code":"export default function FamilyMargins() {\n  this.items = [];\n\n  function Margin(left, right, leftIndex, rightIndex) {\n    this.left = left;\n    this.right = right;\n    this.leftIndex = leftIndex;\n    this.rightIndex = rightIndex;\n  }\n\n  this.add = function (arg0, arg1, arg2, arg3) {\n    switch (arguments.length) {\n      case 2:\n        this.items.push(new Margin(-arg0 / 2, arg0 / 2, arg1, arg1));\n        break;\n\n      case 4:\n        this.items.push(new Margin(arg0, arg1, arg2, arg3));\n        break;\n    }\n  };\n\n  this.merge = function (from, interval) {\n    var distance = this.getDistanceTo(from);\n    var leftOffset = 0;\n    var rightOffset = 0;\n    var len1 = this.items.length;\n    var len2 = from.items.length;\n    var min = Math.min(len1, len2);\n    var max = Math.max(len1, len2);\n\n    for (var index = 0; index < min; index += 1) {\n      var leftMargin = this.items[len1 - 1 - index];\n      var rightMargin = from.items[len2 - 1 - index];\n\n      if (index === 0) {\n        var width = leftMargin.right - leftMargin.left + (distance || 0) + (interval || 0) + rightMargin.right - rightMargin.left;\n        leftOffset = width / 2 + leftMargin.left;\n        rightOffset = width / 2 - rightMargin.right;\n      }\n\n      leftMargin.left -= leftOffset;\n      leftMargin.right = rightMargin.right + rightOffset;\n      leftMargin.rightIndex = rightMargin.rightIndex;\n      this.items[max - 1 - index] = leftMargin;\n    }\n\n    for (index = min; index < max; index += 1) {\n      leftMargin = this.items[len1 - 1 - index];\n      rightMargin = from.items[len2 - 1 - index];\n\n      if (leftMargin == null) {\n        this.items[max - 1 - index] = new Margin(rightMargin.left + rightOffset, rightMargin.right + rightOffset, rightMargin.leftIndex, rightMargin.rightIndex);\n      } else {\n        leftMargin.left -= leftOffset;\n        leftMargin.right -= leftOffset;\n      }\n    }\n\n    return distance;\n  };\n\n  this.attach = function (from, interval) {\n    var distance = this.getDistanceTo(from);\n    var rightOffset = interval || 0;\n    var len1 = this.items.length;\n    var len2 = from.items.length;\n    var min = Math.min(len1, len2);\n    var max = Math.max(len1, len2);\n\n    for (var index = 0; index < min; index += 1) {\n      var leftMargin = this.items[len1 - 1 - index];\n      var rightMargin = from.items[len2 - 1 - index];\n\n      if (index === 0) {\n        rightOffset = leftMargin.right + (distance || 0) + (interval || 0) - rightMargin.left;\n      }\n\n      leftMargin.right = rightMargin.right + rightOffset;\n      leftMargin.rightIndex = rightMargin.rightIndex;\n      this.items[max - 1 - index] = leftMargin;\n    }\n\n    for (index = min; index < max; index += 1) {\n      leftMargin = this.items[len1 - 1 - index];\n\n      if (leftMargin == null) {\n        rightMargin = from.items[len2 - 1 - index];\n        this.items[max - 1 - index] = new Margin(rightMargin.left + rightOffset, rightMargin.right + rightOffset, rightMargin.leftIndex, rightMargin.rightIndex);\n      }\n    }\n\n    return distance;\n  };\n\n  this.getDistanceTo = function (to) {\n    var distance = null;\n    var baseDistance = 0;\n    var len1 = this.items.length;\n    var len2 = to.items.length;\n    var len = Math.min(len1, len2);\n\n    if (len > 0) {\n      for (var index = 0; index < len; index += 1) {\n        var leftMargins = this.items[len1 - 1 - index];\n        var rightMargins = to.items[len2 - 1 - index];\n\n        if (index === 0) {\n          baseDistance = leftMargins.right - rightMargins.left;\n          distance = baseDistance;\n        } else {\n          if (leftMargins.rightIndex < rightMargins.leftIndex) {\n            distance = Math.max(distance, leftMargins.right - rightMargins.left);\n          }\n        }\n      }\n\n      distance = distance - baseDistance;\n    }\n\n    return distance;\n  };\n\n  this.loop = function (thisArg, onItem) {\n    if (onItem != null) {\n      for (var index = 0, len = this.items.length; index < len; index += 1) {\n        var margin = this.items[len - 1 - index];\n\n        if (onItem.call(thisArg, index, margin.left, margin.right, margin.leftIndex, margin.rightIndex)) {\n          break;\n        }\n      }\n    }\n  };\n\n  this.getLeft = function (level) {\n    var maximum = this.items.length - 1;\n\n    if (maximum >= level) {\n      return this.items[maximum - level].left;\n    }\n  };\n}\n;","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/algorithms/FamilyMargins.js"],"names":["FamilyMargins","items","Margin","left","right","leftIndex","rightIndex","add","arg0","arg1","arg2","arg3","arguments","length","push","merge","from","interval","distance","getDistanceTo","leftOffset","rightOffset","len1","len2","min","Math","max","index","leftMargin","rightMargin","width","attach","to","baseDistance","len","leftMargins","rightMargins","loop","thisArg","onItem","margin","call","getLeft","level","maximum"],"mappings":"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","sourcesContent":["export default function FamilyMargins() {\n  this.items = [];\n\n  function Margin(left, right, leftIndex, rightIndex) {\n    this.left = left;\n    this.right = right;\n    this.leftIndex = leftIndex;\n    this.rightIndex = rightIndex;\n  }\n\n  this.add = function (arg0, arg1, arg2, arg3) {\n    switch (arguments.length) {\n      case 2:\n        this.items.push(new Margin(-arg0 / 2, arg0 / 2, arg1, arg1));\n        break;\n      case 4:\n        this.items.push(new Margin(arg0, arg1, arg2, arg3));\n        break;\n    }\n  };\n\n  this.merge = function (from, interval) {\n    var distance = this.getDistanceTo(from);\n    var leftOffset = 0;\n    var rightOffset = 0;\n\n    var len1 = this.items.length;\n    var len2 = from.items.length;\n    var min = Math.min(len1, len2);\n    var max = Math.max(len1, len2);\n\n    for (var index = 0; index < min; index += 1) {\n      var leftMargin = this.items[len1 - 1 - index];\n      var rightMargin = from.items[len2 - 1 - index];\n\n      if (index === 0) {\n        var width = (leftMargin.right - leftMargin.left + (distance || 0) + (interval || 0) + rightMargin.right - rightMargin.left);\n        leftOffset = width / 2 + leftMargin.left;\n        rightOffset = width / 2 - rightMargin.right;\n      }\n      leftMargin.left -= leftOffset;\n      leftMargin.right = rightMargin.right + rightOffset;\n\n      leftMargin.rightIndex = rightMargin.rightIndex;\n\n      this.items[max - 1 - index] = leftMargin;\n    }\n    for (index = min; index < max; index += 1) {\n      leftMargin = this.items[len1 - 1 - index];\n      rightMargin = from.items[len2 - 1 - index];\n\n      if (leftMargin == null) {\n        this.items[max - 1 - index] = new Margin(rightMargin.left + rightOffset, rightMargin.right + rightOffset,\n          rightMargin.leftIndex, rightMargin.rightIndex);\n      } else {\n        leftMargin.left -= leftOffset;\n        leftMargin.right -= leftOffset;\n      }\n\n    }\n    return distance;\n  };\n\n  this.attach = function (from, interval) {\n    var distance = this.getDistanceTo(from);\n    var rightOffset = interval || 0;\n\n    var len1 = this.items.length;\n    var len2 = from.items.length;\n    var min = Math.min(len1, len2);\n    var max = Math.max(len1, len2);\n\n    for (var index = 0; index < min; index += 1) {\n      var leftMargin = this.items[len1 - 1 - index];\n      var rightMargin = from.items[len2 - 1 - index];\n\n      if (index === 0) {\n        rightOffset = (leftMargin.right + (distance || 0) + (interval || 0) - rightMargin.left);\n      }\n      leftMargin.right = rightMargin.right + rightOffset;\n\n      leftMargin.rightIndex = rightMargin.rightIndex;\n\n      this.items[max - 1 - index] = leftMargin;\n    }\n    for (index = min; index < max; index += 1) {\n      leftMargin = this.items[len1 - 1 - index];\n      if (leftMargin == null) {\n        rightMargin = from.items[len2 - 1 - index];\n\n        this.items[max - 1 - index] = new Margin(rightMargin.left + rightOffset, rightMargin.right + rightOffset,\n          rightMargin.leftIndex, rightMargin.rightIndex);\n      }\n    }\n    return distance;\n  };\n\n  this.getDistanceTo = function (to) {\n    var distance = null;\n    var baseDistance = 0;\n    var len1 = this.items.length;\n    var len2 = to.items.length;\n    var len = Math.min(len1, len2);\n    if (len > 0) {\n      for (var index = 0; index < len; index += 1) {\n        var leftMargins = this.items[len1 - 1 - index];\n        var rightMargins = to.items[len2 - 1 - index];\n\n\n        if (index === 0) {\n          baseDistance = leftMargins.right - rightMargins.left;\n          distance = baseDistance;\n        } else {\n          if (leftMargins.rightIndex < rightMargins.leftIndex) {\n            distance = Math.max(distance, leftMargins.right - rightMargins.left);\n          }\n        }\n      }\n      distance = distance - baseDistance;\n    }\n\n    return distance;\n  };\n\n  this.loop = function (thisArg, onItem) {\n    if (onItem != null) {\n      for (var index = 0, len = this.items.length; index < len; index += 1) {\n        var margin = this.items[len - 1 - index];\n        if (onItem.call(thisArg, index, margin.left, margin.right, margin.leftIndex, margin.rightIndex)) {\n          break;\n        }\n      }\n    }\n  };\n\n  this.getLeft = function (level) {\n    var maximum = this.items.length - 1;\n    if (maximum >= level) {\n      return this.items[maximum - level].left;\n    }\n  };\n};"]},"metadata":{},"sourceType":"module"}