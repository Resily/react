{"ast":null,"code":"/**\n * @typedef {number} AdviserPlacementType\n **/\n\n/**\n * Defines leftward or rightward item placement relative to the referenced item.\n * In case of assistants and advisers the referenced item is their immediate parent.\n * In case of family diagram the referenced item is spouse or sibling in the row. \n *  \n * @enum {AdviserPlacementType}\n */\nexport var AdviserPlacementType = {\n  /**\n   * Auto select by layout manager\n   */\n  Auto: 0,\n\n  /**\n   * Left side\n   */\n  Left: 2,\n\n  /**\n   * Right side\n   */\n  Right: 3\n};\n/**\n * @typedef {number} AnnotationType\n **/\n\n/**\n * Defines type of on-screen and in-layout annotation object. Annotations are geometrical \n * figures drawn around or bound to existing nodes of the diagram.\n *\n * @enum {AnnotationType}\n */\n\nexport var AnnotationType = {\n  /**\n   * Connector lines between two nodes of the diagram. They are drawn on top of existing\n   * diagram layout and they don't affect nodes placement. So it is users responsibility to\n   * preserve space between nodes for them.\n   */\n  Connector: 0,\n\n  /**\n   * Shape annotation is a possibility to draw some geometrical\n   * shapes over several nodes of the diagram. \n   */\n  Shape: 1,\n\n  /**\n   * Highlight path annotation traces path between given sequence of nodes \n   * over existing connector lines in the diagram.\n   */\n  HighlightPath: 2,\n\n  /**\n   * In-layout label annotation. Label annotations are placed in layout between nodes,\n   * they preserve space between nodes, so they don't overlap neighboring nodes.\n   * Label annotations are designed for auto placement and bundling of connection lines between \n   * nodes when needed.\n   */\n  Label: 3,\n\n  /**\n   * Background annotation highlights nodes via drawing rectangular shape in the background.\n   * If shapes overlap the same style neighboring shapes they are merged into one continuous shape. \n   */\n  Background: 4,\n\n  /**\n   * Stripe annotation highlights same level nodes of the diagram via drawing continuous rectangular shape \n   * from side to side in their background. Stripe has optional title on the side of the diagram view area.\n   * Title may be placed inside or outside of the diagram. If it is placed inside, it is drawn in the \n   * background and does not occupy space. \n   */\n  Level: 5\n};\n/**\n * @typedef {number} ChildrenPlacementType\n **/\n\n/**\n * Defines shape of children formation. By default a node's children are always placed in a horizontal line \n * below the parent node. On a large scale this may result in the end user having to scroll screens \n * in order to view all of the nodes. To compensate for this, we provide the option of placing all \n * of the children of a parent node in a square/matrix formation. This will reduce sideways screen \n * scrolling by compacting the child nodes into a much smaller area on the screen.\n *  \n * @enum {ChildrenPlacementType}\n */\n\nexport var ChildrenPlacementType = {\n  /**\n   * Auto. This mode lets you set children layout at the component level\n   * and then redefine it for individual nodes if needed.\n   */\n  Auto: 0,\n\n  /**\n   * Children placed in vertical column\n   */\n  Vertical: 1,\n\n  /**\n   * Horizontal children layout\n   */\n  Horizontal: 2,\n\n  /**\n   * Matrix formation of the children\n   */\n  Matrix: 3\n};\n/**\n * @typedef {string} Colors\n **/\n\n/**\n * Just a list of named colors.\n * \n * @ignore\n * @enum {Colors}\n */\n\nexport var Colors = {\n  AliceBlue: \"#f0f8ff\",\n  AntiqueWhite: \"#faebd7\",\n  Aqua: \"#00ffff\",\n  Aquamarine: \"#7fffd4\",\n  Azure: \"#f0ffff\",\n  Beige: \"#f5f5dc\",\n  Bisque: \"#ffe4c4\",\n  Black: \"#000000\",\n  BlanchedAlmond: \"#ffebcd\",\n  Blue: \"#0000ff\",\n  BlueViolet: \"#8a2be2\",\n  Brown: \"#a52a2a\",\n  BurlyWood: \"#deb887\",\n  Bronze: \"#cd7f32\",\n  CadetBlue: \"#5f9ea0\",\n  ChartReuse: \"#7fff00\",\n  Chocolate: \"#d2691e\",\n  Coral: \"#ff7f50\",\n  CornflowerBlue: \"#6495ed\",\n  Cornsilk: \"#fff8dc\",\n  Crimson: \"#dc143c\",\n  Cyan: \"#00ffff\",\n  DarkBlue: \"#00008b\",\n  DarkCyan: \"#008b8b\",\n  DarkGoldenrod: \"#b8860b\",\n  DarkGray: \"#a9a9a9\",\n  DarkGreen: \"#006400\",\n  DarkKhaki: \"#bdb76b\",\n  DarkMagenta: \"#8b008b\",\n  DarkOliveGreen: \"#556b2f\",\n  Darkorange: \"#ff8c00\",\n  DarkOrchid: \"#9932cc\",\n  DarkRed: \"#8b0000\",\n  DarkSalmon: \"#e9967a\",\n  DarkSeaGreen: \"#8fbc8f\",\n  DarkSlateBlue: \"#483d8b\",\n  DarkSlateGray: \"#2f4f4f\",\n  DarkTurquoise: \"#00ced1\",\n  DarkViolet: \"#9400d3\",\n  DeepPink: \"#ff1493\",\n  DeepSkyBlue: \"#00bfff\",\n  DimGray: \"#696969\",\n  DodgerBlue: \"#1e90ff\",\n  FireBrick: \"#b22222\",\n  FloralWhite: \"#fffaf0\",\n  ForestGreen: \"#228b22\",\n  Fuchsia: \"#ff00ff\",\n  Gainsboro: \"#dcdcdc\",\n  GhostWhite: \"#f8f8ff\",\n  Gold: \"#ffd700\",\n  Goldenrod: \"#daa520\",\n  Gray: \"#808080\",\n  Green: \"#008000\",\n  GreenYellow: \"#adff2f\",\n  Honeydew: \"#f0fff0\",\n  Hotpink: \"#ff69b4\",\n  IndianRed: \"#cd5c5c\",\n  Indigo: \"#4b0082\",\n  Ivory: \"#fffff0\",\n  Khaki: \"#f0e68c\",\n  Lavender: \"#e6e6fa\",\n  LavenderBlush: \"#fff0f5\",\n  Lawngreen: \"#7cfc00\",\n  Lemonchiffon: \"#fffacd\",\n  LightBlue: \"#add8e6\",\n  LightCoral: \"#f08080\",\n  LightCyan: \"#e0ffff\",\n  LightGoldenrodYellow: \"#fafad2\",\n  LightGray: \"#d3d3d3\",\n  LightGreen: \"#90ee90\",\n  LightPink: \"#ffb6c1\",\n  LightSalmon: \"#ffa07a\",\n  LightSeaGreen: \"#20b2aa\",\n  LightSkyBlue: \"#87cefa\",\n  LightSlateGray: \"#778899\",\n  LightSteelBlue: \"#b0c4de\",\n  LightYellow: \"#ffffe0\",\n  Lime: \"#00ff00\",\n  Limegreen: \"#32cd32\",\n  Linen: \"#faf0e6\",\n  Magenta: \"#ff00ff\",\n  Maroon: \"#800000\",\n  MediumAquamarine: \"#66cdaa\",\n  MediumBlue: \"#0000cd\",\n  MediumOrchid: \"#ba55d3\",\n  MediumPurple: \"#9370d8\",\n  MediumSeaGreen: \"#3cb371\",\n  MediumSlateBlue: \"#7b68ee\",\n  MediumSpringGreen: \"#00fa9a\",\n  MediumTurquoise: \"#48d1cc\",\n  MediumVioletRed: \"#c71585\",\n  MidnightBlue: \"#191970\",\n  MintCream: \"#f5fffa\",\n  MistyRose: \"#ffe4e1\",\n  Moccasin: \"#ffe4b5\",\n  NavajoWhite: \"#ffdead\",\n  Navy: \"#000080\",\n  Oldlace: \"#fdf5e6\",\n  Olive: \"#808000\",\n  Olivedrab: \"#6b8e23\",\n  Orange: \"#ffa500\",\n  OrangeRed: \"#ff4500\",\n  Orchid: \"#da70d6\",\n  PaleGoldenRod: \"#eee8aa\",\n  PaleGreen: \"#98fb98\",\n  PaleTurquoise: \"#afeeee\",\n  PaleVioletRed: \"#d87093\",\n  Papayawhip: \"#ffefd5\",\n  Peachpuff: \"#ffdab9\",\n  Peru: \"#cd853f\",\n  Pink: \"#ffc0cb\",\n  Plum: \"#dda0dd\",\n  PowderBlue: \"#b0e0e6\",\n  Purple: \"#800080\",\n  Red: \"#ff0000\",\n  RosyBrown: \"#bc8f8f\",\n  RoyalBlue: \"#4169e1\",\n  SaddleBrown: \"#8b4513\",\n  Salmon: \"#fa8072\",\n  SandyBrown: \"#f4a460\",\n  SeaGreen: \"#2e8b57\",\n  Seashell: \"#fff5ee\",\n  Sienna: \"#a0522d\",\n  Silver: \"#c0c0c0\",\n  SkyBlue: \"#87ceeb\",\n  SlateBlue: \"#6a5acd\",\n  SlateGray: \"#708090\",\n  Snow: \"#fffafa\",\n  SpringGreen: \"#00ff7f\",\n  SteelBlue: \"#4682b4\",\n  Tan: \"#d2b48c\",\n  Teal: \"#008080\",\n  Thistle: \"#d8bfd8\",\n  Tomato: \"#ff6347\",\n  Turquoise: \"#40e0d0\",\n  Violet: \"#ee82ee\",\n  Wheat: \"#f5deb3\",\n  White: \"#ffffff\",\n  WhiteSmoke: \"#f5f5f5\",\n  Yellow: \"#ffff00\",\n  YellowGreen: \"#9acd32\"\n};\n/**\n * @typedef {number} ConnectorLabelPlacementType\n **/\n\n/**\n * Label placement relative to connector annotation. Connector annotation is bound and drawn between two nodes\n * defined by two properties: `fromItem` and `toItem`. Label can be placed close to \"start\", \"end\" nodes or in between of them\n *  along the connector line. \n *\n * @enum {ConnectorLabelPlacementType}\n */\n\nexport var ConnectorLabelPlacementType = {\n  From: 0,\n  Between: 1,\n  To: 2\n};\n/**\n * @typedef {number} ConnectorPlacementType\n **/\n\n/**\n * Connector placement type defines style of connector line drawing over diagram layout. It supports two options: \n * the `Straight` is classic direct line connecting two nodes, this is the most expected style of connector annotation\n * drawing over diagram, the second style is called `Offbeat` and it design to dynamically adopt to nodes mutual \n * location and gap between them. It uses free hand line style drawing going from start to the end nodes. Since every diagram \n * is packed with various connection lines, this annotation placement style is deliberately made not straight, so it can be \n * noticeable on top of other lines of the diagram.\n *\n * @enum {ConnectorPlacementType}\n */\n\nexport var ConnectorPlacementType = {\n  /**\n   * Places connector annotation in the way that it does not overlap underlying diagram connector lines.\n   * If nodes are close to each other and gap between them cannot fit annotation, then \n   * it will be drawn on the side of the nodes, so it will have enough space for arrow and label.\n   */\n  Offbeat: 0,\n\n  /**\n   * Straight line annotation between nodes. This annotation mode provides basic conflict resolution between annotations\n   * overlapping each other. If two or more straight annotations overlap each other then layout engine will \n   * add extra offset to them, so they will be drawn in parallel to each other.\n   */\n  Straight: 1\n};\n/**\n * @typedef {number} ConnectorShapeType\n **/\n\n/**\n * Connector shape type defines number of lines and arrows at their ends drawn between nodes of the connector annotation.\n * This feature combined with basic conflict resolution, which places overlapping annotations in parallel when they overlap each other,\n * gives you full flexibility over variations of possible connector lines between two given nodes of diagram.\n *\n * @enum {ConnectorShapeType}\n */\n\nexport var ConnectorShapeType = {\n  /**\n   * Single line with one arrow\n   */\n  OneWay: 0,\n\n  /**\n   * Two parallel lines with single arrows\n   */\n  TwoWay: 1,\n\n  /**\n   * Single line with 2 arrows.\n   */\n  BothWay: 2\n};\nexport var ConnectorStyleType = {\n  Extra: 0,\n  Regular: 1,\n  Highlight: 2\n};\n/**\n * @typedef {number} ConnectorType\n **/\n\n/**\n * Connection lines style. This option is only applicable to nodes minimized to markers or lines.\n * Full size nodes are always connected with squared connection lines\n *  \n * @enum {ConnectorType}\n */\n\nexport var ConnectorType = {\n  /**\n   * Orthogonal connection lines\n   */\n  Squared: 0,\n\n  /**\n   * Angular direct node to node connection lines\n   */\n  Angular: 1,\n\n  /**\n   * Curved direct node to node connection lines\n   */\n  Curved: 2\n};\n/**\n * @typedef {number} ElbowType\n **/\n\n/**\n * Elbow style of connection lines\n *  \n * @enum {ElbowType}\n */\n\nexport var ElbowType = {\n  /**\n   * No elbow\n   */\n  None: 0,\n\n  /**\n   * Dot marker at the intersection\n   */\n  Dot: 1,\n\n  /**\n   * Bevel elbow\n   */\n  Bevel: 2,\n\n  /**\n   * Round elbow\n   */\n  Round: 3\n};\n/**\n * Defines option state.\n * \n * @readonly\n * @enum {number}\n */\n\nexport var Enabled = {\n  /**\n   * Option state is auto defined.\n   */\n  Auto: 0,\n\n  /**\n   * Enabled\n   */\n  True: 1,\n\n  /**\n   * Disabled\n   */\n  False: 2\n};\n/**\n * @typedef {number} GraphicsType\n **/\n\n/**\n * Graphics elements rendering mode\n *  \n * @enum {GraphicsType}\n */\n\nexport var GraphicsType = {\n  /**\n   * Scalable Vector Graphics\n   */\n  SVG: 0,\n\n  /**\n   * HTML Canvas\n   */\n  Canvas: 1\n};\n/**\n * @typedef {number} GroupByType\n **/\n\n/**\n * This enumeration defines objects gravity in the chart relative to parents and children.\n * For example connection lines can be drawn with arrows, so this enumeration controls\n * direction of arrows up towards parents or down towards children in the hierarchy.\n * The other example is nodes placement close to their immediate parents or immediate children \n * in case when parents and children are offset from them by multiple levels in hierarchy.\n *  \n * @enum {GroupByType}\n */\n\nexport var GroupByType = {\n  None: 0,\n  Parents: 1,\n  Children: 2\n};\n/**\n * @typedef {number} HorizontalAlignmentType\n **/\n\n/**\n * Horizontal alignment\n *  \n * @enum {HorizontalAlignmentType}\n */\n\nexport var HorizontalAlignmentType = {\n  Center: 0,\n  Left: 1,\n  Right: 2\n};\n/**\n * @typedef {number} ItemType\n **/\n\n/**\n * This enumeration defines child node placement relative to its parent node. By default all children that belong \n * to a parent node are of the same rank and status between each other and due to that, are always aligned below\n * the parent and are organized in the same way. However for special cases were the end user wishes to have a child\n * that is separate from the rest of it's siblings, we provide custom child types that the end user can use to\n * place different ranking nodes anywhere around the parent node. These placement options give a lot of space for\n * the creation of roles such as an Assistant, Adviser, various Partners and co-heads that may be in the organization.\n * Additionally, by default a node's regular children are always placed in a horizontal line below the parent node. See children\n * placement type options for regular children layout.\n *  \n * @enum {ItemType}\n */\n\nexport var ItemType = {\n  /**\n   * Regular node is a default placement of child nodes in form of horizontal row.\n   */\n  Regular: 0,\n\n  /**\n   * Adviser is drawn at the same row as parent node on the left or right side and connected horizontally to it. \n   */\n  Adviser: 2,\n\n  /**\n   * Assistant node is drawn at row in between parent and child rows and connected horizontally\n   * to connection line going from parent to the regular children\n   */\n  Assistant: 1,\n\n  /**\n   * Sub assistant is variation of assistant node type.\n   * It has the same placement but it is connected by the top side of the node to the connector line going to the parent node.\n   */\n  SubAssistant: 4,\n\n  /**\n   * Sub adviser is variation of adviser node type.\n   * It has the same placement but it is connected by the top side of the node to the connector line going to the parent node.\n   */\n  SubAdviser: 5,\n\n  /**\n   * General partner is imitation of multiple inheritance in the organizational chart hierarchy.\n   * General partner node is drawn side by side with its parent and remaining regular children\n   * are visually connected to both of them like they are their parents.\n   * Another layout feature of the general partner is that it is connected to parents of its immediate logical parent as well,\n   * so visually it becomes a child of its grand parent.\n   */\n  GeneralPartner: 6,\n\n  /**\n   * Limited partner is variation of general partner. The only difference is that is is not connected to its logical grand parent.\n   */\n  LimitedPartner: 7,\n\n  /**\n   * Adviser partner is a variation of limited partner. The only difference is that it has an extra connection line to its parent.\n   */\n  AdviserPartner: 8\n};\nexport var LabelType = {\n  Regular: 0,\n  Dummy: 1,\n  Fixed: 2,\n  None: 3\n};\nexport var Layers = {\n  LevelAnnotation: 1,\n  BackgroundAnnotation: 2,\n  BackgroundAnnotations: 3,\n  BackgroundConnectorAnnotation: 4,\n  BackgroundHighlightPathAnnotations: 5,\n  Connector: 6,\n  ForegroundHighlightPathAnnotations: 7,\n  Highlight: 8,\n  Marker: 9,\n  Label: 10,\n  Cursor: 11,\n  Item: 12,\n  ForegroundAnnotations: 13,\n  ForegroundConnectorAnnotation: 14,\n  Annotation: 15,\n  Controls: 16\n};\n/**\n * @typedef {number} LineType\n **/\n\n/**\n * Line style of connection lines.\n *  \n * @enum {LineType}\n */\n\nexport var LineType = {\n  Solid: 0,\n  Dotted: 1,\n  Dashed: 2\n};\n/**\n * @typedef {number} LoopsLayoutMode\n **/\n\n/**\n * Loops layout mode. Configuration may contain loop references between items, so control tries to find layout minimizing number of loops between levels, \n * so majority of references ideally should go in one direction. This option disables optimization and \n * forces items levels order to match their order in `items` collection. For example if you have two nodes `A` and `B` referencing each other as a parent, \n * then it is not defined which one is going to be on the top of the diagram. Set this option to `KeepItemsOrder`, if you need the first item in your collection to be\n * on the top, otherwise control will optimize loops layout in order to minimize number of loops in diagram.\n *  \n * @enum {LoopsLayoutMode}\n */\n\nexport var LoopsLayoutMode = {\n  /**\n   * Optimized. Control searches for layout producing minimal number of feedback loops in the diagram.\n   */\n  Optimized: 0,\n\n  /**\n   * Keeps order of items on levels, the same as in `items` collection property.\n   */\n  KeepItemsOrder: 1\n};\n/**\n * @typedef {number} NavigationMode\n **/\n\n/**\n * Interactivity mode. Control implements standard behavior of classic desktop UI controls. It supports single selected node - cursor.\n * It supports on mouse over node visual feedback - highlight. It supports selection of group of nodes - selected items. \n * All that functionality can be disabled depending on your application requirements.\n *  \n * @enum {NavigationMode}\n */\n\nexport var NavigationMode = {\n  /**\n   * Everything is on.\n   */\n  Default: 0,\n\n  /**\n   * Cursor selection only without highlight. \n   */\n  CursorOnly: 1,\n\n  /**\n   * Mouse over feedback only\n   */\n  HighlightOnly: 3,\n\n  /**\n   * No interactivity\n   */\n  Inactive: 2\n};\n/**\n * @typedef {number} NavigationMode\n **/\n\n/**\n * Neighbors selection mode. The control supports diagram auto fit into screen view. It is achieved via drawing nodes in form of markers.\n * So small nodes make diagram fit into the screen space, but they have no details. Our solution is to show cursor and selected items\n * of the diagram in full size and draw all other as markers.\n *\n * This enumeration controls visibility of neighbours of the cursor node in the auto fit mode. It allows to draw \n * them in full size regardless of available space.\n *\n * @enum {NavigationMode}\n */\n\nexport var NeighboursSelectionMode = {\n  /**\n   * Selects parents and children of the cursor item\n   */\n  ParentsAndChildren: 0,\n\n  /**\n   * Selects parents, children, spouses and siblings of the cursor item.\n   */\n  ParentsChildrenSiblingsAndSpouses: 1\n};\n/**\n * @typedef {number} OrientationType\n **/\n\n/**\n * Controls diagram layout orientation. The control can be rotated in any direction, this is needed for arabic support and various layout.\n *  \n * @enum {OrientationType}\n */\n\nexport var OrientationType = {\n  Top: 0,\n  Bottom: 1,\n  Left: 2,\n  Right: 3,\n  None: 4\n};\n/**\n * @typedef {number} PageFitMode\n **/\n\n/**\n * Fits diagram into available screen space. When diagram size significantly larger that available screen space, its scrolling and navigation\n * becomes problematic, so we support automatic diagram fit into the screen space via rendering some of its nodes in form of small markers.\n * Control supports several page fit mode options which can match your requirements depending on diagram layout, orientation and number of nodes.\n * \n * Autosize - this option is opposite to auto fit. It lets you expand control size to fit all diagram nodes full size without scroll bars.\n *  \n * @enum {PageFitMode}\n */\n\nexport var PageFitMode = {\n  /**\n   * Disabled. All nodes are being rendered using their templates.\n   */\n  None: 0,\n\n  /**\n   * Fits diagram into the view width, so it has no horizontal scrollbar.\n   */\n  PageWidth: 1,\n\n  /**\n   * Fits diagram into the view hight, so it has no vertical scrollbar.\n   */\n  PageHeight: 2,\n\n  /**\n   * Fits diagram into the view so it has no scroll bars.\n   */\n  FitToPage: 3,\n\n  /**\n   * This is opposite mode to auto fit. In this mode diagram controls its size, it sets its size to fit all nodes and render them full size using templates.\n   */\n  AutoSize: 5,\n\n  /**\n   * Renders all nodes as markers regardless of available screen space. Control selects and renders full size cursor, its neighbours and selected nodes only.\n   * Don't forget to disable selection path as well, so nodes from cursor up to the root are not selected.\n   */\n  SelectionOnly: 6\n};\n/**\n * @typedef {number} PlacementType\n **/\n\n/**\n * Defines element placement relative to rectangular area it is bound to.\n *  \n * @enum {PlacementType}\n */\n\nexport var PlacementType = {\n  /**\n   * Defined by other control options.\n   */\n  Auto: 0,\n  TopLeft: 8,\n  Top: 1,\n  TopRight: 2,\n  RightTop: 11,\n  Right: 3,\n  RightBottom: 12,\n  BottomRight: 4,\n  Bottom: 5,\n  BottomLeft: 6,\n  LeftBottom: 10,\n  Left: 7,\n  LeftTop: 9\n};\n/**\n * @typedef {number} RenderingMode\n **/\n\n/**\n * This enumeration is used to tell rendering callback functions current state of the template.\n * It is needed for proper events binding and content updates.\n *\n * @enum {RenderingMode}\n */\n\nexport var RenderingMode = {\n  /**\n   * Template is just created.\n   */\n  Create: 0,\n\n  /**\n   * Template is reused and update is needed.\n   */\n  Update: 1\n};\nexport var SegmentType = {\n  Line: 0,\n  Move: 1,\n  QuadraticArc: 2,\n  CubicArc: 3,\n  Dot: 4\n};\n/**\n * @typedef {number} SelectionPathMode\n **/\n\n/**\n * Selection path mode. This enumeration controls visibility of nodes between cursor and the root of the diagram in the auto fit mode. It allows to draw \n * them in full size regardless of available space and auto fit mode.\n * \n * The control supports diagram auto fit into screen view. It is achieved via drawing nodes in form of markers.\n * So small nodes make diagram fit into the screen space, but they have no details. Our solution is to show cursor and selected items\n * of the diagram in full size and draw all other diagram nodes as markers.\n *\n * @enum {SelectionPathMode}\n */\n\nexport var SelectionPathMode = {\n  /**\n   * No selection path\n   */\n  None: 0,\n\n  /**\n   * Selects cursor node parents up to the root are renders them full size regardless of available space.\n   */\n  FullStack: 1\n};\n/**\n * @typedef {number} ShapeType\n **/\n\n/**\n * Shapes\n *  \n * @enum {ShapeType}\n */\n\nexport var ShapeType = {\n  Rectangle: 0,\n  Oval: 1,\n  Triangle: 2,\n  CrossOut: 3,\n  Circle: 4,\n  Rhombus: 5,\n  Wedge: 7,\n  FramedOval: 8,\n  FramedTriangle: 9,\n  FramedWedge: 10,\n  FramedRhombus: 11,\n  None: 6\n};\nexport var SideFlag = {\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8\n};\n/**\n * @typedef {number} TextOrientationType\n **/\n\n/**\n * Text rotation\n *  \n * @enum {TextOrientationType}\n */\n\nexport var TextOrientationType = {\n  /**\n   * Regular horizontal text\n   */\n  Horizontal: 0,\n\n  /**\n   * Rotate text left for 90 degree.\n   */\n  RotateLeft: 1,\n\n  /**\n   * Rotate text right for 90 degree.\n   */\n  RotateRight: 2,\n\n  /**\n   * Depends on other options.\n   */\n  Auto: 3\n};\n/**\n * @typedef {number} UpdateMode\n **/\n\n/**\n * Controls update of the diagram\n *\n * @enum {UpdateMode}\n */\n\nexport var UpdateMode = {\n  /**\n   * Forces control to make a full chart redraw. It is equivalent to initial chart creation. \n   * It removes everything from placeholder and renders all elements again.\n   */\n  Recreate: 0,\n\n  /**\n   * Optimized refresh. It only updates visual elements which needs to be updated.\n   */\n  Refresh: 1,\n\n  /**\n   * Updates highlight position only\n   */\n  PositonHighlight: 2\n};\n/**\n * @typedef {number} VectorRelationType\n **/\n\n/**\n * Defines relation between two vectors\n *\n * @enum {VectorRelationType}\n */\n\nexport var VectorRelationType = {\n  None: 0,\n  Null: 1,\n  Collinear: 2,\n  Opposite: 3\n};\n/**\n * @typedef {number} VerticalAlignmentType\n **/\n\n/**\n * Controls nodes vertical alignment inside row of nodes. If row of nodes contains nodes of\n * multiple sizes then small nodes are vertically aligned relative to their large neighbours.\n *  \n * @enum {VerticalAlignmentType}\n */\n\nexport var VerticalAlignmentType = {\n  Top: 0,\n  Middle: 1,\n  Bottom: 2\n};\n/**\n * @typedef {number} Visibility\n **/\n\n/**\n * Minimal nodes visibility in the diagram. If auto fit of diagram into current page size is enabled, then\n * this option controls minimum allowed size of diagram nodes.\n *  \n * @enum {Visibility}\n */\n\nexport var Visibility = {\n  /**\n   * Selects best visibility mode.\n   */\n  Auto: 0,\n\n  /**\n   * Regular template based diagram nodes\n   */\n  Normal: 1,\n\n  /**\n   * Diagram draws nodes in form of markers\n   */\n  Dot: 2,\n\n  /**\n   * Diagram only draws connection lines and hides actual nodes.\n   */\n  Line: 3,\n\n  /**\n   * Makes node invisible in layout. If node has no parents then \n   * its connection lines are hidden as well.\n   * \n   * @ignore\n   */\n  Invisible: 4\n};\n/**\n * @typedef {number} ZOrderType\n **/\n\n/**\n * Option to draw annotation in the foreground or in the background of diagram nodes.\n *  \n * @enum {ZOrderType}\n */\n\nexport var ZOrderType = {\n  /**\n   * Depends on annotation type.\n   */\n  Auto: 0,\n\n  /**\n   * Background\n   */\n  Background: 1,\n\n  /**\n   * Foreground\n   */\n  Foreground: 2\n};","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/enums.js"],"names":["AdviserPlacementType","Auto","Left","Right","AnnotationType","Connector","Shape","HighlightPath","Label","Background","Level","ChildrenPlacementType","Vertical","Horizontal","Matrix","Colors","AliceBlue","AntiqueWhite","Aqua","Aquamarine","Azure","Beige","Bisque","Black","BlanchedAlmond","Blue","BlueViolet","Brown","BurlyWood","Bronze","CadetBlue","ChartReuse","Chocolate","Coral","CornflowerBlue","Cornsilk","Crimson","Cyan","DarkBlue","DarkCyan","DarkGoldenrod","DarkGray","DarkGreen","DarkKhaki","DarkMagenta","DarkOliveGreen","Darkorange","DarkOrchid","DarkRed","DarkSalmon","DarkSeaGreen","DarkSlateBlue","DarkSlateGray","DarkTurquoise","DarkViolet","DeepPink","DeepSkyBlue","DimGray","DodgerBlue","FireBrick","FloralWhite","ForestGreen","Fuchsia","Gainsboro","GhostWhite","Gold","Goldenrod","Gray","Green","GreenYellow","Honeydew","Hotpink","IndianRed","Indigo","Ivory","Khaki","Lavender","LavenderBlush","Lawngreen","Lemonchiffon","LightBlue","LightCoral","LightCyan","LightGoldenrodYellow","LightGray","LightGreen","LightPink","LightSalmon","LightSeaGreen","LightSkyBlue","LightSlateGray","LightSteelBlue","LightYellow","Lime","Limegreen","Linen","Magenta","Maroon","MediumAquamarine","MediumBlue","MediumOrchid","MediumPurple","MediumSeaGreen","MediumSlateBlue","MediumSpringGreen","MediumTurquoise","MediumVioletRed","MidnightBlue","MintCream","MistyRose","Moccasin","NavajoWhite","Navy","Oldlace","Olive","Olivedrab","Orange","OrangeRed","Orchid","PaleGoldenRod","PaleGreen","PaleTurquoise","PaleVioletRed","Papayawhip","Peachpuff","Peru","Pink","Plum","PowderBlue","Purple","Red","RosyBrown","RoyalBlue","SaddleBrown","Salmon","SandyBrown","SeaGreen","Seashell","Sienna","Silver","SkyBlue","SlateBlue","SlateGray","Snow","SpringGreen","SteelBlue","Tan","Teal","Thistle","Tomato","Turquoise","Violet","Wheat","White","WhiteSmoke","Yellow","YellowGreen","ConnectorLabelPlacementType","From","Between","To","ConnectorPlacementType","Offbeat","Straight","ConnectorShapeType","OneWay","TwoWay","BothWay","ConnectorStyleType","Extra","Regular","Highlight","ConnectorType","Squared","Angular","Curved","ElbowType","None","Dot","Bevel","Round","Enabled","True","False","GraphicsType","SVG","Canvas","GroupByType","Parents","Children","HorizontalAlignmentType","Center","ItemType","Adviser","Assistant","SubAssistant","SubAdviser","GeneralPartner","LimitedPartner","AdviserPartner","LabelType","Dummy","Fixed","Layers","LevelAnnotation","BackgroundAnnotation","BackgroundAnnotations","BackgroundConnectorAnnotation","BackgroundHighlightPathAnnotations","ForegroundHighlightPathAnnotations","Marker","Cursor","Item","ForegroundAnnotations","ForegroundConnectorAnnotation","Annotation","Controls","LineType","Solid","Dotted","Dashed","LoopsLayoutMode","Optimized","KeepItemsOrder","NavigationMode","Default","CursorOnly","HighlightOnly","Inactive","NeighboursSelectionMode","ParentsAndChildren","ParentsChildrenSiblingsAndSpouses","OrientationType","Top","Bottom","PageFitMode","PageWidth","PageHeight","FitToPage","AutoSize","SelectionOnly","PlacementType","TopLeft","TopRight","RightTop","RightBottom","BottomRight","BottomLeft","LeftBottom","LeftTop","RenderingMode","Create","Update","SegmentType","Line","Move","QuadraticArc","CubicArc","SelectionPathMode","FullStack","ShapeType","Rectangle","Oval","Triangle","CrossOut","Circle","Rhombus","Wedge","FramedOval","FramedTriangle","FramedWedge","FramedRhombus","SideFlag","TextOrientationType","RotateLeft","RotateRight","UpdateMode","Recreate","Refresh","PositonHighlight","VectorRelationType","Null","Collinear","Opposite","VerticalAlignmentType","Middle","Visibility","Normal","Invisible","ZOrderType","Foreground"],"mappings":"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","sourcesContent":["/**\n * @typedef {number} AdviserPlacementType\n **/\n\n\n/**\n * Defines leftward or rightward item placement relative to the referenced item.\n * In case of assistants and advisers the referenced item is their immediate parent.\n * In case of family diagram the referenced item is spouse or sibling in the row. \n *  \n * @enum {AdviserPlacementType}\n */\nexport const AdviserPlacementType = {\n    /**\n     * Auto select by layout manager\n     */\n    Auto: 0,\n    /**\n     * Left side\n     */\n    Left: 2,\n    /**\n     * Right side\n     */\n    Right: 3\n};\n\n/**\n * @typedef {number} AnnotationType\n **/\n\n\n/**\n * Defines type of on-screen and in-layout annotation object. Annotations are geometrical \n * figures drawn around or bound to existing nodes of the diagram.\n *\n * @enum {AnnotationType}\n */\nexport const AnnotationType = {\n    /**\n     * Connector lines between two nodes of the diagram. They are drawn on top of existing\n     * diagram layout and they don't affect nodes placement. So it is users responsibility to\n     * preserve space between nodes for them.\n     */\n    Connector: 0,\n    /**\n     * Shape annotation is a possibility to draw some geometrical\n     * shapes over several nodes of the diagram. \n     */\n    Shape: 1,\n    /**\n     * Highlight path annotation traces path between given sequence of nodes \n     * over existing connector lines in the diagram.\n     */\n    HighlightPath: 2,\n    /**\n     * In-layout label annotation. Label annotations are placed in layout between nodes,\n     * they preserve space between nodes, so they don't overlap neighboring nodes.\n     * Label annotations are designed for auto placement and bundling of connection lines between \n     * nodes when needed.\n     */\n    Label: 3,\n    /**\n     * Background annotation highlights nodes via drawing rectangular shape in the background.\n     * If shapes overlap the same style neighboring shapes they are merged into one continuous shape. \n     */\n    Background: 4,\n    /**\n     * Stripe annotation highlights same level nodes of the diagram via drawing continuous rectangular shape \n     * from side to side in their background. Stripe has optional title on the side of the diagram view area.\n     * Title may be placed inside or outside of the diagram. If it is placed inside, it is drawn in the \n     * background and does not occupy space. \n     */\n    Level: 5\n};\n\n/**\n * @typedef {number} ChildrenPlacementType\n **/\n\n\n/**\n * Defines shape of children formation. By default a node's children are always placed in a horizontal line \n * below the parent node. On a large scale this may result in the end user having to scroll screens \n * in order to view all of the nodes. To compensate for this, we provide the option of placing all \n * of the children of a parent node in a square/matrix formation. This will reduce sideways screen \n * scrolling by compacting the child nodes into a much smaller area on the screen.\n *  \n * @enum {ChildrenPlacementType}\n */\nexport const ChildrenPlacementType = {\n    /**\n     * Auto. This mode lets you set children layout at the component level\n     * and then redefine it for individual nodes if needed.\n     */\n    Auto: 0,\n    /**\n     * Children placed in vertical column\n     */\n    Vertical: 1,\n    /**\n     * Horizontal children layout\n     */\n    Horizontal: 2,\n    /**\n     * Matrix formation of the children\n     */\n    Matrix: 3\n};\n\n/**\n * @typedef {string} Colors\n **/\n\n/**\n * Just a list of named colors.\n * \n * @ignore\n * @enum {Colors}\n */\nexport const Colors = {\n    AliceBlue: \"#f0f8ff\",\n    AntiqueWhite: \"#faebd7\",\n    Aqua: \"#00ffff\",\n    Aquamarine: \"#7fffd4\",\n    Azure: \"#f0ffff\",\n  \n    Beige: \"#f5f5dc\",\n    Bisque: \"#ffe4c4\",\n    Black: \"#000000\",\n    BlanchedAlmond: \"#ffebcd\",\n    Blue: \"#0000ff\",\n    BlueViolet: \"#8a2be2\",\n    Brown: \"#a52a2a\",\n    BurlyWood: \"#deb887\",\n    Bronze: \"#cd7f32\",\n  \n    CadetBlue: \"#5f9ea0\",\n    ChartReuse: \"#7fff00\",\n    Chocolate: \"#d2691e\",\n    Coral: \"#ff7f50\",\n    CornflowerBlue: \"#6495ed\",\n    Cornsilk: \"#fff8dc\",\n    Crimson: \"#dc143c\",\n    Cyan: \"#00ffff\",\n    DarkBlue: \"#00008b\",\n    DarkCyan: \"#008b8b\",\n    DarkGoldenrod: \"#b8860b\",\n    DarkGray: \"#a9a9a9\",\n    DarkGreen: \"#006400\",\n    DarkKhaki: \"#bdb76b\",\n    DarkMagenta: \"#8b008b\",\n    DarkOliveGreen: \"#556b2f\",\n    Darkorange: \"#ff8c00\",\n    DarkOrchid: \"#9932cc\",\n    DarkRed: \"#8b0000\",\n    DarkSalmon: \"#e9967a\",\n    DarkSeaGreen: \"#8fbc8f\",\n    DarkSlateBlue: \"#483d8b\",\n    DarkSlateGray: \"#2f4f4f\",\n    DarkTurquoise: \"#00ced1\",\n    DarkViolet: \"#9400d3\",\n    DeepPink: \"#ff1493\",\n    DeepSkyBlue: \"#00bfff\",\n    DimGray: \"#696969\",\n    DodgerBlue: \"#1e90ff\",\n  \n    FireBrick: \"#b22222\",\n    FloralWhite: \"#fffaf0\",\n    ForestGreen: \"#228b22\",\n    Fuchsia: \"#ff00ff\",\n  \n    Gainsboro: \"#dcdcdc\",\n    GhostWhite: \"#f8f8ff\",\n    Gold: \"#ffd700\",\n    Goldenrod: \"#daa520\",\n    Gray: \"#808080\",\n    Green: \"#008000\",\n    GreenYellow: \"#adff2f\",\n  \n    Honeydew: \"#f0fff0\",\n    Hotpink: \"#ff69b4\",\n  \n    IndianRed: \"#cd5c5c\",\n    Indigo: \"#4b0082\",\n    Ivory: \"#fffff0\",\n    Khaki: \"#f0e68c\",\n  \n    Lavender: \"#e6e6fa\",\n    LavenderBlush: \"#fff0f5\",\n    Lawngreen: \"#7cfc00\",\n    Lemonchiffon: \"#fffacd\",\n    LightBlue: \"#add8e6\",\n    LightCoral: \"#f08080\",\n    LightCyan: \"#e0ffff\",\n    LightGoldenrodYellow: \"#fafad2\",\n  \n    LightGray: \"#d3d3d3\",\n    LightGreen: \"#90ee90\",\n    LightPink: \"#ffb6c1\",\n    LightSalmon: \"#ffa07a\",\n    LightSeaGreen: \"#20b2aa\",\n    LightSkyBlue: \"#87cefa\",\n    LightSlateGray: \"#778899\",\n    LightSteelBlue: \"#b0c4de\",\n  \n    LightYellow: \"#ffffe0\",\n    Lime: \"#00ff00\",\n    Limegreen: \"#32cd32\",\n    Linen: \"#faf0e6\",\n  \n    Magenta: \"#ff00ff\",\n    Maroon: \"#800000\",\n    MediumAquamarine: \"#66cdaa\",\n    MediumBlue: \"#0000cd\",\n    MediumOrchid: \"#ba55d3\",\n    MediumPurple: \"#9370d8\",\n    MediumSeaGreen: \"#3cb371\",\n    MediumSlateBlue: \"#7b68ee\",\n  \n    MediumSpringGreen: \"#00fa9a\",\n    MediumTurquoise: \"#48d1cc\",\n    MediumVioletRed: \"#c71585\",\n    MidnightBlue: \"#191970\",\n    MintCream: \"#f5fffa\",\n    MistyRose: \"#ffe4e1\",\n    Moccasin: \"#ffe4b5\",\n  \n    NavajoWhite: \"#ffdead\",\n    Navy: \"#000080\",\n  \n    Oldlace: \"#fdf5e6\",\n    Olive: \"#808000\",\n    Olivedrab: \"#6b8e23\",\n    Orange: \"#ffa500\",\n    OrangeRed: \"#ff4500\",\n    Orchid: \"#da70d6\",\n  \n    PaleGoldenRod: \"#eee8aa\",\n    PaleGreen: \"#98fb98\",\n    PaleTurquoise: \"#afeeee\",\n    PaleVioletRed: \"#d87093\",\n    Papayawhip: \"#ffefd5\",\n    Peachpuff: \"#ffdab9\",\n    Peru: \"#cd853f\",\n    Pink: \"#ffc0cb\",\n    Plum: \"#dda0dd\",\n    PowderBlue: \"#b0e0e6\",\n    Purple: \"#800080\",\n  \n    Red: \"#ff0000\",\n    RosyBrown: \"#bc8f8f\",\n    RoyalBlue: \"#4169e1\",\n  \n    SaddleBrown: \"#8b4513\",\n    Salmon: \"#fa8072\",\n    SandyBrown: \"#f4a460\",\n    SeaGreen: \"#2e8b57\",\n    Seashell: \"#fff5ee\",\n    Sienna: \"#a0522d\",\n    Silver: \"#c0c0c0\",\n    SkyBlue: \"#87ceeb\",\n    SlateBlue: \"#6a5acd\",\n    SlateGray: \"#708090\",\n    Snow: \"#fffafa\",\n    SpringGreen: \"#00ff7f\",\n    SteelBlue: \"#4682b4\",\n  \n    Tan: \"#d2b48c\",\n    Teal: \"#008080\",\n    Thistle: \"#d8bfd8\",\n    Tomato: \"#ff6347\",\n    Turquoise: \"#40e0d0\",\n  \n    Violet: \"#ee82ee\",\n  \n    Wheat: \"#f5deb3\",\n    White: \"#ffffff\",\n    WhiteSmoke: \"#f5f5f5\",\n  \n    Yellow: \"#ffff00\",\n    YellowGreen: \"#9acd32\"\n};\n\n/**\n * @typedef {number} ConnectorLabelPlacementType\n **/\n\n\n/**\n * Label placement relative to connector annotation. Connector annotation is bound and drawn between two nodes\n * defined by two properties: `fromItem` and `toItem`. Label can be placed close to \"start\", \"end\" nodes or in between of them\n *  along the connector line. \n *\n * @enum {ConnectorLabelPlacementType}\n */\nexport const ConnectorLabelPlacementType = {\n    From: 0,\n    Between: 1,\n    To: 2\n};\n\n/**\n * @typedef {number} ConnectorPlacementType\n **/\n\n\n/**\n * Connector placement type defines style of connector line drawing over diagram layout. It supports two options: \n * the `Straight` is classic direct line connecting two nodes, this is the most expected style of connector annotation\n * drawing over diagram, the second style is called `Offbeat` and it design to dynamically adopt to nodes mutual \n * location and gap between them. It uses free hand line style drawing going from start to the end nodes. Since every diagram \n * is packed with various connection lines, this annotation placement style is deliberately made not straight, so it can be \n * noticeable on top of other lines of the diagram.\n *\n * @enum {ConnectorPlacementType}\n */\nexport const ConnectorPlacementType = {\n    /**\n     * Places connector annotation in the way that it does not overlap underlying diagram connector lines.\n     * If nodes are close to each other and gap between them cannot fit annotation, then \n     * it will be drawn on the side of the nodes, so it will have enough space for arrow and label.\n     */\n    Offbeat: 0,\n    /**\n     * Straight line annotation between nodes. This annotation mode provides basic conflict resolution between annotations\n     * overlapping each other. If two or more straight annotations overlap each other then layout engine will \n     * add extra offset to them, so they will be drawn in parallel to each other.\n     */\n    Straight: 1\n};\n\n/**\n * @typedef {number} ConnectorShapeType\n **/\n\n\n/**\n * Connector shape type defines number of lines and arrows at their ends drawn between nodes of the connector annotation.\n * This feature combined with basic conflict resolution, which places overlapping annotations in parallel when they overlap each other,\n * gives you full flexibility over variations of possible connector lines between two given nodes of diagram.\n *\n * @enum {ConnectorShapeType}\n */\nexport const ConnectorShapeType = {\n    /**\n     * Single line with one arrow\n     */\n    OneWay: 0,\n    /**\n     * Two parallel lines with single arrows\n     */\n    TwoWay: 1,\n    /**\n     * Single line with 2 arrows.\n     */\n    BothWay: 2\n};\n\nexport const ConnectorStyleType = {\n    Extra: 0,\n    Regular: 1,\n    Highlight: 2\n};\n\n/**\n * @typedef {number} ConnectorType\n **/\n\n/**\n * Connection lines style. This option is only applicable to nodes minimized to markers or lines.\n * Full size nodes are always connected with squared connection lines\n *  \n * @enum {ConnectorType}\n */\nexport const ConnectorType = {\n    /**\n     * Orthogonal connection lines\n     */\n    Squared: 0,\n    /**\n     * Angular direct node to node connection lines\n     */\n    Angular: 1,\n    /**\n     * Curved direct node to node connection lines\n     */\n    Curved: 2\n};\n\n/**\n * @typedef {number} ElbowType\n **/\n\n/**\n * Elbow style of connection lines\n *  \n * @enum {ElbowType}\n */\nexport const ElbowType = {\n    /**\n     * No elbow\n     */\n    None: 0,\n    /**\n     * Dot marker at the intersection\n     */\n    Dot: 1,\n    /**\n     * Bevel elbow\n     */\n    Bevel: 2,\n    /**\n     * Round elbow\n     */\n    Round: 3\n};\n  \n/**\n * Defines option state.\n * \n * @readonly\n * @enum {number}\n */\nexport const Enabled = {\n    /**\n     * Option state is auto defined.\n     */\n    Auto: 0,\n    /**\n     * Enabled\n     */\n    True: 1,\n    /**\n     * Disabled\n     */\n    False: 2\n};\n  \n/**\n * @typedef {number} GraphicsType\n **/\n\n/**\n * Graphics elements rendering mode\n *  \n * @enum {GraphicsType}\n */\nexport const GraphicsType = {\n    /**\n     * Scalable Vector Graphics\n     */\n    SVG: 0,\n    /**\n     * HTML Canvas\n     */\n    Canvas: 1\n};\n\n/**\n * @typedef {number} GroupByType\n **/\n\n/**\n * This enumeration defines objects gravity in the chart relative to parents and children.\n * For example connection lines can be drawn with arrows, so this enumeration controls\n * direction of arrows up towards parents or down towards children in the hierarchy.\n * The other example is nodes placement close to their immediate parents or immediate children \n * in case when parents and children are offset from them by multiple levels in hierarchy.\n *  \n * @enum {GroupByType}\n */\nexport const GroupByType = {\n    None: 0,\n    Parents: 1,\n    Children: 2\n};\n\n/**\n * @typedef {number} HorizontalAlignmentType\n **/\n\n/**\n * Horizontal alignment\n *  \n * @enum {HorizontalAlignmentType}\n */\nexport const HorizontalAlignmentType = {\n    Center: 0,\n    Left: 1,\n    Right: 2\n};\n\n/**\n * @typedef {number} ItemType\n **/\n\n/**\n * This enumeration defines child node placement relative to its parent node. By default all children that belong \n * to a parent node are of the same rank and status between each other and due to that, are always aligned below\n * the parent and are organized in the same way. However for special cases were the end user wishes to have a child\n * that is separate from the rest of it's siblings, we provide custom child types that the end user can use to\n * place different ranking nodes anywhere around the parent node. These placement options give a lot of space for\n * the creation of roles such as an Assistant, Adviser, various Partners and co-heads that may be in the organization.\n * Additionally, by default a node's regular children are always placed in a horizontal line below the parent node. See children\n * placement type options for regular children layout.\n *  \n * @enum {ItemType}\n */\nexport const ItemType = {\n    /**\n     * Regular node is a default placement of child nodes in form of horizontal row.\n     */\n    Regular: 0,\n    /**\n     * Adviser is drawn at the same row as parent node on the left or right side and connected horizontally to it. \n     */\n    Adviser: 2,\n    /**\n     * Assistant node is drawn at row in between parent and child rows and connected horizontally\n     * to connection line going from parent to the regular children\n     */\n    Assistant: 1,\n    /**\n     * Sub assistant is variation of assistant node type.\n     * It has the same placement but it is connected by the top side of the node to the connector line going to the parent node.\n     */\n    SubAssistant: 4,\n    /**\n     * Sub adviser is variation of adviser node type.\n     * It has the same placement but it is connected by the top side of the node to the connector line going to the parent node.\n     */\n    SubAdviser: 5,\n    /**\n     * General partner is imitation of multiple inheritance in the organizational chart hierarchy.\n     * General partner node is drawn side by side with its parent and remaining regular children\n     * are visually connected to both of them like they are their parents.\n     * Another layout feature of the general partner is that it is connected to parents of its immediate logical parent as well,\n     * so visually it becomes a child of its grand parent.\n     */\n    GeneralPartner: 6,\n    /**\n     * Limited partner is variation of general partner. The only difference is that is is not connected to its logical grand parent.\n     */\n    LimitedPartner: 7,\n    /**\n     * Adviser partner is a variation of limited partner. The only difference is that it has an extra connection line to its parent.\n     */\n    AdviserPartner: 8\n};\n\nexport const LabelType =\n{\n  Regular: 0,\n  Dummy: 1,\n  Fixed: 2,\n  None: 3\n};\n\nexport const Layers =\n{\n  LevelAnnotation: 1,\n  BackgroundAnnotation: 2,\n  BackgroundAnnotations: 3,\n  BackgroundConnectorAnnotation: 4,\n  BackgroundHighlightPathAnnotations: 5,\n  Connector: 6,\n  ForegroundHighlightPathAnnotations: 7,\n  Highlight: 8,\n  Marker: 9,\n  Label: 10,\n  Cursor: 11,\n  Item: 12,\n  ForegroundAnnotations: 13,\n  ForegroundConnectorAnnotation: 14,\n  Annotation: 15,\n  Controls: 16\n};\n\n/**\n * @typedef {number} LineType\n **/\n\n/**\n * Line style of connection lines.\n *  \n * @enum {LineType}\n */\nexport const LineType = {\n    Solid: 0,\n    Dotted: 1,\n    Dashed: 2\n};\n\n/**\n * @typedef {number} LoopsLayoutMode\n **/\n\n/**\n * Loops layout mode. Configuration may contain loop references between items, so control tries to find layout minimizing number of loops between levels, \n * so majority of references ideally should go in one direction. This option disables optimization and \n * forces items levels order to match their order in `items` collection. For example if you have two nodes `A` and `B` referencing each other as a parent, \n * then it is not defined which one is going to be on the top of the diagram. Set this option to `KeepItemsOrder`, if you need the first item in your collection to be\n * on the top, otherwise control will optimize loops layout in order to minimize number of loops in diagram.\n *  \n * @enum {LoopsLayoutMode}\n */\nexport const LoopsLayoutMode = {\n    /**\n     * Optimized. Control searches for layout producing minimal number of feedback loops in the diagram.\n     */\n    Optimized: 0,\n    /**\n     * Keeps order of items on levels, the same as in `items` collection property.\n     */\n    KeepItemsOrder: 1\n};\n\n/**\n * @typedef {number} NavigationMode\n **/\n\n/**\n * Interactivity mode. Control implements standard behavior of classic desktop UI controls. It supports single selected node - cursor.\n * It supports on mouse over node visual feedback - highlight. It supports selection of group of nodes - selected items. \n * All that functionality can be disabled depending on your application requirements.\n *  \n * @enum {NavigationMode}\n */\nexport const NavigationMode = {\n    /**\n     * Everything is on.\n     */\n    Default: 0,\n    /**\n     * Cursor selection only without highlight. \n     */\n    CursorOnly: 1,\n    /**\n     * Mouse over feedback only\n     */\n    HighlightOnly: 3,\n    /**\n     * No interactivity\n     */\n    Inactive: 2\n};\n\n/**\n * @typedef {number} NavigationMode\n **/\n\n/**\n * Neighbors selection mode. The control supports diagram auto fit into screen view. It is achieved via drawing nodes in form of markers.\n * So small nodes make diagram fit into the screen space, but they have no details. Our solution is to show cursor and selected items\n * of the diagram in full size and draw all other as markers.\n *\n * This enumeration controls visibility of neighbours of the cursor node in the auto fit mode. It allows to draw \n * them in full size regardless of available space.\n *\n * @enum {NavigationMode}\n */\nexport const NeighboursSelectionMode = {\n    /**\n     * Selects parents and children of the cursor item\n     */\n    ParentsAndChildren: 0,\n    /**\n     * Selects parents, children, spouses and siblings of the cursor item.\n     */\n    ParentsChildrenSiblingsAndSpouses: 1\n};\n  \n/**\n * @typedef {number} OrientationType\n **/\n\n/**\n * Controls diagram layout orientation. The control can be rotated in any direction, this is needed for arabic support and various layout.\n *  \n * @enum {OrientationType}\n */\nexport const OrientationType = {\n    Top: 0,\n    Bottom: 1,\n    Left: 2,\n    Right: 3,\n    None: 4\n};\n\n/**\n * @typedef {number} PageFitMode\n **/\n\n/**\n * Fits diagram into available screen space. When diagram size significantly larger that available screen space, its scrolling and navigation\n * becomes problematic, so we support automatic diagram fit into the screen space via rendering some of its nodes in form of small markers.\n * Control supports several page fit mode options which can match your requirements depending on diagram layout, orientation and number of nodes.\n * \n * Autosize - this option is opposite to auto fit. It lets you expand control size to fit all diagram nodes full size without scroll bars.\n *  \n * @enum {PageFitMode}\n */\nexport const PageFitMode = {\n    /**\n     * Disabled. All nodes are being rendered using their templates.\n     */\n    None: 0,\n    /**\n     * Fits diagram into the view width, so it has no horizontal scrollbar.\n     */\n    PageWidth: 1,\n    /**\n     * Fits diagram into the view hight, so it has no vertical scrollbar.\n     */\n    PageHeight: 2,\n    /**\n     * Fits diagram into the view so it has no scroll bars.\n     */\n    FitToPage: 3,\n    /**\n     * This is opposite mode to auto fit. In this mode diagram controls its size, it sets its size to fit all nodes and render them full size using templates.\n     */\n    AutoSize: 5,\n    /**\n     * Renders all nodes as markers regardless of available screen space. Control selects and renders full size cursor, its neighbours and selected nodes only.\n     * Don't forget to disable selection path as well, so nodes from cursor up to the root are not selected.\n     */\n    SelectionOnly: 6\n};\n\n/**\n * @typedef {number} PlacementType\n **/\n\n\n/**\n * Defines element placement relative to rectangular area it is bound to.\n *  \n * @enum {PlacementType}\n */\nexport const PlacementType = {\n    /**\n     * Defined by other control options.\n     */\n    Auto: 0,\n    TopLeft: 8,\n    Top: 1,\n    TopRight: 2,\n    RightTop: 11,\n    Right: 3,\n    RightBottom: 12,\n    BottomRight: 4,\n    Bottom: 5,\n    BottomLeft: 6,\n    LeftBottom: 10,\n    Left: 7,\n    LeftTop: 9\n};\n\n/**\n * @typedef {number} RenderingMode\n **/\n\n/**\n * This enumeration is used to tell rendering callback functions current state of the template.\n * It is needed for proper events binding and content updates.\n *\n * @enum {RenderingMode}\n */\nexport const RenderingMode = {\n    /**\n     * Template is just created.\n     */\n    Create: 0,\n    /**\n     * Template is reused and update is needed.\n     */\n    Update: 1\n};\n\nexport const SegmentType = {\n  Line: 0,\n  Move: 1,\n  QuadraticArc: 2,\n  CubicArc: 3,\n  Dot: 4\n};\n\n/**\n * @typedef {number} SelectionPathMode\n **/\n\n/**\n * Selection path mode. This enumeration controls visibility of nodes between cursor and the root of the diagram in the auto fit mode. It allows to draw \n * them in full size regardless of available space and auto fit mode.\n * \n * The control supports diagram auto fit into screen view. It is achieved via drawing nodes in form of markers.\n * So small nodes make diagram fit into the screen space, but they have no details. Our solution is to show cursor and selected items\n * of the diagram in full size and draw all other diagram nodes as markers.\n *\n * @enum {SelectionPathMode}\n */\nexport const SelectionPathMode = {\n    /**\n     * No selection path\n     */\n    None: 0,\n    /**\n     * Selects cursor node parents up to the root are renders them full size regardless of available space.\n     */\n    FullStack: 1\n};\n\n/**\n * @typedef {number} ShapeType\n **/\n\n/**\n * Shapes\n *  \n * @enum {ShapeType}\n */\nexport const ShapeType = {\n    Rectangle: 0,\n    Oval: 1,\n    Triangle: 2,\n    CrossOut: 3,\n    Circle: 4,\n    Rhombus: 5,\n    Wedge: 7,\n    FramedOval: 8,\n    FramedTriangle: 9,\n    FramedWedge: 10,\n    FramedRhombus: 11,\n    None: 6\n};\n\nexport const SideFlag = {\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8\n};\n\n/**\n * @typedef {number} TextOrientationType\n **/\n\n/**\n * Text rotation\n *  \n * @enum {TextOrientationType}\n */\nexport const TextOrientationType = {\n    /**\n     * Regular horizontal text\n     */\n    Horizontal: 0,\n    /**\n     * Rotate text left for 90 degree.\n     */\n    RotateLeft: 1,\n    /**\n     * Rotate text right for 90 degree.\n     */\n    RotateRight: 2,\n    /**\n     * Depends on other options.\n     */\n    Auto: 3\n};\n\n/**\n * @typedef {number} UpdateMode\n **/\n\n/**\n * Controls update of the diagram\n *\n * @enum {UpdateMode}\n */\nexport const UpdateMode = {\n    /**\n     * Forces control to make a full chart redraw. It is equivalent to initial chart creation. \n     * It removes everything from placeholder and renders all elements again.\n     */\n    Recreate: 0,\n    /**\n     * Optimized refresh. It only updates visual elements which needs to be updated.\n     */\n    Refresh: 1,\n    /**\n     * Updates highlight position only\n     */\n    PositonHighlight: 2\n};\n\n/**\n * @typedef {number} VectorRelationType\n **/\n\n/**\n * Defines relation between two vectors\n *\n * @enum {VectorRelationType}\n */\nexport const VectorRelationType = {\n    None: 0,\n    Null: 1,\n    Collinear: 2,\n    Opposite: 3\n};\n\n/**\n * @typedef {number} VerticalAlignmentType\n **/\n\n/**\n * Controls nodes vertical alignment inside row of nodes. If row of nodes contains nodes of\n * multiple sizes then small nodes are vertically aligned relative to their large neighbours.\n *  \n * @enum {VerticalAlignmentType}\n */\nexport const VerticalAlignmentType = {\n    Top: 0,\n    Middle: 1,\n    Bottom: 2\n};\n\n/**\n * @typedef {number} Visibility\n **/\n\n\n/**\n * Minimal nodes visibility in the diagram. If auto fit of diagram into current page size is enabled, then\n * this option controls minimum allowed size of diagram nodes.\n *  \n * @enum {Visibility}\n */\nexport const Visibility = {\n    /**\n     * Selects best visibility mode.\n     */\n    Auto: 0,\n    /**\n     * Regular template based diagram nodes\n     */\n    Normal: 1,\n    /**\n     * Diagram draws nodes in form of markers\n     */\n    Dot: 2,\n    /**\n     * Diagram only draws connection lines and hides actual nodes.\n     */\n    Line: 3,\n    /**\n     * Makes node invisible in layout. If node has no parents then \n     * its connection lines are hidden as well.\n     * \n     * @ignore\n     */\n    Invisible: 4\n};\n\n/**\n * @typedef {number} ZOrderType\n **/\n\n/**\n * Option to draw annotation in the foreground or in the background of diagram nodes.\n *  \n * @enum {ZOrderType}\n */\nexport const ZOrderType = {\n    /**\n     * Depends on annotation type.\n     */\n    Auto: 0,\n    /**\n     * Background\n     */\n    Background: 1,\n    /**\n     * Foreground\n     */\n    Foreground: 2\n};\n"]},"metadata":{},"sourceType":"module"}