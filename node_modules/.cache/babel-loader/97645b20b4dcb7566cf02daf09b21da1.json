{"ast":null,"code":"/*  Balance family tree so parents sharing the most children stay close to each other \n    Account for users position and primaryParent options\n*/\nimport FamilyBalance from './familyTransformations/FamilyBalance';\nimport FamilyMatrixesExtractor from './familyTransformations/FamilyMatrixesExtractor';\nimport UserDefinedPrimaryParents from './familyTransformations/UserDefinedPrimaryParents';\nimport TreeLevelConnectorStackSize from '../../models/TreeLevelConnectorStackSize';\nexport default function OrderFamilyNodesTask(orderFamilyNodesOptionTask, userDefinedNodesOrderTask, normalizeLogicalFamilyTask) {\n  var _data = {\n    maximumId: null,\n\n    /* maximum of OrgItem.id */\n    logicalFamily: null,\n    matrixes: {},\n    nestedLayoutBottomConnectorIds: {},\n    treeLevels: null,\n\n    /* TreeLevels */\n    bundles: null,\n\n    /* array of BaseConnectorBundle objects */\n    connectorStacks: null\n    /* array of TreeLevelConnectorStackSize objects, it keeps total number of horizontal connectors lines between parents and children stack on top of each other */\n\n  },\n      _familyBalance = new FamilyBalance(),\n      _familyMatrixesExtractor = new FamilyMatrixesExtractor(false),\n      _userDefinedPrimaryParents = new UserDefinedPrimaryParents(),\n      _nullTreeLevelConnectorStackSize = new TreeLevelConnectorStackSize();\n\n  function process(debug) {\n    var logicalFamily = normalizeLogicalFamilyTask.getLogicalFamily(),\n        maximumId = normalizeLogicalFamilyTask.getMaximumId(),\n        matrixes = {},\n        nestedLayoutBottomConnectorIds = {},\n        bundles = [];\n    var orderFamilyNodesOptions = orderFamilyNodesOptionTask.getOptions();\n    var options = {\n      enableMatrixLayout: orderFamilyNodesOptions.enableMatrixLayout,\n      minimumMatrixSize: orderFamilyNodesOptions.minimumMatrixSize,\n      maximumColumnsInMatrix: orderFamilyNodesOptions.maximumColumnsInMatrix\n    };\n    logicalFamily = logicalFamily.clone();\n    maximumId = _familyMatrixesExtractor.extract(options, logicalFamily, matrixes, nestedLayoutBottomConnectorIds, bundles, maximumId);\n    _data.logicalFamily = logicalFamily;\n    _data.matrixes = matrixes;\n    _data.nestedLayoutBottomConnectorIds = nestedLayoutBottomConnectorIds;\n    _data.bundles = bundles;\n    var balanceParams = {\n      logicalFamily: logicalFamily,\n      maximumId: maximumId,\n      itemsPositions: userDefinedNodesOrderTask.getPositions(),\n      itemsGroups: userDefinedNodesOrderTask.getGroups(),\n      primaryParents: _userDefinedPrimaryParents.getUserDefinedPrimaryParents(orderFamilyNodesOptions.items, logicalFamily)\n    };\n\n    var balanceResult = _familyBalance.balance(balanceParams);\n\n    _data.maximumId = balanceResult.maximumId;\n    _data.treeLevels = balanceResult.treeLevels;\n    _data.bundles = _data.bundles.concat(balanceResult.bundles);\n    _data.connectorStacks = balanceResult.connectorStacks;\n    return true;\n  }\n\n  function getLogicalFamily() {\n    return _data.logicalFamily;\n  }\n\n  function getMatrixes() {\n    return _data.matrixes;\n  }\n\n  function getNestedLayoutBottomConnectorIds() {\n    return _data.nestedLayoutBottomConnectorIds;\n  }\n\n  function getMaximumId() {\n    return _data.maximumId;\n  }\n\n  function getTreeLevels() {\n    return _data.treeLevels;\n  }\n\n  function getBundles() {\n    return _data.bundles;\n  }\n\n  function getConnectorsStacksSizes(levelid) {\n    return _data.connectorStacks[levelid] || _nullTreeLevelConnectorStackSize;\n  }\n\n  return {\n    process: process,\n    getLogicalFamily: getLogicalFamily,\n    getMatrixes: getMatrixes,\n    getNestedLayoutBottomConnectorIds: getNestedLayoutBottomConnectorIds,\n    getMaximumId: getMaximumId,\n    getTreeLevels: getTreeLevels,\n    getBundles: getBundles,\n    getConnectorsStacksSizes: getConnectorsStacksSizes\n  };\n}\n;","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/tasks/transformations/OrderFamilyNodesTask.js"],"names":["FamilyBalance","FamilyMatrixesExtractor","UserDefinedPrimaryParents","TreeLevelConnectorStackSize","OrderFamilyNodesTask","orderFamilyNodesOptionTask","userDefinedNodesOrderTask","normalizeLogicalFamilyTask","_data","maximumId","logicalFamily","matrixes","nestedLayoutBottomConnectorIds","treeLevels","bundles","connectorStacks","_familyBalance","_familyMatrixesExtractor","_userDefinedPrimaryParents","_nullTreeLevelConnectorStackSize","process","debug","getLogicalFamily","getMaximumId","orderFamilyNodesOptions","getOptions","options","enableMatrixLayout","minimumMatrixSize","maximumColumnsInMatrix","clone","extract","balanceParams","itemsPositions","getPositions","itemsGroups","getGroups","primaryParents","getUserDefinedPrimaryParents","items","balanceResult","balance","concat","getMatrixes","getNestedLayoutBottomConnectorIds","getTreeLevels","getBundles","getConnectorsStacksSizes","levelid"],"mappings":"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","sourcesContent":["/*  Balance family tree so parents sharing the most children stay close to each other \n    Account for users position and primaryParent options\n*/\nimport FamilyBalance from './familyTransformations/FamilyBalance';\nimport FamilyMatrixesExtractor from './familyTransformations/FamilyMatrixesExtractor';\nimport UserDefinedPrimaryParents from './familyTransformations/UserDefinedPrimaryParents';\nimport TreeLevelConnectorStackSize from '../../models/TreeLevelConnectorStackSize';\n\nexport default function OrderFamilyNodesTask(orderFamilyNodesOptionTask, userDefinedNodesOrderTask, normalizeLogicalFamilyTask) {\n  var _data = {\n    maximumId: null, /* maximum of OrgItem.id */\n    logicalFamily: null,\n    matrixes: {},\n    nestedLayoutBottomConnectorIds: {},\n    treeLevels: null, /* TreeLevels */\n    bundles: null, /* array of BaseConnectorBundle objects */\n    connectorStacks: null /* array of TreeLevelConnectorStackSize objects, it keeps total number of horizontal connectors lines between parents and children stack on top of each other */\n  },\n    _familyBalance = new FamilyBalance(),\n    _familyMatrixesExtractor = new FamilyMatrixesExtractor(false),\n    _userDefinedPrimaryParents = new UserDefinedPrimaryParents(),\n    _nullTreeLevelConnectorStackSize = new TreeLevelConnectorStackSize();\n\n  function process(debug) {\n    var logicalFamily = normalizeLogicalFamilyTask.getLogicalFamily(),\n      maximumId = normalizeLogicalFamilyTask.getMaximumId(),\n      matrixes = {},\n      nestedLayoutBottomConnectorIds = {},\n      bundles = [];\n\n    var orderFamilyNodesOptions = orderFamilyNodesOptionTask.getOptions();\n\n    var options = {\n      enableMatrixLayout: orderFamilyNodesOptions.enableMatrixLayout,\n      minimumMatrixSize: orderFamilyNodesOptions.minimumMatrixSize,\n      maximumColumnsInMatrix: orderFamilyNodesOptions.maximumColumnsInMatrix\n    };\n\n    logicalFamily = logicalFamily.clone();\n    maximumId = _familyMatrixesExtractor.extract(options, logicalFamily, matrixes, nestedLayoutBottomConnectorIds, bundles, maximumId);\n\n    _data.logicalFamily = logicalFamily;\n    _data.matrixes = matrixes;\n    _data.nestedLayoutBottomConnectorIds = nestedLayoutBottomConnectorIds;\n    _data.bundles = bundles;\n\n    var balanceParams = {\n      logicalFamily: logicalFamily,\n      maximumId: maximumId,\n      itemsPositions: userDefinedNodesOrderTask.getPositions(),\n      itemsGroups: userDefinedNodesOrderTask.getGroups(),\n      primaryParents: _userDefinedPrimaryParents.getUserDefinedPrimaryParents(orderFamilyNodesOptions.items, logicalFamily)\n    };\n\n    var balanceResult = _familyBalance.balance(balanceParams);\n\n    _data.maximumId = balanceResult.maximumId;\n    _data.treeLevels = balanceResult.treeLevels;\n    _data.bundles = _data.bundles.concat(balanceResult.bundles);\n    _data.connectorStacks = balanceResult.connectorStacks;\n\n    return true;\n  }\n\n  function getLogicalFamily() {\n    return _data.logicalFamily;\n  }\n\n  function getMatrixes() {\n    return _data.matrixes;\n  }\n\n  function getNestedLayoutBottomConnectorIds() {\n    return _data.nestedLayoutBottomConnectorIds;\n  }\n\n  function getMaximumId() {\n    return _data.maximumId;\n  }\n\n  function getTreeLevels() {\n    return _data.treeLevels;\n  }\n\n  function getBundles() {\n    return _data.bundles;\n  }\n\n  function getConnectorsStacksSizes(levelid) {\n    return _data.connectorStacks[levelid] || _nullTreeLevelConnectorStackSize;\n  }\n\n  return {\n    process: process,\n    getLogicalFamily: getLogicalFamily,\n    getMatrixes: getMatrixes,\n    getNestedLayoutBottomConnectorIds: getNestedLayoutBottomConnectorIds,\n    getMaximumId: getMaximumId,\n    getTreeLevels: getTreeLevels,\n    getBundles: getBundles,\n    getConnectorsStacksSizes: getConnectorsStacksSizes\n  };\n};\n"]},"metadata":{},"sourceType":"module"}