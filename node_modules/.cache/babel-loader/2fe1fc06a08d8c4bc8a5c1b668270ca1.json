{"ast":null,"code":"import { NavigationMode, GraphicsType, PageFitMode, Visibility, OrientationType, VerticalAlignmentType, ConnectorType, GroupByType, ElbowType, Enabled, SelectionPathMode, Colors, ShapeType, LineType, AdviserPlacementType, TextOrientationType, HorizontalAlignmentType, PlacementType, ChildrenPlacementType } from '../enums';\nimport Thickness from '../graphics/structs/Thickness';\nimport Size from '../graphics/structs/Size';\n/**\n * @class OrgConfig\n * @classdesc Organizational Chart configuration object. Use this object as a reference \n * for available properties and their default values.\n * \n * @param {string} name\n */\n\nexport default function OrgConfig(name) {\n  this.name = name !== undefined ? name : \"OrgDiagram\";\n  this.classPrefix = \"orgdiagram\";\n  /**\n   * Sets control navigation mode.\n   * \n   * By default control replicates interactivity of regular collection control. It has cursor to select single\n   * item in the collection. So user can click and select any node in the diagram. The control has highlight for mouse over feedback.\n   * So user can move mouse and see highlight frame and callout callback annotation for node under cursor.\n   * \n   * By `Default` the control has both cursor and highlight. If they are disabled then control is rendered as a static image.\n   * \n   * @type {NavigationMode}\n   */\n\n  this.navigationMode = NavigationMode.Default;\n  /**\n   * Sets preferred rendering technology. If selected graphics type is not supported on the device,\n   * then control will auto fallback to the first available one.\n   * \n   * @type {GraphicsType}\n   */\n\n  this.graphicsType = GraphicsType.SVG;\n  /**\n   * Page fit mode. Minimizing nodes into markers and labels. This option provides a special mode that renders the diagram\n   * nodes in the form of markers. This is a highly scalable form that is capable of rendering large numbers of nodes\n   * while not affecting the rendering performance. With this, huge diagrams can be fit into available screen space.\n   * \n   * When using a graphics editor to manually draw your diagrams, it is common place to have large gaps between the nodes.\n   * This can make the diagram/chart unreadable, hard to edit and navigate. On top of that, on a large scale the diagram could have screen size\n   * intervals between items. Admittedly the computer UI does allow the user to scale and fit the diagram in order to visualize it\n   * on a single screen. But in that case, the items become small and unreadable as there is no scaling priority and the items\n   * are just too small to be readable.\n   * \n   * @group Auto Layout\n   * @type {PageFitMode}\n   */\n\n  this.pageFitMode = PageFitMode.FitToPage;\n  /**\n   * Minimal nodes visibility in the diagram. If auto fit of the diagram into current page size is enabled, then\n   * this option controls minimum allowed size of the diagram nodes.\n   * \n   * @group Auto Layout\n   * @type {Visibility}\n   */\n\n  this.minimalVisibility = Visibility.Dot;\n  /**\n   * Set diagram orientation. This option controls diagram layout orientation. The control can be rotated in any direction,\n   * this is needed for Arabic support and various layouts.\n   * \n   * @group Auto Layout\n   * @type {OrientationType}\n   */\n\n  this.orientationType = OrientationType.Top;\n  /**\n   * Sets children horizontal alignment relative to their parent. The children by default are measured in size and then aligned \n   * towards the parent node. If it is `Center` aligned then parent node is placed in the middle of the children. In the `Left`\n   * alignment mode parent is aligned to left of the children and vice versa for `Right` alignment.\n   * \n   * @group Auto Layout\n   * @type {HorizontalAlignmentType}\n   */\n\n  this.horizontalAlignment = HorizontalAlignmentType.Center;\n  /**\n   * Sets items vertical alignment relative to each other within one level of the hierarchy. \n   * It does not change anything if diagram nodes are all of the same size.\n   * \n   * @group Auto Layout\n   * @type {VerticalAlignmentType}\n   */\n\n  this.verticalAlignment = VerticalAlignmentType.Middle;\n  /**\n   * Sets arrows direction for connector lines. If this property set to `Parents` then arrows are drawn\n   * from logical children towards logical parents. By default diagram has no arrows.\n   * \n   * @group Relation Lines\n   * @type {GroupByType}\n   */\n\n  this.arrowsDirection = GroupByType.None;\n  /**\n   * Show extra horizontal arrows on top of long horizontal connection lines for the easy visual tracing \n   * of relations between parents and children. By default it is off.\n   * \n   * @group Relation Lines\n   * @type {boolean}\n   */\n\n  this.showExtraArrows = false;\n  /**\n   * Set minimum space for placement of extra arrows on horizontal connection lines. See `showExtraArrows` property.\n   * \n   * @group Relation Lines\n   * @type {number}\n   */\n\n  this.extraArrowsMinimumSpace = 30;\n  /**\n   * Connection lines style. This option is only applicable to nodes minimized to markers or lines. Full size nodes\n   * are always connected with squared connection lines\n   * \n   * @group Relation Lines\n   * @type {ConnectorType}\n   */\n\n  this.connectorType = ConnectorType.Squared;\n  /**\n   * The bevel size of squared connector lines.\n   * \n   * @group Relation Lines\n   * @type {number}\n   */\n\n  this.bevelSize = 4;\n  /**\n   * Set style of squared connectors with custom elbows.\n   * \n   * @group Relation Lines\n   * @type {ElbowType}\n   */\n\n  this.elbowType = ElbowType.None;\n  /**\n   * The size of dot markers placed in the elbows of connector lines.\n   * \n   * @group Relation Lines\n   * @type {number}\n   */\n\n  this.elbowDotSize = 4;\n  /**\n   * Empty diagram message. This option is supposed to say user that chart is empty when no data is available for rendering.\n   * \n   * @type {string}\n   */\n\n  this.emptyDiagramMessage = \"Diagram is empty.\";\n  /**\n   * Items collection. Ths property defines data we render in the diagram.\n   * \n   * Every item should have set unique `id` property. They are used to create relations\n   * between items in the diagram and for rendering of various UI elements bound to nodes.\n   * \n   * @type {OrgItemConfig[]}\n   */\n\n  this.items = [];\n  /**\n   * Annotations. Annotations are API elements that are attached to the diagram nodes.\n   * We draw our annotations either in front of the nodes or in the background. The annotations \n   * don't affect the nodes placement in any way. As a result the control redraws them \n   * instantaneously without rendering or recalculating the actual diagram layout.\n   * \n   * @type {Array.<(ShapeAnnotationConfig | BackgroundAnnotationConfig | ConnectorAnnotationConfig | HighlightPathAnnotationConfig)>}\n   */\n\n  this.annotations = [];\n  /**\n   * Cursor item. Organization Chart control has API options equivalent to regular UI controls.\n   * The cursor item is used to select single item in the hierarchy with mouse click, \n   * highlight item provides visual feed back on mouse over. Selected items collection \n   * is equivalent to checked items in ListView or TreeView controls.\n   * \n   * Chart navigation depends on current cursor item, chart shows cursor and its neighbours \n   * in full size regardless of enabled page fit mode. So cursor item plays a role of local \n   * zoom in the chart hierarchy. User navigates around chart via clicking and moving\n   * cursor item around and zooming into data around new cursor item.\n   * \n   * The control notifies about this property changes with `onHighlightChanging` and `onHighlightChanged` events.\n   * \n   * If `null` then no cursor item selected in the diagram.\n   * \n   * @type {string}\n   */\n\n  this.cursorItem = null;\n  /**\n   * Highlighted item. Shows highlight and callout annotation for given item id. It does not trigger diagram\n   * layout or scrolling so it can be used to synchronize mouse over feedback of the diagram nodes with other\n   * collection controls or UI elements. \n   * \n   * The control notifies about this property changes with `onHighlightChanging` and `onHighlightChanged` events.\n   * \n   * If `null` then no highlight shown on the diagram.\n   * \n   * @type {string}\n   */\n\n  this.highlightItem = null;\n  /**\n   * Highlight gravity radius. This property controls mouse over feedback and callout annotation visibility for nodes\n   * rendered as markers when diagram auto fits nodes into available screen space. It makes marker highlighted when \n   * mouse pointer is inside of the gravity radius cycle of the marker. This property is ignored when the nearest item\n   * is outside of the screen boundaries and is not visible to the end user.\n   *\n   * The normal item has mouse over feedback in form of highlight border only when mouse pointer is inside of its boundaries. \n   * \n   * @type {number}\n   */\n\n  this.highlightGravityRadius = 40;\n  /**\n   * Selected items collection. Selected items is a collection of items ids having checked their check boxes.\n   * The control always shows selected items in the full size form, regardless of enabled page fit mode.\n   * \n   * The control notifies about user made changes in this collection with `onSelectionChanging` and `onSelectionChanged` events.\n   * \n   * @type {string[]}\n   */\n\n  this.selectedItems = [];\n  /**\n  * Sets visibility of selection check boxes for the diagram nodes.\n  * \n  * `Auto` - visible for cursor item only\n  * `True` - visible\n  * `False` - hidden\n  * \n  * See `selectedItems` property. All items listed in this property are going to have checked selection checkboxes.\n  * Checkbox can be added to item template, in that case it should be named=\"checkbox\", so control can use it as built in checkbox element.\n  * \n  * @type {Enabled}\n  */\n\n  this.hasSelectorCheckbox = Enabled.Auto;\n  /**\n   * Selection check box label. See `hasSelectorCheckbox` and `selectedItems` properties.\n   * \n   * @group Templates\n   * @type {string}\n   */\n\n  this.selectCheckBoxLabel = \"Selected\";\n  /**\n   * Selection path mode. This property controls visibility of nodes between cursor and the root of the diagram in the auto fit mode. It allows to draw \n   * them in full size regardless of available space and auto fit mode.\n   * \n   * The control supports diagram auto fit into screen view. It is achieved via drawing nodes in form of markers.\n   * So small nodes make diagram fit into the screen space, but they have no details. Our solution is to show cursor and selected items\n   * of the diagram in full size and draw all other diagram nodes as markers.\n   *\n   * @group Auto Layout\n   * @type {SelectionPathMode}\n   */\n\n  this.selectionPathMode = SelectionPathMode.FullStack;\n  /**\n   * Sets selected items frame visibility. If selected item is outside of the diagram's area visible to the end user,\n   * control displays that item in the form of the marker on frame around the diagram.\n   * \n   * @group Frame\n   * @type {boolean}\n   */\n\n  this.showFrame = false;\n  /**\n   * Frame inner padding. Adds extra padding around markers on the inner side of the frame.\n   * \n   * @group Frame\n   * @type {Thickness}\n   */\n\n  this.frameInnerPadding = new Thickness(2, 2, 2, 2);\n  /**\n   * Frame outer padding. Adds extra padding around markers on the outer side of the frame.\n   * \n   * @group Frame\n   * @type {Thickness}\n   */\n\n  this.frameOuterPadding = new Thickness(2, 2, 2, 2);\n  /**\n   * Collection of named templates used to define content for nodes, cursor and highlight.\n   * By default control provides templates for all types of visual elements.\n   * \n   * @group Templates\n   * @type {TemplateConfig[]}\n   */\n\n  this.templates = [];\n  /**\n   * Name of the template used to render nodes in the diagram. See `templates` property. Template name can be set individually for every node\n   * see `templateName` property of `OrgItemConfig`.\n   * \n   * @group Templates\n   * @type {string}\n   */\n\n  this.defaultTemplateName = null;\n  /**\n   * Sets buttons visibility.\n   * \n   * `Auto` - cursor item only.\n   * `True` - visible\n   * `False` - hidden\n   * \n   * @group Templates\n   * @type {Enabled}\n   */\n\n  this.hasButtons = Enabled.Auto;\n  /**\n   * On buttons panel render event. This callback function is called to render context of buttons panel.\n   * It is used to replace `buttons` collection property in ReactJS component. So we preserve context buttons panel as a functional \n   * concept, but eliminate buttons customization API.\n   *\n   * @callback\n   * @param {Object} event Mouse event\n   * @param {EventArgs} data Context information\n   */\n\n  this.onButtonsRender = null;\n  /**\n   * This callback function is called before `onHighlightChanged` event. See `highlightItem` property.\n   * Use this event to modify diagram elements not affecting diagram layout. For example on-screen connector annotations added \n   * in this event handler to diagram configuration would be rendered together with highlight.\n   *\n   * @callback\n   * @param {Object} event Mouse event\n   * @param {EventArgs} data Context information. Use properties of this argument to stop event propagate and further diagram layout and rendering.\n   */\n\n  this.onHighlightChanging = null;\n  /**\n   * On highlight item changed event. See `highlightItem` property.\n   *\n   * @callback\n   * @param {Object} event Mouse event\n   * @param {EventArgs} data Context information\n   */\n\n  this.onHighlightChanged = null;\n  /**\n   * On cursor item being changed event. See `cursorItem` property. This callback function is called before `onCursorChanged` event.\n   * Use this callback function to stop event propagation. See `EventArgs` for details.\n   *\n   * @callback\n   * @param {Object} event Mouse event\n   * @param {EventArgs} data Context information\n   */\n\n  this.onCursorChanging = null;\n  /**\n   * On cursor item changed event. See `cursorItem` property.\n   *\n   * @callback\n   * @param {Object} event Mouse event\n   * @param {EventArgs} data Context information\n   */\n\n  this.onCursorChanged = null;\n  /**\n   * On selected items being changed event. See `selectedItems` property.\n   *\n   * @callback\n   * @param {Object} event Mouse event\n   * @param {EventArgs} data Context information\n   */\n\n  this.onSelectionChanging = null;\n  /**\n   * On selected items changed event. See `selectedItems` property.\n   *\n   * @callback\n   * @param {Object} event Mouse event\n   * @param {EventArgs} data Context information\n   */\n\n  this.onSelectionChanged = null;\n  /**\n   * Button click event. See `buttons` property.\n   *\n   * @callback\n   * @param {Object} event Mouse event\n   * @param {EventArgs} data Context information\n   */\n\n  this.onButtonClick = null;\n  /**\n   * Mouse click event. \n   *\n   * @callback\n   * @param {Object} event Mouse event\n   * @param {EventArgs} data Context information\n   */\n\n  this.onMouseClick = null;\n  /**\n   * Mouse double click event. \n   *\n   * @callback\n   * @param {Object} event Mouse event\n   * @param {EventArgs} data Context information\n   */\n\n  this.onMouseDblClick = null;\n  /**\n   * Callback function for rendering content of the diagram nodes. This callback is only \n   * called when custom item template is defined in the template object configuration.\n   * This callback receives reference to DOM element and context object of the rendered item.\n   * The control reuses existing elements in the DOM, so it is applications responsibility \n   * to properly update their content.\n   *\n   * @callback\n   * @param {Object} event Event if available\n   * @param {RenderEventArgs} data The context information\n   */\n\n  this.onItemRender = null;\n  /**\n   * Callback function for rendering content of the highlight template. This callback is only \n   * called when custom highlight is defined in the template configuration.\n   *\n   * @callback\n   * @param {Object} event Event if available\n   * @param {RenderEventArgs} data The context information\n   */\n\n  this.onHighlightRender = null;\n  /**\n   * Callback function for rendering content of the cursor template. This callback is only \n   * called when custom cursor is defined in the template configuration.\n   *\n   * @callback\n   * @param {Object} event Event if available\n   * @param {RenderEventArgs} data The context information\n   */\n\n  this.onCursorRender = null;\n  /**\n   * Sets the spacing between rows.\n   * \n   * @group Intervals\n   * @type {number}\n   */\n\n  this.normalLevelShift = 20;\n  /**\n   * Sets the spacing after the row containing nodes minimized down to markers.\n   * \n   * @group Intervals\n   * @type {number}\n   */\n\n  this.dotLevelShift = 20;\n  /**\n   * Sets the spacing after the row containing nodes minimized down to lines.\n   * \n   * @group Intervals\n   * @type {number}\n   */\n\n  this.lineLevelShift = 10;\n  /**\n   * Sets interval between nodes of the same row.\n   * \n   * @group Intervals\n   * @type {number}\n   */\n\n  this.normalItemsInterval = 10;\n  /**\n   * Sets interval between nodes of the same row, minimized down to markers.\n   * \n   * @group Intervals\n   * @type {number}\n   */\n\n  this.dotItemsInterval = 1;\n  /**\n   * Sets interval between nodes of the same row, minimized down to lines.\n   * \n   * @group Intervals\n   * @type {number}\n   */\n\n  this.lineItemsInterval = 2;\n  /**\n   * Set cousins interval multiplier. This values adds extra space between branches of the hierarchy.\n   * For example nodes of the same parent have interval 20 and nodes of two different parents are going to have interval 100.\n   * \n   * @group Intervals\n   * @type {number}\n   */\n\n  this.cousinsIntervalMultiplier = 5;\n  /**\n   * The first font color of the title.\n   * \n   * The title background color is designed to be one of the available dimensions to group nodes in the diagram,\n   * so title can be unreadable if its color matches its background color. This property is created to auto resolve this issue\n   * via automatic switch between two available font title colors.\n   * \n   * @group Templates\n   * @type {string}\n   */\n\n  this.itemTitleFirstFontColor = Colors.White;\n  /**\n   * The second font color of the title.\n   * \n   * @group Templates\n   * @type {string}\n   */\n\n  this.itemTitleSecondFontColor = Colors.Navy;\n  /**\n   * Markers. The shape of the markers when nodes are minimized by auto fit. The control supports auto fit of the diagram into available screen space.\n   * When the diagram size significantly larger than available screen space, its scrolling and navigation becomes problematic,\n   * so control supports automatic diagram fit into the screen space via rendering some of its nodes in form of small markers.\n   * So this option sets default marker shape for nodes. It can be set individually per node in items configurations.\n   * \n   * The default color of shape is the same as `itemTitleColor` property set for individual items.\n   * \n   * @group Templates\n   * @type {ShapeType}\n   */\n\n  this.minimizedItemShapeType = ShapeType.None;\n  /**\n   * The relations lines color. The control uses this lines color to render basic relations between nodes.\n   * \n   * @group Relation Lines\n   * @type {string}\n   */\n\n  this.linesColor = Colors.Silver;\n  /**\n   * The relations lines width\n   * \n   * @group Relation Lines\n   * @type {number}\n   */\n\n  this.linesWidth = 1;\n  /**\n   * The relations lines pattern\n   * \n   * @group Relation Lines\n   * @type {LineType}\n   */\n\n  this.linesType = LineType.Solid;\n  /**\n   * Sets highlight lines color. The diagram uses highlight lines to render highlighted relation lines between nodes.\n   * \n   * @group Relation Lines\n   * @type {string}\n   */\n\n  this.highlightLinesColor = Colors.Red;\n  /**\n   * Sets highlight lines width.\n   * \n   * @group Relation Lines\n   * @type {number}\n   */\n\n  this.highlightLinesWidth = 1;\n  /**\n   * Sets highlight lines pattern.\n   * \n   * @group Relation Lines\n   * @type {LineType}\n   */\n\n  this.highlightLinesType = LineType.Solid;\n  /**\n   * Sets callout visibility.\n   * \n   * @group Callout\n   * @type {boolean}\n   */\n\n  this.showCallout = true;\n  /**\n   * Sets visibility of the callout annotation depending on size of a node it is shown for. See `pageFitMode` property.\n   * \n   * @group Callout\n   * @type {Visibility}\n   */\n\n  this.calloutMaximumVisibility = Visibility.Dot;\n  /**\n   * Callout annotation placement offset. Sets how far callout content is offset from the marker it is displayed for.\n   * \n   * @group Callout\n   * @type {number}\n   */\n\n  this.calloutPlacementOffset = 100;\n  /**\n   * Callout annotation default template name.\n   * \n   * Templates are HTML fragments containing layout and styles used to render diagram nodes.\n   * They are defined with a named configuration objects. See `templates` property of control's configuration object.\n   * \n   * @group Callout\n   * @type {string}\n   */\n\n  this.defaultCalloutTemplateName = null;\n  /**\n   * Callout annotation fill color.\n   * \n   * @group Callout\n   * @type {string}\n   */\n\n  this.calloutfillColor = \"#000000\";\n  /**\n   * Callout annotation border color.\n   * \n   * @group Callout\n   * @type {string}\n   */\n\n  this.calloutBorderColor = null;\n  /**\n   * Callout annotation border line offset.\n   * \n   * @group Callout\n   * @type {number}\n   */\n\n  this.calloutOffset = 4;\n  /**\n   * Callout annotation corner radius.\n   * \n   * @group Callout\n   * @type {number}\n   */\n\n  this.calloutCornerRadius = 4;\n  /**\n   * Callout annotation pointer width.\n   * \n   * @group Callout\n   * @type {string}\n   */\n\n  this.calloutPointerWidth = \"10%\";\n  /**\n   * Callout annotation border line width.\n   * \n   * @group Callout\n   * @type {number}\n   */\n\n  this.calloutLineWidth = 1;\n  /**\n   * Callout annotation opacity\n   * \n   * @group Callout\n   * @type {number}\n   */\n\n  this.calloutOpacity = 0.2;\n  /**\n   * Sets default formation of child nodes. By default all children that belong to a parent node are always aligned \n   * below and placed in a horizontal line. On a large scale this may result in the end user having to scroll screens\n   * in order to view all of the nodes. To compensate for this, we provide the option of placing all of the children\n   * of a parent node in a square/matrix formation. This will reduce sideways screen scrolling by compacting the child\n   * nodes into a much smaller area on the screen.\n   * \n   * @group Auto Layout\n   * @type {ChildrenPlacementType}\n   */\n\n  this.childrenPlacementType = ChildrenPlacementType.Horizontal;\n  /**\n   * Sets formation of leave children.\n   * \n   * @group Auto Layout\n   * @type {ChildrenPlacementType}\n   */\n\n  this.leavesPlacementType = ChildrenPlacementType.Horizontal;\n  /**\n   * Sets default placement of assistants hierarchies relative to the regular children of the parent node.\n   * If assistant node has its own children then control adds extra levels, so assistants children are placed\n   * above level of the parent node children.\n   * \n   * @group Auto Layout\n   * @type {boolean}\n   */\n\n  this.placeAssistantsAboveChildren = true;\n  /**\n  * Sets default placement of advisers hierarchies relative to the regular children of the parent node.\n  * If adviser node has its own children then control adds extra levels, so advisers children are placed\n  * above level of the parent node children.\n  * \n  * @group Auto Layout\n  * @type {boolean}\n  */\n\n  this.placeAdvisersAboveChildren = true;\n  /**\n   * Maximum number of columns for matrix layout of children.\n   * \n   * @group Auto Layout\n   * @type {number}\n   */\n\n  this.maximumColumnsInMatrix = 6;\n  /**\n   * The size of the panel containing context buttons.\n   * \n   * @group Templates\n   * @type {number}\n   */\n\n  this.buttonsPanelSize = 28;\n  /**\n   * The size of the panel containing group title.\n   * \n   * @group Group Titles\n   * @type {number}\n   */\n\n  this.groupTitlePanelSize = 24;\n  /**\n   * The size of the panel containing selection checkbox.\n   * \n   * @group Templates\n   * @type {number}\n   */\n\n  this.checkBoxPanelSize = 24;\n  /**\n   * Group titles placement. Defines group title and buttons panel position relative to the node.\n   * The group title on the side of the diagram node is one of controls default easy to use features. It gives extra dimension \n   * for nodes visual grouping in the diagram.\n   * \n   * @group Group Titles\n   * @type {AdviserPlacementType}\n   */\n\n  this.groupTitlePlacementType = AdviserPlacementType.Left;\n  /**\n   * Group titles orientation.\n   * \n   * @group Group Titles\n   * @type {TextOrientationType}\n   */\n\n  this.groupTitleOrientation = TextOrientationType.RotateRight;\n  /**\n   * Group titles vertical alignment.\n   * \n   * @group Group Titles\n   * @type {VerticalAlignmentType}\n   */\n\n  this.groupTitleVerticalAlignment = VerticalAlignmentType.Middle;\n  /**\n   * Group titles horizontal alignment.\n   * \n   * @group Group Titles\n   * @type {HorizontalAlignmentType}\n   */\n\n  this.groupTitleHorizontalAlignment = HorizontalAlignmentType.Center;\n  /**\n   * Group titles font size.\n   * \n   * @group Group Titles\n   * @type {number}\n   */\n\n  this.groupTitleFontSize = \"12px\";\n  /**\n   * Group titles font family.\n   * \n   * @group Group Titles\n   * @type {string}\n   */\n\n  this.groupTitleFontFamily = \"Arial\";\n  /**\n   * Group titles color.\n   * \n   * @group Group Titles\n   * @type {string}\n   */\n\n  this.groupTitleColor = Colors.RoyalBlue;\n  /**\n   * Group titles font weight: normal, bold\n   * \n   * @group Group Titles\n   * @type {string}\n   */\n\n  this.groupTitleFontWeight = \"normal\";\n  /**\n   * Group titles font style: normal, italic\n   * \n   * @group Group Titles\n   * @type {string}\n   */\n\n  this.groupTitleFontStyle = \"normal\";\n  /**\n   * The size of the panel containing level titles.\n   * \n   * @group Level Titles\n   * @type {number}\n   */\n\n  this.levelTitlePanelSize = 24;\n  /**\n   * Level titles placement. Defines level title panel position relative to the diagram.\n   * \n   * @group Level Titles\n   * @type {AdviserPlacementType}\n   */\n\n  this.levelTitlePlacementType = AdviserPlacementType.Left;\n  /**\n   * If this property is true then level titles are placed inside of the diagram's view port above or below diagram nodes.\n   * \n   * @group Level Titles\n   * @type {boolean}\n   */\n\n  this.levelTitlePlaceInside = false;\n  /**\n   * Group titles orientation.\n   * \n   * @group Level Titles\n   * @type {TextOrientationType}\n   */\n\n  this.levelTitleOrientation = TextOrientationType.Auto;\n  /**\n   * Level titles vertical alignment.\n   * \n   * @group Level Titles\n   * @type {VerticalAlignmentType}\n   */\n\n  this.levelTitleVerticalAlignment = VerticalAlignmentType.Middle;\n  /**\n   * Level titles horizontal alignment.\n   * \n   * @group Level Titles\n   * @type {HorizontalAlignmentType}\n   */\n\n  this.levelTitleHorizontalAlignment = HorizontalAlignmentType.Center;\n  /**\n   * Level titles font size.\n   * \n   * @group Level Titles\n   * @type {number}\n   */\n\n  this.levelTitleFontSize = \"12px\";\n  /**\n   * Level titles font family.\n   * \n   * @group Level Titles\n   * @type {string}\n   */\n\n  this.levelTitleFontFamily = \"Arial\";\n  /**\n   * Level titles font color.\n   * \n   * @group Level Titles\n   * @type {string}\n   */\n\n  this.levelTitleFontColor = Colors.White;\n  /**\n   * Level titles color.\n   * \n   * @group Level Titles\n   * @type {string}\n   */\n\n  this.levelTitleColor = Colors.RoyalBlue;\n  /**\n   * Level titles font weight: normal, bold\n   * \n   * @group Level Titles\n   * @type {string}\n   */\n\n  this.levelTitleFontWeight = \"normal\";\n  /**\n   * Level titles font style: normal, italic\n   * \n   * @group Level Titles\n   * @type {string}\n   */\n\n  this.levelTitleFontStyle = \"normal\";\n  /**\n   * @ignore\n   */\n\n  this.distance = 3;\n  /**\n   * CSS3 scale transform. Control supports content scaling using CSS scale transform. It scales everything except scroll bars.\n   * It properly handles mouse event coordinates. The CSS scale transform produces unreadable text and corrupted lines in desktop browsers,\n   * it looks good only in mobile browsers, so our recommendation is to use zoom with collection of item templates of various sizes.\n   * Templates gives you better control over quality of your content at various zoom levels.\n   * \n   * @type {number}\n   */\n\n  this.scale = 1;\n  /**\n   * Minimum CSS3 scale transform.\n   * \n   * @ignore\n   * @type {number}\n   */\n\n  this.minimumScale = 0.5;\n  /**\n   * Maximum CSS3 scale transform.\n   * \n   * @ignore\n   * @type {number}\n   */\n\n  this.maximumScale = 2;\n  /**\n   * Sets labels visibility for nodes when they are minimized into markers by page auto fit. See `pageFitMode` property.\n   * \n   * The control does not preserve space for labels in the diagram layout, since that would contradict the purpose of minimizing the nodes\n   * into markers. Use controls `dotLevelShift`, `dotItemsInterval` properties to preserve space between nodes for labels.\n   * \n   * Labels are displayed inside of `div`s of the fixed size, see `labelSize` property, and control provides simple conflict\n   * resolution to avoid labels overlapping. If two labels overlap each other with their bounding rectangles then only one of them\n   * is going to stay visible.\n   * \n   * Auto - displays label only when it has space to be rendered.\n   * True - shows label regardless, even if it overlaps other labels and nodes.\n   * False - hidden.\n   * \n   * @group Labels\n   * @type {Enabled}\n   */\n\n  this.showLabels = Enabled.Auto;\n  /**\n   * Label size. Sets labels placeholders `div`s size. It is needed to resolve labels overlapping.\n   * If one label overlaps another label the or item it will be hidden.\n   * \n   * @group Labels\n   * @type {Size}\n   */\n\n  this.labelSize = new Size(80, 24);\n  /**\n   * Sets labels offset from the markers bounding rectangles.\n   * \n   * @group Labels\n   * @type {number}\n   */\n\n  this.labelOffset = 1;\n  /**\n   * Labels orientation.\n   * \n   * @group Labels\n   * @type {TextOrientationType}\n   */\n\n  this.labelOrientation = TextOrientationType.Horizontal;\n  /**\n   * Labels placement. Sets labels placement relative to the markers bounding rectangles.\n   * \n   * @group Labels\n   * @type {PlacementType}\n   */\n\n  this.labelPlacement = PlacementType.Top;\n  /**\n   * Labels font size.\n   * \n   * @group Labels\n   * @type {string}\n   */\n\n  this.labelFontSize = \"10px\";\n  /**\n   * Labels font family.\n   * \n   * @group Labels\n   * @type {string}\n   */\n\n  this.labelFontFamily = \"Arial\";\n  /**\n   * Labels color\n   * \n   * @group Labels\n   * @type {string}\n   */\n\n  this.labelColor = Colors.Black;\n  /**\n   * Labels font weight\n   * Font weight: normal, bold\n   * \n   * @group Labels\n   * @type {string}\n   */\n\n  this.labelFontWeight = \"normal\";\n  /**\n   * Labels font style. Font style: normal, italic\n   * \n   * @group Labels\n   * @type {string}\n   */\n\n  this.labelFontStyle = \"normal\";\n  /**\n   * Enable panning. Enable chart panning with mouse drag & drop for desktop browsers.\n   * Disable it if you need to support items Drag & Drop.\n   * \n   * @type {boolean}\n   */\n\n  this.enablePanning = true;\n  /**\n   * Sets minimum size the diagram can shrink itself in auto size mode. See `pageFitMode` property.\n   * In the auto size mode diagram controls its placeholder size itself,\n   * it sets its size to accommodate all nodes and render them normally.\n   * \n   * @group Auto Layout\n   * @type {Size}\n   */\n\n  this.autoSizeMinimum = new Size(800, 600);\n  /**\n   * Sets maximum size the diagram can expand itself in auto size mode. See `pageFitMode` property.\n   * In the auto size mode diagram controls its placeholder size itself,\n   * it sets its size to accommodate all nodes and render them normally.\n   * \n   * @group Auto Layout\n   * @type {Size}\n   */\n\n  this.autoSizeMaximum = new Size(1024, 768);\n}\n;","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/configs/OrgConfig.js"],"names":["NavigationMode","GraphicsType","PageFitMode","Visibility","OrientationType","VerticalAlignmentType","ConnectorType","GroupByType","ElbowType","Enabled","SelectionPathMode","Colors","ShapeType","LineType","AdviserPlacementType","TextOrientationType","HorizontalAlignmentType","PlacementType","ChildrenPlacementType","Thickness","Size","OrgConfig","name","undefined","classPrefix","navigationMode","Default","graphicsType","SVG","pageFitMode","FitToPage","minimalVisibility","Dot","orientationType","Top","horizontalAlignment","Center","verticalAlignment","Middle","arrowsDirection","None","showExtraArrows","extraArrowsMinimumSpace","connectorType","Squared","bevelSize","elbowType","elbowDotSize","emptyDiagramMessage","items","annotations","cursorItem","highlightItem","highlightGravityRadius","selectedItems","hasSelectorCheckbox","Auto","selectCheckBoxLabel","selectionPathMode","FullStack","showFrame","frameInnerPadding","frameOuterPadding","templates","defaultTemplateName","hasButtons","onButtonsRender","onHighlightChanging","onHighlightChanged","onCursorChanging","onCursorChanged","onSelectionChanging","onSelectionChanged","onButtonClick","onMouseClick","onMouseDblClick","onItemRender","onHighlightRender","onCursorRender","normalLevelShift","dotLevelShift","lineLevelShift","normalItemsInterval","dotItemsInterval","lineItemsInterval","cousinsIntervalMultiplier","itemTitleFirstFontColor","White","itemTitleSecondFontColor","Navy","minimizedItemShapeType","linesColor","Silver","linesWidth","linesType","Solid","highlightLinesColor","Red","highlightLinesWidth","highlightLinesType","showCallout","calloutMaximumVisibility","calloutPlacementOffset","defaultCalloutTemplateName","calloutfillColor","calloutBorderColor","calloutOffset","calloutCornerRadius","calloutPointerWidth","calloutLineWidth","calloutOpacity","childrenPlacementType","Horizontal","leavesPlacementType","placeAssistantsAboveChildren","placeAdvisersAboveChildren","maximumColumnsInMatrix","buttonsPanelSize","groupTitlePanelSize","checkBoxPanelSize","groupTitlePlacementType","Left","groupTitleOrientation","RotateRight","groupTitleVerticalAlignment","groupTitleHorizontalAlignment","groupTitleFontSize","groupTitleFontFamily","groupTitleColor","RoyalBlue","groupTitleFontWeight","groupTitleFontStyle","levelTitlePanelSize","levelTitlePlacementType","levelTitlePlaceInside","levelTitleOrientation","levelTitleVerticalAlignment","levelTitleHorizontalAlignment","levelTitleFontSize","levelTitleFontFamily","levelTitleFontColor","levelTitleColor","levelTitleFontWeight","levelTitleFontStyle","distance","scale","minimumScale","maximumScale","showLabels","labelSize","labelOffset","labelOrientation","labelPlacement","labelFontSize","labelFontFamily","labelColor","Black","labelFontWeight","labelFontStyle","enablePanning","autoSizeMinimum","autoSizeMaximum"],"mappings":"AAAA,SAAQA,cAAR,EAAwBC,YAAxB,EAAsCC,WAAtC,EAAmDC,UAAnD,EAA+DC,eAA/D,EAAgFC,qBAAhF,EACEC,aADF,EACiBC,WADjB,EAC8BC,SAD9B,EACyCC,OADzC,EACkDC,iBADlD,EAEEC,MAFF,EAEUC,SAFV,EAEqBC,QAFrB,EAE+BC,oBAF/B,EAEqDC,mBAFrD,EAE0EC,uBAF1E,EAGEC,aAHF,EAGiBC,qBAHjB,QAIO,UAJP;AAKA,OAAOC,SAAP,MAAsB,+BAAtB;AACA,OAAOC,IAAP,MAAiB,0BAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;AACtC,OAAKA,IAAL,GAAaA,IAAI,KAAKC,SAAV,GAAuBD,IAAvB,GAA8B,YAA1C;AACA,OAAKE,WAAL,GAAmB,YAAnB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,cAAL,GAAsBzB,cAAc,CAAC0B,OAArC;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,YAAL,GAAoB1B,YAAY,CAAC2B,GAAjC;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,WAAL,GAAmB3B,WAAW,CAAC4B,SAA/B;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,iBAAL,GAAyB5B,UAAU,CAAC6B,GAApC;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,eAAL,GAAuB7B,eAAe,CAAC8B,GAAvC;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,mBAAL,GAA2BnB,uBAAuB,CAACoB,MAAnD;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,iBAAL,GAAyBhC,qBAAqB,CAACiC,MAA/C;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,eAAL,GAAuBhC,WAAW,CAACiC,IAAnC;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,eAAL,GAAuB,KAAvB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,uBAAL,GAA+B,EAA/B;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,aAAL,GAAqBrC,aAAa,CAACsC,OAAnC;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,SAAL,GAAiB,CAAjB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,SAAL,GAAiBtC,SAAS,CAACgC,IAA3B;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKO,YAAL,GAAoB,CAApB;AAGA;AACF;AACA;AACA;AACA;;AACE,OAAKC,mBAAL,GAA2B,mBAA3B;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,KAAL,GAAa,EAAb;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,WAAL,GAAmB,EAAnB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,UAAL,GAAkB,IAAlB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,aAAL,GAAqB,IAArB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,sBAAL,GAA8B,EAA9B;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,aAAL,GAAqB,EAArB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,mBAAL,GAA2B9C,OAAO,CAAC+C,IAAnC;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,mBAAL,GAA2B,UAA3B;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,iBAAL,GAAyBhD,iBAAiB,CAACiD,SAA3C;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,SAAL,GAAiB,KAAjB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,iBAAL,GAAyB,IAAI1C,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,CAAzB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAK2C,iBAAL,GAAyB,IAAI3C,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,CAAzB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAK4C,SAAL,GAAiB,EAAjB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,mBAAL,GAA2B,IAA3B;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,UAAL,GAAkBxD,OAAO,CAAC+C,IAA1B;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKU,eAAL,GAAuB,IAAvB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,mBAAL,GAA2B,IAA3B;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,kBAAL,GAA0B,IAA1B;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,gBAAL,GAAwB,IAAxB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,eAAL,GAAuB,IAAvB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,mBAAL,GAA2B,IAA3B;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,kBAAL,GAA0B,IAA1B;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,aAAL,GAAqB,IAArB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,YAAL,GAAoB,IAApB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,eAAL,GAAuB,IAAvB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,YAAL,GAAoB,IAApB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,iBAAL,GAAyB,IAAzB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,cAAL,GAAsB,IAAtB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,gBAAL,GAAwB,EAAxB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,aAAL,GAAqB,EAArB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,cAAL,GAAsB,EAAtB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,mBAAL,GAA2B,EAA3B;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,gBAAL,GAAwB,CAAxB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,iBAAL,GAAyB,CAAzB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,yBAAL,GAAiC,CAAjC;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,uBAAL,GAA+B3E,MAAM,CAAC4E,KAAtC;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,wBAAL,GAAgC7E,MAAM,CAAC8E,IAAvC;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,sBAAL,GAA8B9E,SAAS,CAAC4B,IAAxC;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKmD,UAAL,GAAkBhF,MAAM,CAACiF,MAAzB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,UAAL,GAAkB,CAAlB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,SAAL,GAAiBjF,QAAQ,CAACkF,KAA1B;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,mBAAL,GAA2BrF,MAAM,CAACsF,GAAlC;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,mBAAL,GAA2B,CAA3B;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,kBAAL,GAA0BtF,QAAQ,CAACkF,KAAnC;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKK,WAAL,GAAmB,IAAnB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,wBAAL,GAAgClG,UAAU,CAAC6B,GAA3C;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKsE,sBAAL,GAA8B,GAA9B;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,0BAAL,GAAkC,IAAlC;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,gBAAL,GAAwB,SAAxB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,kBAAL,GAA0B,IAA1B;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,aAAL,GAAqB,CAArB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,mBAAL,GAA2B,CAA3B;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,mBAAL,GAA2B,KAA3B;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,gBAAL,GAAwB,CAAxB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,cAAL,GAAsB,GAAtB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,qBAAL,GAA6B7F,qBAAqB,CAAC8F,UAAnD;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,mBAAL,GAA2B/F,qBAAqB,CAAC8F,UAAjD;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKE,4BAAL,GAAoC,IAApC;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,0BAAL,GAAkC,IAAlC;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,sBAAL,GAA8B,CAA9B;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,gBAAL,GAAwB,EAAxB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,mBAAL,GAA2B,EAA3B;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,iBAAL,GAAyB,EAAzB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,uBAAL,GAA+B1G,oBAAoB,CAAC2G,IAApD;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,qBAAL,GAA6B3G,mBAAmB,CAAC4G,WAAjD;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,2BAAL,GAAmCvH,qBAAqB,CAACiC,MAAzD;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKuF,6BAAL,GAAqC7G,uBAAuB,CAACoB,MAA7D;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAK0F,kBAAL,GAA0B,MAA1B;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,oBAAL,GAA4B,OAA5B;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,eAAL,GAAuBrH,MAAM,CAACsH,SAA9B;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,oBAAL,GAA4B,QAA5B;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,mBAAL,GAA2B,QAA3B;AAGA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,mBAAL,GAA2B,EAA3B;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,uBAAL,GAA+BvH,oBAAoB,CAAC2G,IAApD;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKa,qBAAL,GAA6B,KAA7B;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,qBAAL,GAA6BxH,mBAAmB,CAACyC,IAAjD;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKgF,2BAAL,GAAmCnI,qBAAqB,CAACiC,MAAzD;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKmG,6BAAL,GAAqCzH,uBAAuB,CAACoB,MAA7D;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKsG,kBAAL,GAA0B,MAA1B;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,oBAAL,GAA4B,OAA5B;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,mBAAL,GAA2BjI,MAAM,CAAC4E,KAAlC;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKsD,eAAL,GAAuBlI,MAAM,CAACsH,SAA9B;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKa,oBAAL,GAA4B,QAA5B;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,mBAAL,GAA2B,QAA3B;AAEA;AACF;AACA;;AACE,OAAKC,QAAL,GAAgB,CAAhB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,KAAL,GAAa,CAAb;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,YAAL,GAAoB,GAApB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,YAAL,GAAoB,CAApB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,UAAL,GAAkB3I,OAAO,CAAC+C,IAA1B;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAK6F,SAAL,GAAiB,IAAIjI,IAAJ,CAAS,EAAT,EAAa,EAAb,CAAjB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKkI,WAAL,GAAmB,CAAnB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,gBAAL,GAAwBxI,mBAAmB,CAACiG,UAA5C;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKwC,cAAL,GAAsBvI,aAAa,CAACiB,GAApC;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKuH,aAAL,GAAqB,MAArB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,eAAL,GAAuB,OAAvB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,UAAL,GAAkBhJ,MAAM,CAACiJ,KAAzB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,eAAL,GAAuB,QAAvB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,cAAL,GAAsB,QAAtB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,aAAL,GAAqB,IAArB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,eAAL,GAAuB,IAAI5I,IAAJ,CAAS,GAAT,EAAc,GAAd,CAAvB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAK6I,eAAL,GAAuB,IAAI7I,IAAJ,CAAS,IAAT,EAAe,GAAf,CAAvB;AACD;AAAA","sourcesContent":["import {NavigationMode, GraphicsType, PageFitMode, Visibility, OrientationType, VerticalAlignmentType,\n  ConnectorType, GroupByType, ElbowType, Enabled, SelectionPathMode,\n  Colors, ShapeType, LineType, AdviserPlacementType, TextOrientationType, HorizontalAlignmentType,\n  PlacementType, ChildrenPlacementType\n} from '../enums';\nimport Thickness from '../graphics/structs/Thickness';\nimport Size from '../graphics/structs/Size';\n\n/**\n * @class OrgConfig\n * @classdesc Organizational Chart configuration object. Use this object as a reference \n * for available properties and their default values.\n * \n * @param {string} name\n */\nexport default function OrgConfig(name) {\n  this.name = (name !== undefined) ? name : \"OrgDiagram\";\n  this.classPrefix = \"orgdiagram\";\n\n  /**\n   * Sets control navigation mode.\n   * \n   * By default control replicates interactivity of regular collection control. It has cursor to select single\n   * item in the collection. So user can click and select any node in the diagram. The control has highlight for mouse over feedback.\n   * So user can move mouse and see highlight frame and callout callback annotation for node under cursor.\n   * \n   * By `Default` the control has both cursor and highlight. If they are disabled then control is rendered as a static image.\n   * \n   * @type {NavigationMode}\n   */\n  this.navigationMode = NavigationMode.Default;\n\n  /**\n   * Sets preferred rendering technology. If selected graphics type is not supported on the device,\n   * then control will auto fallback to the first available one.\n   * \n   * @type {GraphicsType}\n   */\n  this.graphicsType = GraphicsType.SVG;\n\n  /**\n   * Page fit mode. Minimizing nodes into markers and labels. This option provides a special mode that renders the diagram\n   * nodes in the form of markers. This is a highly scalable form that is capable of rendering large numbers of nodes\n   * while not affecting the rendering performance. With this, huge diagrams can be fit into available screen space.\n   * \n   * When using a graphics editor to manually draw your diagrams, it is common place to have large gaps between the nodes.\n   * This can make the diagram/chart unreadable, hard to edit and navigate. On top of that, on a large scale the diagram could have screen size\n   * intervals between items. Admittedly the computer UI does allow the user to scale and fit the diagram in order to visualize it\n   * on a single screen. But in that case, the items become small and unreadable as there is no scaling priority and the items\n   * are just too small to be readable.\n   * \n   * @group Auto Layout\n   * @type {PageFitMode}\n   */\n  this.pageFitMode = PageFitMode.FitToPage;\n\n  /**\n   * Minimal nodes visibility in the diagram. If auto fit of the diagram into current page size is enabled, then\n   * this option controls minimum allowed size of the diagram nodes.\n   * \n   * @group Auto Layout\n   * @type {Visibility}\n   */\n  this.minimalVisibility = Visibility.Dot;\n\n  /**\n   * Set diagram orientation. This option controls diagram layout orientation. The control can be rotated in any direction,\n   * this is needed for Arabic support and various layouts.\n   * \n   * @group Auto Layout\n   * @type {OrientationType}\n   */\n  this.orientationType = OrientationType.Top;\n\n  /**\n   * Sets children horizontal alignment relative to their parent. The children by default are measured in size and then aligned \n   * towards the parent node. If it is `Center` aligned then parent node is placed in the middle of the children. In the `Left`\n   * alignment mode parent is aligned to left of the children and vice versa for `Right` alignment.\n   * \n   * @group Auto Layout\n   * @type {HorizontalAlignmentType}\n   */\n  this.horizontalAlignment = HorizontalAlignmentType.Center;\n\n  /**\n   * Sets items vertical alignment relative to each other within one level of the hierarchy. \n   * It does not change anything if diagram nodes are all of the same size.\n   * \n   * @group Auto Layout\n   * @type {VerticalAlignmentType}\n   */\n  this.verticalAlignment = VerticalAlignmentType.Middle;\n\n  /**\n   * Sets arrows direction for connector lines. If this property set to `Parents` then arrows are drawn\n   * from logical children towards logical parents. By default diagram has no arrows.\n   * \n   * @group Relation Lines\n   * @type {GroupByType}\n   */\n  this.arrowsDirection = GroupByType.None;\n\n  /**\n   * Show extra horizontal arrows on top of long horizontal connection lines for the easy visual tracing \n   * of relations between parents and children. By default it is off.\n   * \n   * @group Relation Lines\n   * @type {boolean}\n   */\n  this.showExtraArrows = false;\n\n  /**\n   * Set minimum space for placement of extra arrows on horizontal connection lines. See `showExtraArrows` property.\n   * \n   * @group Relation Lines\n   * @type {number}\n   */\n  this.extraArrowsMinimumSpace = 30;\n\n  /**\n   * Connection lines style. This option is only applicable to nodes minimized to markers or lines. Full size nodes\n   * are always connected with squared connection lines\n   * \n   * @group Relation Lines\n   * @type {ConnectorType}\n   */\n  this.connectorType = ConnectorType.Squared;\n\n  /**\n   * The bevel size of squared connector lines.\n   * \n   * @group Relation Lines\n   * @type {number}\n   */\n  this.bevelSize = 4;\n\n  /**\n   * Set style of squared connectors with custom elbows.\n   * \n   * @group Relation Lines\n   * @type {ElbowType}\n   */\n  this.elbowType = ElbowType.None;\n\n  /**\n   * The size of dot markers placed in the elbows of connector lines.\n   * \n   * @group Relation Lines\n   * @type {number}\n   */\n  this.elbowDotSize = 4;\n\n\n  /**\n   * Empty diagram message. This option is supposed to say user that chart is empty when no data is available for rendering.\n   * \n   * @type {string}\n   */\n  this.emptyDiagramMessage = \"Diagram is empty.\";\n\n  /**\n   * Items collection. Ths property defines data we render in the diagram.\n   * \n   * Every item should have set unique `id` property. They are used to create relations\n   * between items in the diagram and for rendering of various UI elements bound to nodes.\n   * \n   * @type {OrgItemConfig[]}\n   */\n  this.items = [];\n\n  /**\n   * Annotations. Annotations are API elements that are attached to the diagram nodes.\n   * We draw our annotations either in front of the nodes or in the background. The annotations \n   * don't affect the nodes placement in any way. As a result the control redraws them \n   * instantaneously without rendering or recalculating the actual diagram layout.\n   * \n   * @type {Array.<(ShapeAnnotationConfig | BackgroundAnnotationConfig | ConnectorAnnotationConfig | HighlightPathAnnotationConfig)>}\n   */\n  this.annotations = [];\n\n  /**\n   * Cursor item. Organization Chart control has API options equivalent to regular UI controls.\n   * The cursor item is used to select single item in the hierarchy with mouse click, \n   * highlight item provides visual feed back on mouse over. Selected items collection \n   * is equivalent to checked items in ListView or TreeView controls.\n   * \n   * Chart navigation depends on current cursor item, chart shows cursor and its neighbours \n   * in full size regardless of enabled page fit mode. So cursor item plays a role of local \n   * zoom in the chart hierarchy. User navigates around chart via clicking and moving\n   * cursor item around and zooming into data around new cursor item.\n   * \n   * The control notifies about this property changes with `onHighlightChanging` and `onHighlightChanged` events.\n   * \n   * If `null` then no cursor item selected in the diagram.\n   * \n   * @type {string}\n   */\n  this.cursorItem = null;\n\n  /**\n   * Highlighted item. Shows highlight and callout annotation for given item id. It does not trigger diagram\n   * layout or scrolling so it can be used to synchronize mouse over feedback of the diagram nodes with other\n   * collection controls or UI elements. \n   * \n   * The control notifies about this property changes with `onHighlightChanging` and `onHighlightChanged` events.\n   * \n   * If `null` then no highlight shown on the diagram.\n   * \n   * @type {string}\n   */\n  this.highlightItem = null;\n\n  /**\n   * Highlight gravity radius. This property controls mouse over feedback and callout annotation visibility for nodes\n   * rendered as markers when diagram auto fits nodes into available screen space. It makes marker highlighted when \n   * mouse pointer is inside of the gravity radius cycle of the marker. This property is ignored when the nearest item\n   * is outside of the screen boundaries and is not visible to the end user.\n   *\n   * The normal item has mouse over feedback in form of highlight border only when mouse pointer is inside of its boundaries. \n   * \n   * @type {number}\n   */\n  this.highlightGravityRadius = 40;\n\n  /**\n   * Selected items collection. Selected items is a collection of items ids having checked their check boxes.\n   * The control always shows selected items in the full size form, regardless of enabled page fit mode.\n   * \n   * The control notifies about user made changes in this collection with `onSelectionChanging` and `onSelectionChanged` events.\n   * \n   * @type {string[]}\n   */\n  this.selectedItems = [];\n\n  /**\n  * Sets visibility of selection check boxes for the diagram nodes.\n  * \n  * `Auto` - visible for cursor item only\n  * `True` - visible\n  * `False` - hidden\n  * \n  * See `selectedItems` property. All items listed in this property are going to have checked selection checkboxes.\n  * Checkbox can be added to item template, in that case it should be named=\"checkbox\", so control can use it as built in checkbox element.\n  * \n  * @type {Enabled}\n  */\n  this.hasSelectorCheckbox = Enabled.Auto;\n\n  /**\n   * Selection check box label. See `hasSelectorCheckbox` and `selectedItems` properties.\n   * \n   * @group Templates\n   * @type {string}\n   */\n  this.selectCheckBoxLabel = \"Selected\";\n\n  /**\n   * Selection path mode. This property controls visibility of nodes between cursor and the root of the diagram in the auto fit mode. It allows to draw \n   * them in full size regardless of available space and auto fit mode.\n   * \n   * The control supports diagram auto fit into screen view. It is achieved via drawing nodes in form of markers.\n   * So small nodes make diagram fit into the screen space, but they have no details. Our solution is to show cursor and selected items\n   * of the diagram in full size and draw all other diagram nodes as markers.\n   *\n   * @group Auto Layout\n   * @type {SelectionPathMode}\n   */\n  this.selectionPathMode = SelectionPathMode.FullStack;\n\n  /**\n   * Sets selected items frame visibility. If selected item is outside of the diagram's area visible to the end user,\n   * control displays that item in the form of the marker on frame around the diagram.\n   * \n   * @group Frame\n   * @type {boolean}\n   */\n  this.showFrame = false;\n\n  /**\n   * Frame inner padding. Adds extra padding around markers on the inner side of the frame.\n   * \n   * @group Frame\n   * @type {Thickness}\n   */\n  this.frameInnerPadding = new Thickness(2, 2, 2, 2);\n\n  /**\n   * Frame outer padding. Adds extra padding around markers on the outer side of the frame.\n   * \n   * @group Frame\n   * @type {Thickness}\n   */\n  this.frameOuterPadding = new Thickness(2, 2, 2, 2);\n\n  /**\n   * Collection of named templates used to define content for nodes, cursor and highlight.\n   * By default control provides templates for all types of visual elements.\n   * \n   * @group Templates\n   * @type {TemplateConfig[]}\n   */\n  this.templates = [];\n\n  /**\n   * Name of the template used to render nodes in the diagram. See `templates` property. Template name can be set individually for every node\n   * see `templateName` property of `OrgItemConfig`.\n   * \n   * @group Templates\n   * @type {string}\n   */\n  this.defaultTemplateName = null;\n\n  /**\n   * Sets buttons visibility.\n   * \n   * `Auto` - cursor item only.\n   * `True` - visible\n   * `False` - hidden\n   * \n   * @group Templates\n   * @type {Enabled}\n   */\n  this.hasButtons = Enabled.Auto;\n\n  /**\n   * On buttons panel render event. This callback function is called to render context of buttons panel.\n   * It is used to replace `buttons` collection property in ReactJS component. So we preserve context buttons panel as a functional \n   * concept, but eliminate buttons customization API.\n   *\n   * @callback\n   * @param {Object} event Mouse event\n   * @param {EventArgs} data Context information\n   */\n  this.onButtonsRender = null;\n\n  /**\n   * This callback function is called before `onHighlightChanged` event. See `highlightItem` property.\n   * Use this event to modify diagram elements not affecting diagram layout. For example on-screen connector annotations added \n   * in this event handler to diagram configuration would be rendered together with highlight.\n   *\n   * @callback\n   * @param {Object} event Mouse event\n   * @param {EventArgs} data Context information. Use properties of this argument to stop event propagate and further diagram layout and rendering.\n   */\n  this.onHighlightChanging = null;\n\n  /**\n   * On highlight item changed event. See `highlightItem` property.\n   *\n   * @callback\n   * @param {Object} event Mouse event\n   * @param {EventArgs} data Context information\n   */\n  this.onHighlightChanged = null;\n\n  /**\n   * On cursor item being changed event. See `cursorItem` property. This callback function is called before `onCursorChanged` event.\n   * Use this callback function to stop event propagation. See `EventArgs` for details.\n   *\n   * @callback\n   * @param {Object} event Mouse event\n   * @param {EventArgs} data Context information\n   */\n  this.onCursorChanging = null;\n\n  /**\n   * On cursor item changed event. See `cursorItem` property.\n   *\n   * @callback\n   * @param {Object} event Mouse event\n   * @param {EventArgs} data Context information\n   */\n  this.onCursorChanged = null;\n\n  /**\n   * On selected items being changed event. See `selectedItems` property.\n   *\n   * @callback\n   * @param {Object} event Mouse event\n   * @param {EventArgs} data Context information\n   */\n  this.onSelectionChanging = null;\n\n  /**\n   * On selected items changed event. See `selectedItems` property.\n   *\n   * @callback\n   * @param {Object} event Mouse event\n   * @param {EventArgs} data Context information\n   */\n  this.onSelectionChanged = null;\n\n  /**\n   * Button click event. See `buttons` property.\n   *\n   * @callback\n   * @param {Object} event Mouse event\n   * @param {EventArgs} data Context information\n   */\n  this.onButtonClick = null;\n\n  /**\n   * Mouse click event. \n   *\n   * @callback\n   * @param {Object} event Mouse event\n   * @param {EventArgs} data Context information\n   */\n  this.onMouseClick = null;\n\n  /**\n   * Mouse double click event. \n   *\n   * @callback\n   * @param {Object} event Mouse event\n   * @param {EventArgs} data Context information\n   */\n  this.onMouseDblClick = null;\n\n  /**\n   * Callback function for rendering content of the diagram nodes. This callback is only \n   * called when custom item template is defined in the template object configuration.\n   * This callback receives reference to DOM element and context object of the rendered item.\n   * The control reuses existing elements in the DOM, so it is applications responsibility \n   * to properly update their content.\n   *\n   * @callback\n   * @param {Object} event Event if available\n   * @param {RenderEventArgs} data The context information\n   */\n  this.onItemRender = null;\n\n  /**\n   * Callback function for rendering content of the highlight template. This callback is only \n   * called when custom highlight is defined in the template configuration.\n   *\n   * @callback\n   * @param {Object} event Event if available\n   * @param {RenderEventArgs} data The context information\n   */\n  this.onHighlightRender = null;\n\n  /**\n   * Callback function for rendering content of the cursor template. This callback is only \n   * called when custom cursor is defined in the template configuration.\n   *\n   * @callback\n   * @param {Object} event Event if available\n   * @param {RenderEventArgs} data The context information\n   */\n  this.onCursorRender = null;\n\n  /**\n   * Sets the spacing between rows.\n   * \n   * @group Intervals\n   * @type {number}\n   */\n  this.normalLevelShift = 20;\n\n  /**\n   * Sets the spacing after the row containing nodes minimized down to markers.\n   * \n   * @group Intervals\n   * @type {number}\n   */\n  this.dotLevelShift = 20;\n\n  /**\n   * Sets the spacing after the row containing nodes minimized down to lines.\n   * \n   * @group Intervals\n   * @type {number}\n   */\n  this.lineLevelShift = 10;\n\n  /**\n   * Sets interval between nodes of the same row.\n   * \n   * @group Intervals\n   * @type {number}\n   */\n  this.normalItemsInterval = 10;\n\n  /**\n   * Sets interval between nodes of the same row, minimized down to markers.\n   * \n   * @group Intervals\n   * @type {number}\n   */\n  this.dotItemsInterval = 1;\n\n  /**\n   * Sets interval between nodes of the same row, minimized down to lines.\n   * \n   * @group Intervals\n   * @type {number}\n   */\n  this.lineItemsInterval = 2;\n\n  /**\n   * Set cousins interval multiplier. This values adds extra space between branches of the hierarchy.\n   * For example nodes of the same parent have interval 20 and nodes of two different parents are going to have interval 100.\n   * \n   * @group Intervals\n   * @type {number}\n   */\n  this.cousinsIntervalMultiplier = 5;\n\n  /**\n   * The first font color of the title.\n   * \n   * The title background color is designed to be one of the available dimensions to group nodes in the diagram,\n   * so title can be unreadable if its color matches its background color. This property is created to auto resolve this issue\n   * via automatic switch between two available font title colors.\n   * \n   * @group Templates\n   * @type {string}\n   */\n  this.itemTitleFirstFontColor = Colors.White;\n\n  /**\n   * The second font color of the title.\n   * \n   * @group Templates\n   * @type {string}\n   */\n  this.itemTitleSecondFontColor = Colors.Navy;\n\n  /**\n   * Markers. The shape of the markers when nodes are minimized by auto fit. The control supports auto fit of the diagram into available screen space.\n   * When the diagram size significantly larger than available screen space, its scrolling and navigation becomes problematic,\n   * so control supports automatic diagram fit into the screen space via rendering some of its nodes in form of small markers.\n   * So this option sets default marker shape for nodes. It can be set individually per node in items configurations.\n   * \n   * The default color of shape is the same as `itemTitleColor` property set for individual items.\n   * \n   * @group Templates\n   * @type {ShapeType}\n   */\n  this.minimizedItemShapeType = ShapeType.None;\n\n  /**\n   * The relations lines color. The control uses this lines color to render basic relations between nodes.\n   * \n   * @group Relation Lines\n   * @type {string}\n   */\n  this.linesColor = Colors.Silver;\n\n  /**\n   * The relations lines width\n   * \n   * @group Relation Lines\n   * @type {number}\n   */\n  this.linesWidth = 1;\n\n  /**\n   * The relations lines pattern\n   * \n   * @group Relation Lines\n   * @type {LineType}\n   */\n  this.linesType = LineType.Solid;\n\n  /**\n   * Sets highlight lines color. The diagram uses highlight lines to render highlighted relation lines between nodes.\n   * \n   * @group Relation Lines\n   * @type {string}\n   */\n  this.highlightLinesColor = Colors.Red;\n\n  /**\n   * Sets highlight lines width.\n   * \n   * @group Relation Lines\n   * @type {number}\n   */\n  this.highlightLinesWidth = 1;\n\n  /**\n   * Sets highlight lines pattern.\n   * \n   * @group Relation Lines\n   * @type {LineType}\n   */\n  this.highlightLinesType = LineType.Solid;\n\n  /**\n   * Sets callout visibility.\n   * \n   * @group Callout\n   * @type {boolean}\n   */\n  this.showCallout = true;\n\n  /**\n   * Sets visibility of the callout annotation depending on size of a node it is shown for. See `pageFitMode` property.\n   * \n   * @group Callout\n   * @type {Visibility}\n   */\n  this.calloutMaximumVisibility = Visibility.Dot;\n\n  /**\n   * Callout annotation placement offset. Sets how far callout content is offset from the marker it is displayed for.\n   * \n   * @group Callout\n   * @type {number}\n   */\n  this.calloutPlacementOffset = 100;\n\n  /**\n   * Callout annotation default template name.\n   * \n   * Templates are HTML fragments containing layout and styles used to render diagram nodes.\n   * They are defined with a named configuration objects. See `templates` property of control's configuration object.\n   * \n   * @group Callout\n   * @type {string}\n   */\n  this.defaultCalloutTemplateName = null;\n\n  /**\n   * Callout annotation fill color.\n   * \n   * @group Callout\n   * @type {string}\n   */\n  this.calloutfillColor = \"#000000\";\n\n  /**\n   * Callout annotation border color.\n   * \n   * @group Callout\n   * @type {string}\n   */\n  this.calloutBorderColor = null;\n\n  /**\n   * Callout annotation border line offset.\n   * \n   * @group Callout\n   * @type {number}\n   */\n  this.calloutOffset = 4;\n\n  /**\n   * Callout annotation corner radius.\n   * \n   * @group Callout\n   * @type {number}\n   */\n  this.calloutCornerRadius = 4;\n\n  /**\n   * Callout annotation pointer width.\n   * \n   * @group Callout\n   * @type {string}\n   */\n  this.calloutPointerWidth = \"10%\";\n\n  /**\n   * Callout annotation border line width.\n   * \n   * @group Callout\n   * @type {number}\n   */\n  this.calloutLineWidth = 1;\n\n  /**\n   * Callout annotation opacity\n   * \n   * @group Callout\n   * @type {number}\n   */\n  this.calloutOpacity = 0.2;\n\n  /**\n   * Sets default formation of child nodes. By default all children that belong to a parent node are always aligned \n   * below and placed in a horizontal line. On a large scale this may result in the end user having to scroll screens\n   * in order to view all of the nodes. To compensate for this, we provide the option of placing all of the children\n   * of a parent node in a square/matrix formation. This will reduce sideways screen scrolling by compacting the child\n   * nodes into a much smaller area on the screen.\n   * \n   * @group Auto Layout\n   * @type {ChildrenPlacementType}\n   */\n  this.childrenPlacementType = ChildrenPlacementType.Horizontal;\n\n  /**\n   * Sets formation of leave children.\n   * \n   * @group Auto Layout\n   * @type {ChildrenPlacementType}\n   */\n  this.leavesPlacementType = ChildrenPlacementType.Horizontal;\n\n  /**\n   * Sets default placement of assistants hierarchies relative to the regular children of the parent node.\n   * If assistant node has its own children then control adds extra levels, so assistants children are placed\n   * above level of the parent node children.\n   * \n   * @group Auto Layout\n   * @type {boolean}\n   */\n  this.placeAssistantsAboveChildren = true;\n\n  /**\n * Sets default placement of advisers hierarchies relative to the regular children of the parent node.\n * If adviser node has its own children then control adds extra levels, so advisers children are placed\n * above level of the parent node children.\n * \n * @group Auto Layout\n * @type {boolean}\n */\n  this.placeAdvisersAboveChildren = true;\n\n  /**\n   * Maximum number of columns for matrix layout of children.\n   * \n   * @group Auto Layout\n   * @type {number}\n   */\n  this.maximumColumnsInMatrix = 6;\n\n  /**\n   * The size of the panel containing context buttons.\n   * \n   * @group Templates\n   * @type {number}\n   */\n  this.buttonsPanelSize = 28;\n\n  /**\n   * The size of the panel containing group title.\n   * \n   * @group Group Titles\n   * @type {number}\n   */\n  this.groupTitlePanelSize = 24;\n\n  /**\n   * The size of the panel containing selection checkbox.\n   * \n   * @group Templates\n   * @type {number}\n   */\n  this.checkBoxPanelSize = 24;\n\n  /**\n   * Group titles placement. Defines group title and buttons panel position relative to the node.\n   * The group title on the side of the diagram node is one of controls default easy to use features. It gives extra dimension \n   * for nodes visual grouping in the diagram.\n   * \n   * @group Group Titles\n   * @type {AdviserPlacementType}\n   */\n  this.groupTitlePlacementType = AdviserPlacementType.Left;\n\n  /**\n   * Group titles orientation.\n   * \n   * @group Group Titles\n   * @type {TextOrientationType}\n   */\n  this.groupTitleOrientation = TextOrientationType.RotateRight;\n\n  /**\n   * Group titles vertical alignment.\n   * \n   * @group Group Titles\n   * @type {VerticalAlignmentType}\n   */\n  this.groupTitleVerticalAlignment = VerticalAlignmentType.Middle;\n\n  /**\n   * Group titles horizontal alignment.\n   * \n   * @group Group Titles\n   * @type {HorizontalAlignmentType}\n   */\n  this.groupTitleHorizontalAlignment = HorizontalAlignmentType.Center;\n\n  /**\n   * Group titles font size.\n   * \n   * @group Group Titles\n   * @type {number}\n   */\n  this.groupTitleFontSize = \"12px\";\n\n  /**\n   * Group titles font family.\n   * \n   * @group Group Titles\n   * @type {string}\n   */\n  this.groupTitleFontFamily = \"Arial\";\n\n  /**\n   * Group titles color.\n   * \n   * @group Group Titles\n   * @type {string}\n   */\n  this.groupTitleColor = Colors.RoyalBlue;\n\n  /**\n   * Group titles font weight: normal, bold\n   * \n   * @group Group Titles\n   * @type {string}\n   */\n  this.groupTitleFontWeight = \"normal\";\n\n  /**\n   * Group titles font style: normal, italic\n   * \n   * @group Group Titles\n   * @type {string}\n   */\n  this.groupTitleFontStyle = \"normal\";\n\n\n  /**\n   * The size of the panel containing level titles.\n   * \n   * @group Level Titles\n   * @type {number}\n   */\n  this.levelTitlePanelSize = 24;\n\n  /**\n   * Level titles placement. Defines level title panel position relative to the diagram.\n   * \n   * @group Level Titles\n   * @type {AdviserPlacementType}\n   */\n  this.levelTitlePlacementType = AdviserPlacementType.Left;\n\n  /**\n   * If this property is true then level titles are placed inside of the diagram's view port above or below diagram nodes.\n   * \n   * @group Level Titles\n   * @type {boolean}\n   */\n  this.levelTitlePlaceInside = false;\n\n  /**\n   * Group titles orientation.\n   * \n   * @group Level Titles\n   * @type {TextOrientationType}\n   */\n  this.levelTitleOrientation = TextOrientationType.Auto;\n\n  /**\n   * Level titles vertical alignment.\n   * \n   * @group Level Titles\n   * @type {VerticalAlignmentType}\n   */\n  this.levelTitleVerticalAlignment = VerticalAlignmentType.Middle;\n\n  /**\n   * Level titles horizontal alignment.\n   * \n   * @group Level Titles\n   * @type {HorizontalAlignmentType}\n   */\n  this.levelTitleHorizontalAlignment = HorizontalAlignmentType.Center;\n\n  /**\n   * Level titles font size.\n   * \n   * @group Level Titles\n   * @type {number}\n   */\n  this.levelTitleFontSize = \"12px\";\n\n  /**\n   * Level titles font family.\n   * \n   * @group Level Titles\n   * @type {string}\n   */\n  this.levelTitleFontFamily = \"Arial\";\n\n  /**\n   * Level titles font color.\n   * \n   * @group Level Titles\n   * @type {string}\n   */\n  this.levelTitleFontColor = Colors.White;\n\n  /**\n   * Level titles color.\n   * \n   * @group Level Titles\n   * @type {string}\n   */\n  this.levelTitleColor = Colors.RoyalBlue;\n\n  /**\n   * Level titles font weight: normal, bold\n   * \n   * @group Level Titles\n   * @type {string}\n   */\n  this.levelTitleFontWeight = \"normal\";\n\n  /**\n   * Level titles font style: normal, italic\n   * \n   * @group Level Titles\n   * @type {string}\n   */\n  this.levelTitleFontStyle = \"normal\";\n\n  /**\n   * @ignore\n   */\n  this.distance = 3;\n\n  /**\n   * CSS3 scale transform. Control supports content scaling using CSS scale transform. It scales everything except scroll bars.\n   * It properly handles mouse event coordinates. The CSS scale transform produces unreadable text and corrupted lines in desktop browsers,\n   * it looks good only in mobile browsers, so our recommendation is to use zoom with collection of item templates of various sizes.\n   * Templates gives you better control over quality of your content at various zoom levels.\n   * \n   * @type {number}\n   */\n  this.scale = 1;\n\n  /**\n   * Minimum CSS3 scale transform.\n   * \n   * @ignore\n   * @type {number}\n   */\n  this.minimumScale = 0.5;\n\n  /**\n   * Maximum CSS3 scale transform.\n   * \n   * @ignore\n   * @type {number}\n   */\n  this.maximumScale = 2;\n\n  /**\n   * Sets labels visibility for nodes when they are minimized into markers by page auto fit. See `pageFitMode` property.\n   * \n   * The control does not preserve space for labels in the diagram layout, since that would contradict the purpose of minimizing the nodes\n   * into markers. Use controls `dotLevelShift`, `dotItemsInterval` properties to preserve space between nodes for labels.\n   * \n   * Labels are displayed inside of `div`s of the fixed size, see `labelSize` property, and control provides simple conflict\n   * resolution to avoid labels overlapping. If two labels overlap each other with their bounding rectangles then only one of them\n   * is going to stay visible.\n   * \n   * Auto - displays label only when it has space to be rendered.\n   * True - shows label regardless, even if it overlaps other labels and nodes.\n   * False - hidden.\n   * \n   * @group Labels\n   * @type {Enabled}\n   */\n  this.showLabels = Enabled.Auto;\n\n  /**\n   * Label size. Sets labels placeholders `div`s size. It is needed to resolve labels overlapping.\n   * If one label overlaps another label the or item it will be hidden.\n   * \n   * @group Labels\n   * @type {Size}\n   */\n  this.labelSize = new Size(80, 24);\n\n  /**\n   * Sets labels offset from the markers bounding rectangles.\n   * \n   * @group Labels\n   * @type {number}\n   */\n  this.labelOffset = 1;\n\n  /**\n   * Labels orientation.\n   * \n   * @group Labels\n   * @type {TextOrientationType}\n   */\n  this.labelOrientation = TextOrientationType.Horizontal;\n\n  /**\n   * Labels placement. Sets labels placement relative to the markers bounding rectangles.\n   * \n   * @group Labels\n   * @type {PlacementType}\n   */\n  this.labelPlacement = PlacementType.Top;\n\n  /**\n   * Labels font size.\n   * \n   * @group Labels\n   * @type {string}\n   */\n  this.labelFontSize = \"10px\";\n\n  /**\n   * Labels font family.\n   * \n   * @group Labels\n   * @type {string}\n   */\n  this.labelFontFamily = \"Arial\";\n\n  /**\n   * Labels color\n   * \n   * @group Labels\n   * @type {string}\n   */\n  this.labelColor = Colors.Black;\n\n  /**\n   * Labels font weight\n   * Font weight: normal, bold\n   * \n   * @group Labels\n   * @type {string}\n   */\n  this.labelFontWeight = \"normal\";\n\n  /**\n   * Labels font style. Font style: normal, italic\n   * \n   * @group Labels\n   * @type {string}\n   */\n  this.labelFontStyle = \"normal\";\n\n  /**\n   * Enable panning. Enable chart panning with mouse drag & drop for desktop browsers.\n   * Disable it if you need to support items Drag & Drop.\n   * \n   * @type {boolean}\n   */\n  this.enablePanning = true;\n\n  /**\n   * Sets minimum size the diagram can shrink itself in auto size mode. See `pageFitMode` property.\n   * In the auto size mode diagram controls its placeholder size itself,\n   * it sets its size to accommodate all nodes and render them normally.\n   * \n   * @group Auto Layout\n   * @type {Size}\n   */\n  this.autoSizeMinimum = new Size(800, 600);\n\n  /**\n   * Sets maximum size the diagram can expand itself in auto size mode. See `pageFitMode` property.\n   * In the auto size mode diagram controls its placeholder size itself,\n   * it sets its size to accommodate all nodes and render them normally.\n   * \n   * @group Auto Layout\n   * @type {Size}\n   */\n  this.autoSizeMaximum = new Size(1024, 768);\n};"]},"metadata":{},"sourceType":"module"}