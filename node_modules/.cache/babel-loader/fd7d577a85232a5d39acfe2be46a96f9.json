{"ast":null,"code":"import Polyline from './Polyline';\nexport default function PolylinesBuffer() {\n  var polylines = {};\n\n  function _getPolyline(polylines, paletteItem) {\n    if (!polylines[paletteItem.toString()]) {\n      polylines[paletteItem.toString()] = new Polyline(paletteItem);\n    }\n\n    return polylines[paletteItem.toString()];\n  }\n\n  function getPolyline(paletteItem) {\n    return _getPolyline(polylines, paletteItem);\n  }\n\n  function loop(thisArg, onItem) {\n    var key, polyline;\n\n    if (onItem != null) {\n      for (key in polylines) {\n        if (polylines.hasOwnProperty(key)) {\n          polyline = polylines[key];\n\n          if (polyline) {\n            polyline.optimizeMoveSegments();\n\n            if (onItem.call(thisArg, polyline)) {\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  function addInverted(callbackFun, copyOnly) {\n    var backupPolylines, backupPolyline;\n    /* backup polylines */\n\n    backupPolylines = polylines;\n    polylines = {};\n\n    if (callbackFun != null) {\n      callbackFun(this);\n    }\n    /* add inverted polylines to backup collection */\n\n\n    loop(this, function (polyline) {\n      backupPolyline = _getPolyline(backupPolylines, polyline.paletteItem);\n\n      if (!copyOnly) {\n        backupPolyline.addInverted(polyline);\n      } else {\n        polyline.mergeTo(backupPolyline);\n      }\n    });\n    /* restore polylines */\n\n    polylines = backupPolylines;\n  }\n\n  function transform(transformArg, forward) {\n    loop(this, function (polyline) {\n      polyline.transform(transformArg, forward);\n    });\n  }\n\n  return {\n    getPolyline: getPolyline,\n    loop: loop,\n    addInverted: addInverted,\n    transform: transform\n  };\n}\n;","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/graphics/structs/PolylinesBuffer.js"],"names":["Polyline","PolylinesBuffer","polylines","_getPolyline","paletteItem","toString","getPolyline","loop","thisArg","onItem","key","polyline","hasOwnProperty","optimizeMoveSegments","call","addInverted","callbackFun","copyOnly","backupPolylines","backupPolyline","mergeTo","transform","transformArg","forward"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,YAArB;AAEA,eAAe,SAASC,eAAT,GAA2B;AACxC,MAAIC,SAAS,GAAG,EAAhB;;AAEA,WAASC,YAAT,CAAsBD,SAAtB,EAAiCE,WAAjC,EAA8C;AAC5C,QAAI,CAACF,SAAS,CAACE,WAAW,CAACC,QAAZ,EAAD,CAAd,EAAwC;AACtCH,MAAAA,SAAS,CAACE,WAAW,CAACC,QAAZ,EAAD,CAAT,GAAoC,IAAIL,QAAJ,CAAaI,WAAb,CAApC;AACD;;AACD,WAAOF,SAAS,CAACE,WAAW,CAACC,QAAZ,EAAD,CAAhB;AACD;;AAED,WAASC,WAAT,CAAqBF,WAArB,EAAkC;AAChC,WAAOD,YAAY,CAACD,SAAD,EAAYE,WAAZ,CAAnB;AACD;;AAED,WAASG,IAAT,CAAcC,OAAd,EAAuBC,MAAvB,EAA+B;AAC7B,QAAIC,GAAJ,EACEC,QADF;;AAEA,QAAIF,MAAM,IAAI,IAAd,EAAoB;AAClB,WAAKC,GAAL,IAAYR,SAAZ,EAAuB;AACrB,YAAIA,SAAS,CAACU,cAAV,CAAyBF,GAAzB,CAAJ,EAAmC;AACjCC,UAAAA,QAAQ,GAAGT,SAAS,CAACQ,GAAD,CAApB;;AACA,cAAIC,QAAJ,EAAc;AACZA,YAAAA,QAAQ,CAACE,oBAAT;;AAEA,gBAAIJ,MAAM,CAACK,IAAP,CAAYN,OAAZ,EAAqBG,QAArB,CAAJ,EAAoC;AAClC;AACD;AACF;AACF;AACF;AACF;AACF;;AAED,WAASI,WAAT,CAAqBC,WAArB,EAAkCC,QAAlC,EAA4C;AAC1C,QAAIC,eAAJ,EAAqBC,cAArB;AAEA;;AACAD,IAAAA,eAAe,GAAGhB,SAAlB;AACAA,IAAAA,SAAS,GAAG,EAAZ;;AAEA,QAAIc,WAAW,IAAI,IAAnB,EAAyB;AACvBA,MAAAA,WAAW,CAAC,IAAD,CAAX;AACD;AAED;;;AACAT,IAAAA,IAAI,CAAC,IAAD,EAAO,UAAUI,QAAV,EAAoB;AAC7BQ,MAAAA,cAAc,GAAGhB,YAAY,CAACe,eAAD,EAAkBP,QAAQ,CAACP,WAA3B,CAA7B;;AAEA,UAAI,CAACa,QAAL,EAAe;AACbE,QAAAA,cAAc,CAACJ,WAAf,CAA2BJ,QAA3B;AACD,OAFD,MAEO;AACLA,QAAAA,QAAQ,CAACS,OAAT,CAAiBD,cAAjB;AACD;AACF,KARG,CAAJ;AAUA;;AACAjB,IAAAA,SAAS,GAAGgB,eAAZ;AACD;;AAED,WAASG,SAAT,CAAmBC,YAAnB,EAAiCC,OAAjC,EAA0C;AACxChB,IAAAA,IAAI,CAAC,IAAD,EAAO,UAAUI,QAAV,EAAoB;AAC7BA,MAAAA,QAAQ,CAACU,SAAT,CAAmBC,YAAnB,EAAiCC,OAAjC;AACD,KAFG,CAAJ;AAGD;;AAED,SAAO;AACLjB,IAAAA,WAAW,EAAEA,WADR;AAELC,IAAAA,IAAI,EAAEA,IAFD;AAGLQ,IAAAA,WAAW,EAAEA,WAHR;AAILM,IAAAA,SAAS,EAAEA;AAJN,GAAP;AAMD;AAAA","sourcesContent":["import Polyline from './Polyline';\n\nexport default function PolylinesBuffer() {\n  var polylines = {};\n\n  function _getPolyline(polylines, paletteItem) {\n    if (!polylines[paletteItem.toString()]) {\n      polylines[paletteItem.toString()] = new Polyline(paletteItem);\n    }\n    return polylines[paletteItem.toString()];\n  }\n\n  function getPolyline(paletteItem) {\n    return _getPolyline(polylines, paletteItem);\n  }\n\n  function loop(thisArg, onItem) {\n    var key,\n      polyline;\n    if (onItem != null) {\n      for (key in polylines) {\n        if (polylines.hasOwnProperty(key)) {\n          polyline = polylines[key];\n          if (polyline) {\n            polyline.optimizeMoveSegments();\n\n            if (onItem.call(thisArg, polyline)) {\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  function addInverted(callbackFun, copyOnly) {\n    var backupPolylines, backupPolyline;\n\n    /* backup polylines */\n    backupPolylines = polylines;\n    polylines = {};\n\n    if (callbackFun != null) {\n      callbackFun(this);\n    }\n\n    /* add inverted polylines to backup collection */\n    loop(this, function (polyline) {\n      backupPolyline = _getPolyline(backupPolylines, polyline.paletteItem);\n\n      if (!copyOnly) {\n        backupPolyline.addInverted(polyline);\n      } else {\n        polyline.mergeTo(backupPolyline);\n      }\n    });\n\n    /* restore polylines */\n    polylines = backupPolylines;\n  }\n\n  function transform(transformArg, forward) {\n    loop(this, function (polyline) {\n      polyline.transform(transformArg, forward);\n    });\n  }\n\n  return {\n    getPolyline: getPolyline,\n    loop: loop,\n    addInverted: addInverted,\n    transform: transform\n  };\n};"]},"metadata":{},"sourceType":"module"}