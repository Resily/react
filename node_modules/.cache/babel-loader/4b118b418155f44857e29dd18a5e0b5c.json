{"ast":null,"code":"import RMQ from './RMQ';\n/**\n * Creates Lowest Common Ancestor Structure for the given tree\n * @class LCA\n * \n * @param {Tree} tree The tree structure\n * @returns {LCA} Returns Lowest Common Ancestor Structure\n */\n\nexport default function LCA(tree) {\n  var _eulerSequence = [];\n  var _levels = [];\n  var _fai = {};\n\n  var _rmq;\n\n  preprocess();\n\n  function preprocess() {\n    var counter = 0;\n    tree.loopEulerWalk(this, function (nodeid, node, level) {\n      _eulerSequence.push(nodeid);\n\n      _levels.push(level);\n\n      if (!_fai.hasOwnProperty(nodeid)) {\n        _fai[nodeid] = counter;\n      }\n\n      counter += 1;\n    });\n    _rmq = RMQ(_levels);\n  }\n  /**\n   * Returns lowest common ancestor for the given pair of tree nodes\n   * @param {string} from The first tree node id\n   * @param {string} to The second tree node id\n   * @returns {string} Returns the lowest common ancestor tree node id\n   */\n\n\n  function getLowestCommonAncestor(from, to) {\n    var fromIndex = _fai[from],\n        toIndex = _fai[to],\n        index;\n\n    if (fromIndex < toIndex) {\n      index = _rmq.getRangeMinimumIndex(fromIndex, toIndex);\n    } else {\n      index = _rmq.getRangeMinimumIndex(toIndex, fromIndex);\n    }\n\n    return _eulerSequence[index];\n  }\n\n  return {\n    getLowestCommonAncestor: getLowestCommonAncestor\n  };\n}\n;","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/algorithms/LCA.js"],"names":["RMQ","LCA","tree","_eulerSequence","_levels","_fai","_rmq","preprocess","counter","loopEulerWalk","nodeid","node","level","push","hasOwnProperty","getLowestCommonAncestor","from","to","fromIndex","toIndex","index","getRangeMinimumIndex"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,OAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,GAAT,CAAaC,IAAb,EAAmB;AAChC,MAAIC,cAAc,GAAG,EAArB;AACA,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,IAAI,GAAG,EAAX;;AACA,MAAIC,IAAJ;;AAGAC,EAAAA,UAAU;;AAEV,WAASA,UAAT,GAAsB;AACpB,QAAIC,OAAO,GAAG,CAAd;AACAN,IAAAA,IAAI,CAACO,aAAL,CAAmB,IAAnB,EAAyB,UAAUC,MAAV,EAAkBC,IAAlB,EAAwBC,KAAxB,EAA+B;AACtDT,MAAAA,cAAc,CAACU,IAAf,CAAoBH,MAApB;;AACAN,MAAAA,OAAO,CAACS,IAAR,CAAaD,KAAb;;AAEA,UAAI,CAACP,IAAI,CAACS,cAAL,CAAoBJ,MAApB,CAAL,EAAkC;AAChCL,QAAAA,IAAI,CAACK,MAAD,CAAJ,GAAeF,OAAf;AACD;;AACDA,MAAAA,OAAO,IAAI,CAAX;AACD,KARD;AASAF,IAAAA,IAAI,GAAGN,GAAG,CAACI,OAAD,CAAV;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE,WAASW,uBAAT,CAAiCC,IAAjC,EAAuCC,EAAvC,EAA2C;AACzC,QAAIC,SAAS,GAAGb,IAAI,CAACW,IAAD,CAApB;AAAA,QACEG,OAAO,GAAGd,IAAI,CAACY,EAAD,CADhB;AAAA,QAEEG,KAFF;;AAIA,QAAIF,SAAS,GAAGC,OAAhB,EAAyB;AACvBC,MAAAA,KAAK,GAAGd,IAAI,CAACe,oBAAL,CAA0BH,SAA1B,EAAqCC,OAArC,CAAR;AACD,KAFD,MAEO;AACLC,MAAAA,KAAK,GAAGd,IAAI,CAACe,oBAAL,CAA0BF,OAA1B,EAAmCD,SAAnC,CAAR;AACD;;AAED,WAAOf,cAAc,CAACiB,KAAD,CAArB;AACD;;AAED,SAAO;AACLL,IAAAA,uBAAuB,EAAEA;AADpB,GAAP;AAGD;AAAA","sourcesContent":["import RMQ from './RMQ';\n\n/**\n * Creates Lowest Common Ancestor Structure for the given tree\n * @class LCA\n * \n * @param {Tree} tree The tree structure\n * @returns {LCA} Returns Lowest Common Ancestor Structure\n */\nexport default function LCA(tree) {\n  var _eulerSequence = [];\n  var _levels = [];\n  var _fai = {};\n  var _rmq;\n\n\n  preprocess();\n\n  function preprocess() {\n    var counter = 0;\n    tree.loopEulerWalk(this, function (nodeid, node, level) {\n      _eulerSequence.push(nodeid);\n      _levels.push(level);\n\n      if (!_fai.hasOwnProperty(nodeid)) {\n        _fai[nodeid] = counter;\n      }\n      counter += 1;\n    });\n    _rmq = RMQ(_levels);\n  }\n\n  /**\n   * Returns lowest common ancestor for the given pair of tree nodes\n   * @param {string} from The first tree node id\n   * @param {string} to The second tree node id\n   * @returns {string} Returns the lowest common ancestor tree node id\n   */\n  function getLowestCommonAncestor(from, to) {\n    var fromIndex = _fai[from],\n      toIndex = _fai[to],\n      index;\n\n    if (fromIndex < toIndex) {\n      index = _rmq.getRangeMinimumIndex(fromIndex, toIndex);\n    } else {\n      index = _rmq.getRangeMinimumIndex(toIndex, fromIndex);\n    }\n\n    return _eulerSequence[index];\n  }\n\n  return {\n    getLowestCommonAncestor: getLowestCommonAncestor\n  };\n};"]},"metadata":{},"sourceType":"module"}