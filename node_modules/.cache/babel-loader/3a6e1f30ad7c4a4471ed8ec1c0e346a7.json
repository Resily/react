{"ast":null,"code":"import BaseTransformer from './BaseTransformer';\nimport FamilyItem from '../../../models/FamilyItem';\nimport { GroupByType } from '../../../enums';\nimport MatrixConnectorBundle from '../../../connectors/MatrixConnectorBundle';\nexport default function FamilyMatrixesExtractor(debug) {\n  this.parent = BaseTransformer.prototype;\n  this.parent.constructor.apply(this, arguments);\n}\n;\nFamilyMatrixesExtractor.prototype = new BaseTransformer();\n\nFamilyMatrixesExtractor.prototype.extract = function (options, logicalFamily, matrixes, matrixBottomConnectorsIds, bundles, maximumId) {\n  if (logicalFamily.hasNodes() > 0) {\n    /* find nodes having the same parent and child nodes and replace them with matrix placeholder node */\n    if (options.enableMatrixLayout) {\n      logicalFamily.groupBy(this, Math.max(2, options.minimumMatrixSize), function (parentid, childid, ids, nodes) {\n        maximumId += 1;\n        var id = maximumId;\n        maximumId += 1;\n        var id2 = maximumId;\n        var firstNode = logicalFamily.node(ids[0]);\n        var matrixNode = new FamilyItem({\n          id: id,\n          level: firstNode.level,\n          isVisible: false,\n          isActive: false,\n          itemConfig: {\n            title: \"dummy #\" + id,\n            description: \"This is item used as aggregator of matrixed nodes.\"\n          },\n          levelGravity: GroupByType.Parents,\n          hideParentConnection: true,\n          hideChildrenConnection: true\n        });\n        matrixBottomConnectorsIds[id] = id2;\n        /* id2 is needed for connectors graph */\n\n        for (var index = 0, len = ids.length; index < len; index += 1) {\n          var nodeid = ids[index];\n          logicalFamily.removeNode(nodeid);\n        }\n\n        if (parentid != null) {\n          logicalFamily.add([parentid], id, matrixNode);\n          matrixNode.hideParentConnection = false;\n          bundles.push(new MatrixConnectorBundle(true, ids, id, id, this.getMatrixWidth(options.maximumColumnsInMatrix, ids.length)));\n        } else {\n          logicalFamily.add(null, id, matrixNode);\n        }\n\n        if (childid != null) {\n          logicalFamily.adopt([id], childid);\n          matrixNode.hideChildrenConnection = false;\n          bundles.push(new MatrixConnectorBundle(false, ids, id, id2, this.getMatrixWidth(options.maximumColumnsInMatrix, ids.length)));\n        }\n\n        matrixes[id] = nodes;\n      } //ignore jslint\n      );\n    }\n  }\n\n  return maximumId;\n};\n\nFamilyMatrixesExtractor.prototype.getMatrixWidth = function (maximumColumnsInMatrix, len) {\n  return Math.min(maximumColumnsInMatrix, Math.ceil(Math.sqrt(len)));\n};","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/tasks/transformations/familyTransformations/FamilyMatrixesExtractor.js"],"names":["BaseTransformer","FamilyItem","GroupByType","MatrixConnectorBundle","FamilyMatrixesExtractor","debug","parent","prototype","constructor","apply","arguments","extract","options","logicalFamily","matrixes","matrixBottomConnectorsIds","bundles","maximumId","hasNodes","enableMatrixLayout","groupBy","Math","max","minimumMatrixSize","parentid","childid","ids","nodes","id","id2","firstNode","node","matrixNode","level","isVisible","isActive","itemConfig","title","description","levelGravity","Parents","hideParentConnection","hideChildrenConnection","index","len","length","nodeid","removeNode","add","push","getMatrixWidth","maximumColumnsInMatrix","adopt","min","ceil","sqrt"],"mappings":"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","sourcesContent":["import BaseTransformer from './BaseTransformer';\nimport FamilyItem from '../../../models/FamilyItem';\nimport { GroupByType } from '../../../enums';\nimport MatrixConnectorBundle from '../../../connectors/MatrixConnectorBundle';\n\nexport default function FamilyMatrixesExtractor(debug) {\n  this.parent = BaseTransformer.prototype;\n  this.parent.constructor.apply(this, arguments);\n};\n\nFamilyMatrixesExtractor.prototype = new BaseTransformer();\n\nFamilyMatrixesExtractor.prototype.extract = function (options, logicalFamily, matrixes, matrixBottomConnectorsIds, bundles, maximumId) {\n  if (logicalFamily.hasNodes() > 0) {\n    /* find nodes having the same parent and child nodes and replace them with matrix placeholder node */\n    if (options.enableMatrixLayout) {\n      logicalFamily.groupBy(this, Math.max(2, options.minimumMatrixSize), function (parentid, childid, ids, nodes) {\n        maximumId += 1;\n        var id = maximumId;\n        maximumId += 1;\n        var id2 = maximumId;\n\n        var firstNode = logicalFamily.node(ids[0]);\n\n        var matrixNode = new FamilyItem({\n          id: id,\n          level: firstNode.level,\n          isVisible: false,\n          isActive: false,\n          itemConfig: { title: \"dummy #\" + id, description: \"This is item used as aggregator of matrixed nodes.\" },\n          levelGravity: GroupByType.Parents,\n          hideParentConnection: true,\n          hideChildrenConnection: true\n        });\n\n        matrixBottomConnectorsIds[id] = id2; /* id2 is needed for connectors graph */\n\n        for (var index = 0, len = ids.length; index < len; index += 1) {\n          var nodeid = ids[index];\n          logicalFamily.removeNode(nodeid);\n        }\n\n        if (parentid != null) {\n          logicalFamily.add([parentid], id, matrixNode);\n          matrixNode.hideParentConnection = false;\n          bundles.push(new MatrixConnectorBundle(true, ids, id, id, this.getMatrixWidth(options.maximumColumnsInMatrix, ids.length)));\n        } else {\n          logicalFamily.add(null, id, matrixNode);\n        }\n\n        if (childid != null) {\n          logicalFamily.adopt([id], childid);\n          matrixNode.hideChildrenConnection = false;\n          bundles.push(new MatrixConnectorBundle(false, ids, id, id2, this.getMatrixWidth(options.maximumColumnsInMatrix, ids.length)));\n        }\n\n        matrixes[id] = nodes;\n      } //ignore jslint\n      );\n    }\n  }\n  return maximumId;\n};\n\nFamilyMatrixesExtractor.prototype.getMatrixWidth = function (maximumColumnsInMatrix, len) {\n  return Math.min(maximumColumnsInMatrix, Math.ceil(Math.sqrt(len)));\n};"]},"metadata":{},"sourceType":"module"}