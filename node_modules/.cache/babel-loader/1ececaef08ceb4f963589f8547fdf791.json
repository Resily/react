{"ast":null,"code":"import BaseLayout from './BaseLayout';\nimport Rect from '../../../graphics/structs/Rect';\nimport { VerticalAlignmentType, PageFitMode, Visibility, OrientationType, GroupByType, AdviserPlacementType } from '../../../enums';\nimport FamilyAlignment from '../../../algorithms/FamilyAlignment';\nimport LevelVisibility from '../../../models/LevelVisibility';\nimport TreeLevelPosition from '../../../models/TreeLevelPosition';\nimport TreeItemPosition from '../../../models/TreeItemPosition';\nexport default function FamilyLayout(params, options) {\n  this.params = {\n    logicalFamily: null,\n    // Family of FamilyItem\n    treeLevels: null,\n    // TreeLevels of OrgItem used properties: isVisible\n    getConnectorsStacksSizes: null,\n    // TreeLevelConnectorStackSize\n    isItemSelected: null,\n    cursorItemId: null,\n    getTemplateParams: null //TemplateParams\n\n  };\n  this.options = {\n    verticalAlignment: VerticalAlignmentType.Middle,\n    pageFitMode: PageFitMode.None,\n    minimalVisibility: Visibility.Dot,\n    orientationType: OrientationType.Top,\n    arrowsDirection: GroupByType.None,\n    linesWidth: 1,\n    checkBoxPanelSize: 24,\n    buttonsPanelSize: 32,\n    groupTitlePanelSize: 24,\n    groupTitlePlacementType: AdviserPlacementType.Left,\n    normalLevelShift: 20,\n    dotLevelShift: 20,\n    lineLevelShift: 20,\n    normalItemsInterval: 10,\n    dotItemsInterval: 1,\n    lineItemsInterval: 2\n  };\n  this.data = {\n    treeItemsPositions: {},\n    treeLevelsPositions: []\n  };\n  this.parent = BaseLayout.prototype;\n  this.parent.constructor.apply(this, arguments);\n}\n;\nFamilyLayout.prototype = new BaseLayout();\n\nFamilyLayout.prototype.measure = function (panelSize) {\n  var placeholderSize = new Rect(0, 0, 0, 0),\n      levelVisibilities,\n      minimalPlaceholderSize;\n  var data = {\n    treeItemsPositions: {},\n    treeLevelsPositions: []\n  };\n\n  switch (this.options.orientationType) {\n    case OrientationType.Left:\n    case OrientationType.Right:\n      panelSize.invert();\n      break;\n  }\n\n  if (!this.params.treeLevels.isEmpty()) {\n    switch (this.options.pageFitMode) {\n      case PageFitMode.None:\n      case PageFitMode.PrintPreview:\n      case PageFitMode.AutoSize:\n        levelVisibilities = [new LevelVisibility(0, Visibility.Normal)];\n        placeholderSize = this.setTreeLevelsVisibilityAndPositionTreeItems(data, this.params, this.options, levelVisibilities, 0);\n        break;\n\n      default:\n        levelVisibilities = this.getLevelVisibilities(this.params.treeLevels, this.options.minimalVisibility); // Find minimal placeholder size to hold completly folded diagram\n\n        minimalPlaceholderSize = this.setTreeLevelsVisibilityAndPositionTreeItems(data, this.params, this.options, levelVisibilities, levelVisibilities.length - 1);\n\n        if (!this.checkDiagramSize(minimalPlaceholderSize, panelSize, this.options.pageFitMode)) {\n          placeholderSize = minimalPlaceholderSize;\n        } else {\n          // Find optimal diagram size\n          minimalPlaceholderSize.addRect(panelSize);\n          minimalPlaceholderSize.offset(0, 0, 5, 5);\n          this.findOptimalSize(this, levelVisibilities.length - 1, function (index) {\n            placeholderSize = this.setTreeLevelsVisibilityAndPositionTreeItems(data, this.params, this.options, levelVisibilities, index);\n            return this.checkDiagramSize(placeholderSize, minimalPlaceholderSize, this.options.pageFitMode);\n          });\n        }\n\n        break;\n    }\n  }\n\n  this.data = data;\n  return placeholderSize;\n};\n\nFamilyLayout.prototype.getLevelVisibilities = function (treeLevels, minimalVisibility) {\n  var levelVisibilities = [new LevelVisibility(0, Visibility.Normal)];\n  var visibilities = [];\n\n  switch (minimalVisibility) {\n    case Visibility.Normal:\n      break;\n\n    case Visibility.Dot:\n      visibilities.push(Visibility.Dot);\n      break;\n\n    case Visibility.Auto:\n    case Visibility.Line:\n    case Visibility.Invisible:\n      visibilities.push(Visibility.Dot);\n      visibilities.push(Visibility.Line);\n      break;\n  }\n\n  treeLevels.loopLevelsReversed(this, function (level, levelContext) {\n    for (var index = 0; index < visibilities.length; index += 1) {\n      levelVisibilities.push(new LevelVisibility(level, visibilities[index]));\n    }\n  });\n  return levelVisibilities;\n};\n\nFamilyLayout.prototype.findOptimalSize = function (thisArg, maximum, funcCheckSize) {\n  var minimum = 0,\n      cursorIndex; // maximum condension is fit to page\n\n  if (!funcCheckSize.call(thisArg, minimum)) {\n    // minimum condension does not fit to page\n    cursorIndex = maximum;\n\n    while (maximum - minimum > 1) {\n      cursorIndex = Math.floor((maximum + minimum) / 2.0);\n\n      if (funcCheckSize.call(thisArg, cursorIndex)) {\n        // middle point size fit to page\n        maximum = cursorIndex;\n      } else {\n        minimum = cursorIndex;\n      }\n    }\n\n    if (maximum !== cursorIndex) {\n      funcCheckSize.call(thisArg, maximum);\n    }\n  }\n};\n\nFamilyLayout.prototype.setTreeLevelsVisibilityAndPositionTreeItems = function (data, params, options, levelVisibilities, cursorIndex) {\n  var index, levelVisibility;\n  data.treeLevelsPositions = [];\n  params.treeLevels.loopLevels(this, function (index, levelContext) {\n    var treeLevelPosition = new TreeLevelPosition();\n    treeLevelPosition.currentvisibility = Visibility.Normal;\n    data.treeLevelsPositions.push(treeLevelPosition);\n  });\n\n  for (index = 0; index <= cursorIndex; index += 1) {\n    levelVisibility = levelVisibilities[index];\n    data.treeLevelsPositions[levelVisibility.level].currentvisibility = levelVisibility.currentvisibility;\n  }\n\n  data.treeItemsPositions = {};\n  this.recalcItemsSize(params.treeLevels, data.treeItemsPositions, data.treeLevelsPositions, params.isItemSelected, params.cursorItemId, params.getTemplateParams, options);\n  this.setOffsets(params.treeLevels, data.treeItemsPositions, data.treeLevelsPositions, params.logicalFamily, options.intervals);\n  this.recalcLevelsDepth(params.treeLevels, data.treeItemsPositions, data.treeLevelsPositions, options.verticalAlignment);\n  this.shiftLevels(data.treeLevelsPositions, options.shifts[Visibility.Line], options.shifts, options.arrowsDirection, options.linesWidth, params.getConnectorsStacksSizes);\n  return this.getLayoutSize(params.treeLevels, data.treeItemsPositions, data.treeLevelsPositions);\n};\n\nFamilyLayout.prototype.checkDiagramSize = function (diagramSize, panelSize, pageFitMode) {\n  var result = false;\n\n  switch (pageFitMode) {\n    case PageFitMode.PageWidth:\n      if (panelSize.width >= diagramSize.width) {\n        result = true;\n      }\n\n      break;\n\n    case PageFitMode.PageHeight:\n      if (panelSize.height >= diagramSize.height) {\n        result = true;\n      }\n\n      break;\n\n    case PageFitMode.FitToPage:\n      if (panelSize.height >= diagramSize.height && panelSize.width >= diagramSize.width) {\n        result = true;\n      }\n\n      break;\n  }\n\n  return result;\n};\n\nFamilyLayout.prototype.getLayoutSize = function (treeLevels, treeItemsPositions, treeLevelsPositions) {\n  return new Rect(0, 0, Math.round(this.getLayoutWidth(treeLevels, treeItemsPositions)), Math.round(this.getLayoutHeight(treeLevelsPositions)));\n};\n\nFamilyLayout.prototype.getLayoutWidth = function (treeLevels, treeItemsPositions) {\n  var result = 0;\n  treeLevels.loopLevels(this, function (levelIndex, level) {\n    var levelLength = treeLevels.getLevelLength(levelIndex);\n\n    if (levelLength > 0) {\n      var itemid = treeLevels.getItemAtPosition(levelIndex, levelLength - 1),\n          treeItemPosition = treeItemsPositions[itemid];\n      result = Math.max(result, treeItemPosition.offset + treeItemPosition.actualSize.width + treeItemPosition.rightPadding);\n    }\n  });\n  return result;\n};\n\nFamilyLayout.prototype.getLayoutHeight = function (treeLevelsPositions) {\n  var len = treeLevelsPositions.length,\n      treeLevel = treeLevelsPositions[len - 1];\n  return treeLevel.shift + treeLevel.nextLevelShift;\n};\n\nFamilyLayout.prototype.recalcItemsSize = function (treeLevels, treeItemsPositions, treeLevelsPositions, isItemSelected, cursorItemId, getTemplateParams, options) {\n  treeLevels.loopLevels(this, function (levelIndex, treeLevel) {\n    var treeLevelPosition = treeLevelsPositions[levelIndex];\n    treeLevels.loopLevelItems(this, levelIndex, function (treeItemId, treeItem, position) {\n      var treeItemPosition = new TreeItemPosition();\n      var childLayout = this.getLayout(treeItemId);\n\n      if (childLayout == null) {\n        var treeItemVisibility = isItemSelected(treeItemId) ? Visibility.Normal : !treeItem.isVisible ? Visibility.Invisible : Visibility.Auto,\n            treeItemtemplate = getTemplateParams(treeItemId);\n        var actualVisibility = treeItemVisibility === Visibility.Auto ? treeLevelPosition.currentvisibility : treeItemVisibility;\n        var size = this.getItemSize(actualVisibility, cursorItemId == treeItemId, treeItemtemplate, options);\n        treeItemPosition.actualVisibility = actualVisibility;\n        treeItemPosition.actualSize = size.actualSize;\n        treeItemPosition.contentPosition = size.contentPosition;\n      } else {\n        size = childLayout.measure(treeLevelPosition.currentvisibility);\n        treeItemPosition.actualVisibility = Visibility.Invisible;\n        treeItemPosition.actualSize = size;\n      }\n\n      treeItemsPositions[treeItemId] = treeItemPosition;\n    });\n  });\n};\n\nFamilyLayout.prototype.recalcLevelsDepth = function (treeLevels, treeItemsPositions, treeLevelsPositions, verticalAlignment) {\n  var minimalDepth, dotsDepth;\n  treeLevels.loopLevels(this, function (levelIndex, treeLevel) {\n    var treeLevelPosition = treeLevelsPositions[levelIndex];\n    treeLevelPosition.shift = 0.0;\n    treeLevelPosition.depth = 0.0;\n    treeLevelPosition.actualVisibility = Visibility.Invisible;\n    minimalDepth = null;\n    /* minimum  height of non-dot items in level */\n\n    dotsDepth = null;\n    /* maximum dots height */\n\n    treeLevels.loopLevelItems(this, levelIndex, function (itemid, treeItem, position) {\n      var treeItemPosition = treeItemsPositions[itemid];\n      treeLevelPosition.depth = Math.max(treeLevelPosition.depth, treeItemPosition.actualSize.height);\n\n      switch (treeItemPosition.actualVisibility) {\n        case Visibility.Dot:\n        case Visibility.Line:\n        case Visibility.Invisible:\n          dotsDepth = !dotsDepth ? treeItemPosition.actualSize.height : Math.min(dotsDepth, treeItemPosition.actualSize.height);\n          break;\n\n        default:\n          minimalDepth = !minimalDepth ? treeItemPosition.actualSize.height : Math.min(minimalDepth, treeItemPosition.actualSize.height);\n          break;\n      }\n\n      treeLevelPosition.actualVisibility = Math.min(treeLevelPosition.actualVisibility, treeItemPosition.actualVisibility);\n    });\n\n    if (minimalDepth == null) {\n      minimalDepth = treeLevelPosition.depth;\n    }\n\n    if (dotsDepth != null && dotsDepth > minimalDepth) {\n      minimalDepth = dotsDepth;\n    }\n\n    switch (verticalAlignment) {\n      case VerticalAlignmentType.Top:\n        treeLevelPosition.horizontalConnectorsDepth = minimalDepth / 2.0;\n        break;\n\n      case VerticalAlignmentType.Middle:\n        treeLevelPosition.horizontalConnectorsDepth = treeLevelPosition.depth / 2.0;\n        break;\n\n      case VerticalAlignmentType.Bottom:\n        treeLevelPosition.horizontalConnectorsDepth = treeLevelPosition.depth - minimalDepth / 2.0;\n        break;\n    }\n  });\n};\n\nFamilyLayout.prototype.shiftLevels = function (treeLevelsPositions, shift, shifts, arrowsDirection, linesWidth, getConnectorsStacksSizes) {\n  var index,\n      len,\n      treeLevelPosition,\n      treeLevelConnectorStackSize,\n      childrenSpace = 0,\n      parentsSpace = 0,\n      arrowTipLength = linesWidth * 8;\n\n  switch (arrowsDirection) {\n    case GroupByType.Parents:\n      childrenSpace = arrowTipLength;\n      parentsSpace = 0;\n      break;\n\n    case GroupByType.Children:\n      childrenSpace = 0;\n      parentsSpace = arrowTipLength;\n      break;\n  }\n\n  for (index = 0, len = treeLevelsPositions.length; index < len; index += 1) {\n    treeLevelPosition = treeLevelsPositions[index];\n    treeLevelConnectorStackSize = getConnectorsStacksSizes(index);\n    shift += treeLevelPosition.setShift(shift, shifts[treeLevelPosition.actualVisibility], parentsSpace, childrenSpace, treeLevelConnectorStackSize.parentsStackSize);\n  }\n};\n\nFamilyLayout.prototype.setOffsets = function (treeLevels, treeItemsPositions, treeLevelsPositions, logicalFamily, intervals) {\n  var index, len;\n\n  for (index = 0, len = treeLevelsPositions.length; index < len; index += 1) {\n    treeLevelsPositions[index].currentOffset = 0.0;\n  }\n\n  var family = logicalFamily.getPlanarFamily(treeLevels);\n  var familyAlignment = new FamilyAlignment(this, family, treeLevels, function (nodeid, node) {\n    var treeItemPosition = treeItemsPositions[nodeid];\n    var treeItemPadding = intervals[treeItemPosition.actualVisibility] / 2;\n    treeItemPosition.leftPadding = treeItemPadding;\n    treeItemPosition.rightPadding = treeItemPadding;\n    return treeItemPosition.leftPadding + treeItemPosition.actualSize.width + treeItemPosition.rightPadding;\n  });\n  var leftMargin = null;\n  treeLevels.loopLevels(this, function (levelIndex, level) {\n    var nodeid = treeLevels.getItemAtPosition(levelIndex, 0);\n\n    if (nodeid != null) {\n      var treeItemPosition = treeItemsPositions[nodeid];\n      var nodeOffset = familyAlignment.getOffset(nodeid) - treeItemPosition.leftPadding - treeItemPosition.actualSize.width / 2;\n      leftMargin = leftMargin == null ? nodeOffset : Math.min(leftMargin, nodeOffset);\n    }\n  });\n  treeLevels.loopLevels(this, function (levelIndex, level) {\n    treeLevels.loopLevelItems(this, levelIndex, function (nodeid, node, position) {\n      var treeItemPosition = treeItemsPositions[nodeid];\n      var nodeOffset = familyAlignment.getOffset(nodeid);\n      treeItemPosition.offset = nodeOffset - treeItemPosition.actualSize.width / 2;\n      treeItemPosition.offset -= leftMargin;\n    });\n  });\n};\n\nFamilyLayout.prototype.arrange = function (thisArg, onItemPositioned) {\n  var prevLevelPosition = null;\n\n  if (onItemPositioned != null) {\n    this.params.treeLevels.loopLevels(this, function (levelIndex, treeLevel) {\n      var treeLevelPosition = this.data.treeLevelsPositions[levelIndex];\n      this.params.treeLevels.loopLevelItems(this, levelIndex, function (itemid, treeItem, position) {\n        var treeItemPosition = this.data.treeItemsPositions[itemid];\n        var result = this.getItemPosition(treeItemPosition.actualVisibility, treeItemPosition.offset, treeItemPosition.actualSize, prevLevelPosition, treeLevelPosition, this.options.verticalAlignment);\n        treeItemPosition.actualPosition = result.position;\n        treeItemPosition.horizontalConnectorsShift = result.horizontalConnectorsShift;\n        treeItemPosition.topConnectorShift = result.topConnectorShift;\n        treeItemPosition.topConnectorInterval = result.topConnectorInterval;\n        treeItemPosition.bottomConnectorShift = result.bottomConnectorShift;\n        treeItemPosition.bottomConnectorInterval = result.bottomConnectorInterval;\n        onItemPositioned.call(thisArg, itemid, treeItemPosition);\n        var childLayout = this.getLayout(itemid);\n\n        if (childLayout != null) {\n          childLayout.arrange(thisArg, result.position, onItemPositioned);\n        }\n      });\n      prevLevelPosition = treeLevelPosition;\n    });\n  }\n};\n\nFamilyLayout.prototype.getItemPosition = function (visibility, offset, size, prevLevel, level, verticalAlignment) {\n  var itemShift = 0;\n\n  switch (visibility) {\n    case Visibility.Normal:\n      switch (verticalAlignment) {\n        case VerticalAlignmentType.Top:\n          itemShift = 0;\n          break;\n\n        case VerticalAlignmentType.Middle:\n          itemShift = (level.depth - size.height) / 2.0;\n          break;\n\n        case VerticalAlignmentType.Bottom:\n          itemShift = level.depth - size.height;\n          break;\n      }\n\n      break;\n\n    case Visibility.Dot:\n    case Visibility.Line:\n    case Visibility.Invisible:\n      itemShift = level.horizontalConnectorsDepth - size.height / 2.0;\n      break;\n  }\n\n  return {\n    position: new Rect(offset, level.shift + itemShift, size.width, size.height),\n    horizontalConnectorsShift: level.shift + level.horizontalConnectorsDepth,\n    topConnectorShift: prevLevel != null ? prevLevel.shift + prevLevel.connectorShift : null,\n    topConnectorInterval: prevLevel != null ? prevLevel.levelSpace / 2 : null,\n    bottomConnectorShift: level.shift + level.connectorShift,\n    bottomConnectorInterval: level.levelSpace / 2\n  };\n};","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/tasks/transformations/layouts/FamilyLayout.js"],"names":["BaseLayout","Rect","VerticalAlignmentType","PageFitMode","Visibility","OrientationType","GroupByType","AdviserPlacementType","FamilyAlignment","LevelVisibility","TreeLevelPosition","TreeItemPosition","FamilyLayout","params","options","logicalFamily","treeLevels","getConnectorsStacksSizes","isItemSelected","cursorItemId","getTemplateParams","verticalAlignment","Middle","pageFitMode","None","minimalVisibility","Dot","orientationType","Top","arrowsDirection","linesWidth","checkBoxPanelSize","buttonsPanelSize","groupTitlePanelSize","groupTitlePlacementType","Left","normalLevelShift","dotLevelShift","lineLevelShift","normalItemsInterval","dotItemsInterval","lineItemsInterval","data","treeItemsPositions","treeLevelsPositions","parent","prototype","constructor","apply","arguments","measure","panelSize","placeholderSize","levelVisibilities","minimalPlaceholderSize","Right","invert","isEmpty","PrintPreview","AutoSize","Normal","setTreeLevelsVisibilityAndPositionTreeItems","getLevelVisibilities","length","checkDiagramSize","addRect","offset","findOptimalSize","index","visibilities","push","Auto","Line","Invisible","loopLevelsReversed","level","levelContext","thisArg","maximum","funcCheckSize","minimum","cursorIndex","call","Math","floor","levelVisibility","loopLevels","treeLevelPosition","currentvisibility","recalcItemsSize","setOffsets","intervals","recalcLevelsDepth","shiftLevels","shifts","getLayoutSize","diagramSize","result","PageWidth","width","PageHeight","height","FitToPage","round","getLayoutWidth","getLayoutHeight","levelIndex","levelLength","getLevelLength","itemid","getItemAtPosition","treeItemPosition","max","actualSize","rightPadding","len","treeLevel","shift","nextLevelShift","loopLevelItems","treeItemId","treeItem","position","childLayout","getLayout","treeItemVisibility","isVisible","treeItemtemplate","actualVisibility","size","getItemSize","contentPosition","minimalDepth","dotsDepth","depth","min","horizontalConnectorsDepth","Bottom","treeLevelConnectorStackSize","childrenSpace","parentsSpace","arrowTipLength","Parents","Children","setShift","parentsStackSize","currentOffset","family","getPlanarFamily","familyAlignment","nodeid","node","treeItemPadding","leftPadding","leftMargin","nodeOffset","getOffset","arrange","onItemPositioned","prevLevelPosition","getItemPosition","actualPosition","horizontalConnectorsShift","topConnectorShift","topConnectorInterval","bottomConnectorShift","bottomConnectorInterval","visibility","prevLevel","itemShift","connectorShift","levelSpace"],"mappings":"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","sourcesContent":["import BaseLayout from './BaseLayout';\nimport Rect from '../../../graphics/structs/Rect';\nimport { VerticalAlignmentType, PageFitMode, Visibility, OrientationType, GroupByType, AdviserPlacementType } from '../../../enums';\nimport FamilyAlignment from '../../../algorithms/FamilyAlignment';\nimport LevelVisibility from '../../../models/LevelVisibility';\nimport TreeLevelPosition from '../../../models/TreeLevelPosition';\nimport TreeItemPosition from '../../../models/TreeItemPosition';\n\nexport default function FamilyLayout(params, options) {\n  this.params = {\n    logicalFamily: null, // Family of FamilyItem\n    treeLevels: null, // TreeLevels of OrgItem used properties: isVisible\n    getConnectorsStacksSizes: null, // TreeLevelConnectorStackSize\n    isItemSelected: null,\n    cursorItemId: null,\n    getTemplateParams: null //TemplateParams\n  };\n\n  this.options = {\n    verticalAlignment: VerticalAlignmentType.Middle,\n    pageFitMode: PageFitMode.None,\n    minimalVisibility: Visibility.Dot,\n    orientationType: OrientationType.Top,\n    arrowsDirection: GroupByType.None,\n    linesWidth: 1,\n    checkBoxPanelSize: 24,\n    buttonsPanelSize: 32,\n    groupTitlePanelSize: 24,\n    groupTitlePlacementType: AdviserPlacementType.Left,\n    normalLevelShift: 20,\n    dotLevelShift: 20,\n    lineLevelShift: 20,\n    normalItemsInterval: 10,\n    dotItemsInterval: 1,\n    lineItemsInterval: 2\n  };\n\n  this.data = {\n    treeItemsPositions: {},\n    treeLevelsPositions: []\n  };\n\n  this.parent = BaseLayout.prototype;\n  this.parent.constructor.apply(this, arguments);\n};\n\nFamilyLayout.prototype = new BaseLayout();\n\nFamilyLayout.prototype.measure = function (panelSize) {\n  var placeholderSize = new Rect(0, 0, 0, 0),\n    levelVisibilities,\n    minimalPlaceholderSize;\n\n  var data = {\n    treeItemsPositions: {},\n    treeLevelsPositions: []\n  };\n\n  switch (this.options.orientationType) {\n    case OrientationType.Left:\n    case OrientationType.Right:\n      panelSize.invert();\n      break;\n  }\n\n  if (!this.params.treeLevels.isEmpty()) {\n    switch (this.options.pageFitMode) {\n      case PageFitMode.None:\n      case PageFitMode.PrintPreview:\n      case PageFitMode.AutoSize:\n        levelVisibilities = [new LevelVisibility(0, Visibility.Normal)];\n        placeholderSize = this.setTreeLevelsVisibilityAndPositionTreeItems(data, this.params, this.options, levelVisibilities, 0);\n        break;\n      default:\n        levelVisibilities = this.getLevelVisibilities(this.params.treeLevels, this.options.minimalVisibility);\n\n        // Find minimal placeholder size to hold completly folded diagram\n        minimalPlaceholderSize = this.setTreeLevelsVisibilityAndPositionTreeItems(data, this.params, this.options, levelVisibilities, levelVisibilities.length - 1);\n        if (!this.checkDiagramSize(minimalPlaceholderSize, panelSize, this.options.pageFitMode)) {\n          placeholderSize = minimalPlaceholderSize;\n        }\n        else {\n          // Find optimal diagram size\n          minimalPlaceholderSize.addRect(panelSize);\n          minimalPlaceholderSize.offset(0, 0, 5, 5);\n          this.findOptimalSize(this, levelVisibilities.length - 1, function (index) {\n            placeholderSize = this.setTreeLevelsVisibilityAndPositionTreeItems(data, this.params, this.options, levelVisibilities, index);\n            return this.checkDiagramSize(placeholderSize, minimalPlaceholderSize, this.options.pageFitMode);\n          });\n        }\n        break;\n    }\n  }\n\n  this.data = data;\n\n  return placeholderSize;\n};\n\nFamilyLayout.prototype.getLevelVisibilities = function (treeLevels, minimalVisibility) {\n  var levelVisibilities = [new LevelVisibility(0, Visibility.Normal)];\n\n  var visibilities = [];\n  switch (minimalVisibility) {\n    case Visibility.Normal:\n      break;\n    case Visibility.Dot:\n      visibilities.push(Visibility.Dot);\n      break;\n    case Visibility.Auto:\n    case Visibility.Line:\n    case Visibility.Invisible:\n      visibilities.push(Visibility.Dot);\n      visibilities.push(Visibility.Line);\n      break;\n  }\n\n  treeLevels.loopLevelsReversed(this, function (level, levelContext) {\n    for (var index = 0; index < visibilities.length; index += 1) {\n      levelVisibilities.push(new LevelVisibility(level, visibilities[index]));\n    }\n  });\n\n  return levelVisibilities;\n};\n\nFamilyLayout.prototype.findOptimalSize = function (thisArg, maximum, funcCheckSize) {\n  var minimum = 0,\n    cursorIndex;\n  // maximum condension is fit to page\n  if (!funcCheckSize.call(thisArg, minimum)) {\n    // minimum condension does not fit to page\n    cursorIndex = maximum;\n    while (maximum - minimum > 1) {\n      cursorIndex = Math.floor((maximum + minimum) / 2.0);\n      if (funcCheckSize.call(thisArg, cursorIndex)) {\n        // middle point size fit to page\n        maximum = cursorIndex;\n      }\n      else {\n        minimum = cursorIndex;\n      }\n    }\n    if (maximum !== cursorIndex) {\n      funcCheckSize.call(thisArg, maximum);\n    }\n  }\n};\n\nFamilyLayout.prototype.setTreeLevelsVisibilityAndPositionTreeItems = function (data, params, options, levelVisibilities, cursorIndex) {\n  var index,\n    levelVisibility;\n\n  data.treeLevelsPositions = [];\n\n  params.treeLevels.loopLevels(this, function (index, levelContext) {\n    var treeLevelPosition = new TreeLevelPosition();\n    treeLevelPosition.currentvisibility = Visibility.Normal;\n\n    data.treeLevelsPositions.push(treeLevelPosition);\n  });\n\n  for (index = 0; index <= cursorIndex; index += 1) {\n    levelVisibility = levelVisibilities[index];\n    data.treeLevelsPositions[levelVisibility.level].currentvisibility = levelVisibility.currentvisibility;\n  }\n\n  data.treeItemsPositions = {};\n\n  this.recalcItemsSize(params.treeLevels, data.treeItemsPositions, data.treeLevelsPositions, params.isItemSelected, params.cursorItemId, params.getTemplateParams, options);\n\n  this.setOffsets(params.treeLevels, data.treeItemsPositions, data.treeLevelsPositions, params.logicalFamily, options.intervals);\n  this.recalcLevelsDepth(params.treeLevels, data.treeItemsPositions, data.treeLevelsPositions, options.verticalAlignment);\n  this.shiftLevels(data.treeLevelsPositions, options.shifts[Visibility.Line], options.shifts, options.arrowsDirection, options.linesWidth, params.getConnectorsStacksSizes);\n\n  return this.getLayoutSize(params.treeLevels, data.treeItemsPositions, data.treeLevelsPositions);\n};\n\nFamilyLayout.prototype.checkDiagramSize = function (diagramSize, panelSize, pageFitMode) {\n  var result = false;\n  switch (pageFitMode) {\n    case PageFitMode.PageWidth:\n      if (panelSize.width >= diagramSize.width) {\n        result = true;\n      }\n      break;\n    case PageFitMode.PageHeight:\n      if (panelSize.height >= diagramSize.height) {\n        result = true;\n      }\n      break;\n    case PageFitMode.FitToPage:\n      if (panelSize.height >= diagramSize.height && panelSize.width >= diagramSize.width) {\n        result = true;\n      }\n      break;\n  }\n  return result;\n};\n\nFamilyLayout.prototype.getLayoutSize = function (treeLevels, treeItemsPositions, treeLevelsPositions) {\n  return new Rect(0, 0, Math.round(this.getLayoutWidth(treeLevels, treeItemsPositions)), Math.round(this.getLayoutHeight(treeLevelsPositions)));\n};\n\nFamilyLayout.prototype.getLayoutWidth = function (treeLevels, treeItemsPositions) {\n  var result = 0;\n  treeLevels.loopLevels(this, function (levelIndex, level) {\n    var levelLength = treeLevels.getLevelLength(levelIndex);\n\n    if (levelLength > 0) {\n      var itemid = treeLevels.getItemAtPosition(levelIndex, levelLength - 1),\n        treeItemPosition = treeItemsPositions[itemid];\n      result = Math.max(result, treeItemPosition.offset + treeItemPosition.actualSize.width + treeItemPosition.rightPadding);\n    }\n  });\n  return result;\n};\n\nFamilyLayout.prototype.getLayoutHeight = function (treeLevelsPositions) {\n  var len = treeLevelsPositions.length,\n    treeLevel = treeLevelsPositions[len - 1];\n  return treeLevel.shift + treeLevel.nextLevelShift;\n};\n\nFamilyLayout.prototype.recalcItemsSize = function (treeLevels, treeItemsPositions, treeLevelsPositions, isItemSelected, cursorItemId, getTemplateParams, options) {\n  treeLevels.loopLevels(this, function (levelIndex, treeLevel) {\n    var treeLevelPosition = treeLevelsPositions[levelIndex];\n\n    treeLevels.loopLevelItems(this, levelIndex, function (treeItemId, treeItem, position) {\n      var treeItemPosition = new TreeItemPosition();\n      var childLayout = this.getLayout(treeItemId);\n      if (childLayout == null) {\n        var treeItemVisibility = isItemSelected(treeItemId) ? Visibility.Normal : (!treeItem.isVisible ? Visibility.Invisible : Visibility.Auto),\n          treeItemtemplate = getTemplateParams(treeItemId);\n\n        var actualVisibility = (treeItemVisibility === Visibility.Auto) ? treeLevelPosition.currentvisibility : treeItemVisibility;\n        var size = this.getItemSize(actualVisibility, cursorItemId == treeItemId, treeItemtemplate, options);\n\n        treeItemPosition.actualVisibility = actualVisibility;\n        treeItemPosition.actualSize = size.actualSize;\n        treeItemPosition.contentPosition = size.contentPosition;\n      } else {\n        size = childLayout.measure(treeLevelPosition.currentvisibility);\n        treeItemPosition.actualVisibility = Visibility.Invisible;\n        treeItemPosition.actualSize = size;\n      }\n      treeItemsPositions[treeItemId] = treeItemPosition;\n    });\n  });\n};\n\nFamilyLayout.prototype.recalcLevelsDepth = function (treeLevels, treeItemsPositions, treeLevelsPositions, verticalAlignment) {\n  var minimalDepth,\n    dotsDepth;\n\n  treeLevels.loopLevels(this, function (levelIndex, treeLevel) {\n    var treeLevelPosition = treeLevelsPositions[levelIndex];\n    treeLevelPosition.shift = 0.0;\n    treeLevelPosition.depth = 0.0;\n    treeLevelPosition.actualVisibility = Visibility.Invisible;\n\n    minimalDepth = null; /* minimum  height of non-dot items in level */\n    dotsDepth = null; /* maximum dots height */\n\n    treeLevels.loopLevelItems(this, levelIndex, function (itemid, treeItem, position) {\n      var treeItemPosition = treeItemsPositions[itemid];\n      treeLevelPosition.depth = Math.max(treeLevelPosition.depth, treeItemPosition.actualSize.height);\n      switch (treeItemPosition.actualVisibility) {\n        case Visibility.Dot:\n        case Visibility.Line:\n        case Visibility.Invisible:\n          dotsDepth = !dotsDepth ? treeItemPosition.actualSize.height : Math.min(dotsDepth, treeItemPosition.actualSize.height);\n          break;\n        default:\n          minimalDepth = !minimalDepth ? treeItemPosition.actualSize.height : Math.min(minimalDepth, treeItemPosition.actualSize.height);\n          break;\n      }\n\n      treeLevelPosition.actualVisibility = Math.min(treeLevelPosition.actualVisibility, treeItemPosition.actualVisibility);\n    });\n\n    if (minimalDepth == null) {\n      minimalDepth = treeLevelPosition.depth;\n    }\n    if (dotsDepth != null && dotsDepth > minimalDepth) {\n      minimalDepth = dotsDepth;\n    }\n\n    switch (verticalAlignment) {\n      case VerticalAlignmentType.Top:\n        treeLevelPosition.horizontalConnectorsDepth = minimalDepth / 2.0;\n        break;\n      case VerticalAlignmentType.Middle:\n        treeLevelPosition.horizontalConnectorsDepth = treeLevelPosition.depth / 2.0;\n        break;\n      case VerticalAlignmentType.Bottom:\n        treeLevelPosition.horizontalConnectorsDepth = treeLevelPosition.depth - minimalDepth / 2.0;\n        break;\n    }\n  });\n};\n\nFamilyLayout.prototype.shiftLevels = function (treeLevelsPositions, shift, shifts, arrowsDirection, linesWidth, getConnectorsStacksSizes) {\n  var index,\n    len,\n    treeLevelPosition,\n    treeLevelConnectorStackSize,\n    childrenSpace = 0,\n    parentsSpace = 0,\n    arrowTipLength = linesWidth * 8;\n\n  switch (arrowsDirection) {\n    case GroupByType.Parents:\n      childrenSpace = arrowTipLength;\n      parentsSpace = 0;\n      break;\n    case GroupByType.Children:\n      childrenSpace = 0;\n      parentsSpace = arrowTipLength;\n      break;\n  }\n\n  for (index = 0, len = treeLevelsPositions.length; index < len; index += 1) {\n    treeLevelPosition = treeLevelsPositions[index];\n\n    treeLevelConnectorStackSize = getConnectorsStacksSizes(index);\n    shift += treeLevelPosition.setShift(shift, shifts[treeLevelPosition.actualVisibility], parentsSpace, childrenSpace, treeLevelConnectorStackSize.parentsStackSize);\n  }\n};\n\nFamilyLayout.prototype.setOffsets = function (treeLevels, treeItemsPositions, treeLevelsPositions, logicalFamily, intervals) {\n  var index, len;\n\n  for (index = 0, len = treeLevelsPositions.length; index < len; index += 1) {\n    treeLevelsPositions[index].currentOffset = 0.0;\n  }\n\n  var family = logicalFamily.getPlanarFamily(treeLevels);\n\n  var familyAlignment = new FamilyAlignment(this, family, treeLevels, function (nodeid, node) {\n    var treeItemPosition = treeItemsPositions[nodeid];\n    var treeItemPadding = intervals[treeItemPosition.actualVisibility] / 2;\n\n    treeItemPosition.leftPadding = treeItemPadding;\n    treeItemPosition.rightPadding = treeItemPadding;\n\n    return treeItemPosition.leftPadding + treeItemPosition.actualSize.width + treeItemPosition.rightPadding;\n  });\n\n  var leftMargin = null;\n  treeLevels.loopLevels(this, function (levelIndex, level) {\n    var nodeid = treeLevels.getItemAtPosition(levelIndex, 0);\n    if (nodeid != null) {\n      var treeItemPosition = treeItemsPositions[nodeid];\n      var nodeOffset = familyAlignment.getOffset(nodeid) - treeItemPosition.leftPadding - treeItemPosition.actualSize.width / 2;\n      leftMargin = (leftMargin == null) ? nodeOffset : Math.min(leftMargin, nodeOffset);\n    }\n  });\n\n  treeLevels.loopLevels(this, function (levelIndex, level) {\n    treeLevels.loopLevelItems(this, levelIndex, function (nodeid, node, position) {\n      var treeItemPosition = treeItemsPositions[nodeid];\n      var nodeOffset = familyAlignment.getOffset(nodeid);\n      treeItemPosition.offset = nodeOffset - treeItemPosition.actualSize.width / 2;\n\n      treeItemPosition.offset -= leftMargin;\n    });\n  });\n};\n\nFamilyLayout.prototype.arrange = function (thisArg, onItemPositioned) {\n  var prevLevelPosition = null;\n  if (onItemPositioned != null) {\n    this.params.treeLevels.loopLevels(this, function (levelIndex, treeLevel) {\n      var treeLevelPosition = this.data.treeLevelsPositions[levelIndex];\n\n      this.params.treeLevels.loopLevelItems(this, levelIndex, function (itemid, treeItem, position) {\n        var treeItemPosition = this.data.treeItemsPositions[itemid];\n        var result = this.getItemPosition(treeItemPosition.actualVisibility, treeItemPosition.offset, treeItemPosition.actualSize, prevLevelPosition, treeLevelPosition, this.options.verticalAlignment);\n        treeItemPosition.actualPosition = result.position;\n        treeItemPosition.horizontalConnectorsShift = result.horizontalConnectorsShift;\n        treeItemPosition.topConnectorShift = result.topConnectorShift;\n        treeItemPosition.topConnectorInterval = result.topConnectorInterval;\n        treeItemPosition.bottomConnectorShift = result.bottomConnectorShift;\n        treeItemPosition.bottomConnectorInterval = result.bottomConnectorInterval;\n\n        onItemPositioned.call(thisArg, itemid, treeItemPosition);\n\n        var childLayout = this.getLayout(itemid);\n        if (childLayout != null) {\n          childLayout.arrange(thisArg, result.position, onItemPositioned);\n        }\n      });\n\n      prevLevelPosition = treeLevelPosition;\n    });\n  }\n};\n\nFamilyLayout.prototype.getItemPosition = function (visibility, offset, size, prevLevel, level, verticalAlignment) {\n  var itemShift = 0;\n\n  switch (visibility) {\n    case Visibility.Normal:\n      switch (verticalAlignment) {\n        case VerticalAlignmentType.Top:\n          itemShift = 0;\n          break;\n        case VerticalAlignmentType.Middle:\n          itemShift = (level.depth - size.height) / 2.0;\n          break;\n        case VerticalAlignmentType.Bottom:\n          itemShift = level.depth - size.height;\n          break;\n      }\n      break;\n    case Visibility.Dot:\n    case Visibility.Line:\n    case Visibility.Invisible:\n      itemShift = level.horizontalConnectorsDepth - size.height / 2.0;\n      break;\n  }\n\n  return {\n    position: new Rect(offset, level.shift + itemShift, size.width, size.height),\n    horizontalConnectorsShift: level.shift + level.horizontalConnectorsDepth,\n    topConnectorShift: prevLevel != null ? prevLevel.shift + prevLevel.connectorShift : null,\n    topConnectorInterval: prevLevel != null ? prevLevel.levelSpace / 2 : null,\n    bottomConnectorShift: level.shift + level.connectorShift,\n    bottomConnectorInterval: level.levelSpace / 2\n  };\n};"]},"metadata":{},"sourceType":"module"}