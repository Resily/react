{"ast":null,"code":"import Graphics from './Graphics';\nimport { GraphicsType, LineType, SegmentType } from '../enums';\nexport default function CanvasGraphics(element) {\n  this.parent = Graphics.prototype;\n  this.parent.constructor.apply(this, arguments);\n  this.graphicsType = GraphicsType.Canvas;\n  this.m_maximum = 8000; // Search for maximum size of canvas element\n}\n;\nCanvasGraphics.prototype = new Graphics();\n\nCanvasGraphics.prototype.clean = function () {\n  var key, placeholder, layerKey, layer;\n\n  for (key in this.m_placeholders) {\n    if (this.m_placeholders.hasOwnProperty(key)) {\n      placeholder = this.m_placeholders[key];\n\n      for (layerKey in placeholder.layers) {\n        if (placeholder.layers.hasOwnProperty(layerKey)) {\n          layer = placeholder.layers[layerKey];\n\n          if (layer.canvascanvas !== null) {\n            layer.canvascanvas.parentNode.removeChild(layer.canvascanvas);\n            layer.canvascanvas = null;\n          }\n        }\n      }\n    }\n  }\n\n  this.parent.clean.apply(this, arguments);\n};\n\nCanvasGraphics.prototype._activatePlaceholder = function (placeholderName) {\n  var placeholder, width, height;\n\n  this.parent._activatePlaceholder.apply(this, arguments);\n\n  placeholder = this.m_activePlaceholder;\n  width = placeholder.size.width;\n  height = placeholder.size.height;\n\n  if (width > this.m_maximum || height > this.m_maximum) {\n    placeholder.hasGraphics = false;\n  } else {\n    placeholder.hasGraphics = true;\n  }\n\n  return placeholder;\n};\n\nCanvasGraphics.prototype.resizePlaceholder = function (placeholder, left, top, width, height) {\n  var layerKey, layer;\n  this.parent.resizePlaceholder.apply(this, arguments);\n\n  for (layerKey in placeholder.layers) {\n    if (placeholder.layers.hasOwnProperty(layerKey)) {\n      layer = placeholder.layers[layerKey];\n\n      if (layer.canvascanvas !== null) {\n        layer.canvascanvas.width = width;\n        layer.canvascanvas.height = height;\n      }\n    }\n  }\n};\n\nCanvasGraphics.prototype.begin = function () {\n  var key, placeholder, layerKey, layer, width, height;\n  this.parent.begin.apply(this);\n\n  for (key in this.m_placeholders) {\n    if (this.m_placeholders.hasOwnProperty(key)) {\n      placeholder = this.m_placeholders[key];\n      width = placeholder.size.width;\n      height = placeholder.size.height;\n\n      for (layerKey in placeholder.layers) {\n        if (placeholder.layers.hasOwnProperty(layerKey)) {\n          layer = placeholder.layers[layerKey];\n\n          if (layer.canvascanvas !== null) {\n            layer.canvascontext.clearRect(0, 0, width, height);\n          }\n        }\n      }\n    }\n  }\n};\n\nCanvasGraphics.prototype._getContext = function (placeholder, layer) {\n  var width = placeholder.size.width,\n      height = placeholder.size.height;\n\n  if (layer.canvascanvas === null) {\n    layer.canvascanvas = document.createElement('canvas');\n    layer.canvascanvas.width = width;\n    layer.canvascanvas.height = height;\n    this.prepend(placeholder.activeLayer.canvas, layer.canvascanvas);\n    layer.canvascontext = layer.canvascanvas.getContext('2d');\n  }\n\n  return layer.canvascontext;\n};\n\nCanvasGraphics.prototype.reset = function (arg0, arg1) {\n  var placeholderName = \"none\",\n      layerName = -1,\n      placeholder,\n      layer,\n      width,\n      height;\n\n  switch (arguments.length) {\n    case 1:\n      if (typeof arg0 === \"string\") {\n        placeholderName = arg0;\n      } else {\n        layerName = arg0;\n      }\n\n      break;\n\n    case 2:\n      placeholderName = arg0;\n      layerName = arg1;\n      break;\n  }\n\n  this.parent.reset.apply(this, arguments);\n  placeholder = this.m_placeholders[placeholderName];\n\n  if (placeholder !== undefined) {\n    width = placeholder.size.width;\n    height = placeholder.size.height;\n    layer = placeholder.layers[layerName];\n\n    if (layer !== undefined && layer.canvascanvas !== null) {\n      layer.canvascontext.clearRect(0, 0, width, height);\n    }\n  }\n};\n\nCanvasGraphics.prototype.polyline = function (polylineData) {\n  var placeholder = this.m_activePlaceholder,\n      layer,\n      context,\n      attr = polylineData.paletteItem.toAttr(),\n      dashes,\n      step,\n      cornerRadius;\n\n  if (!placeholder.hasGraphics) {\n    this.parent.polyline.apply(this, arguments);\n  } else {\n    layer = placeholder.activeLayer;\n    context = this._getContext(placeholder, layer);\n    context.save();\n\n    if (attr.lineWidth !== undefined && attr.borderColor !== undefined) {\n      context.strokeStyle = attr.borderColor;\n      context.lineWidth = attr.lineWidth;\n    } else {\n      context.lineWidth = 0;\n      context.strokeStyle = \"Transparent\";\n    }\n\n    if (attr.lineType != null) {\n      step = Math.round(attr.lineWidth) || 1;\n\n      switch (attr.lineType) {\n        case LineType.Solid:\n          dashes = [];\n          break;\n\n        case LineType.Dotted:\n          dashes = [step, step];\n          break;\n\n        case LineType.Dashed:\n          dashes = [step * 5, step * 3];\n          break;\n      }\n\n      if (context.setLineDash !== undefined) {\n        context.setLineDash(dashes);\n      } else if (context.webkitLineDash !== undefined) {\n        context.webkitLineDash = dashes;\n      } else if (context.mozDash !== undefined) {\n        context.mozDash = dashes;\n      }\n    }\n\n    context.beginPath();\n    polylineData.loop(this, function (segment) {\n      switch (segment.segmentType) {\n        case SegmentType.Move:\n          context.moveTo(Math.round(segment.x) + 0.5, Math.round(segment.y) + 0.5);\n          break;\n\n        case SegmentType.Line:\n          context.lineTo(Math.round(segment.x) + 0.5, Math.round(segment.y) + 0.5);\n          break;\n\n        case SegmentType.Dot:\n          if (segment.width == segment.height && segment.width / 2.0 <= segment.cornerRadius) {\n            // circle dot\n            context.moveTo(Math.round(segment.x) + segment.width + 0.5, Math.round(segment.y) + segment.height / 2.0 + 0.5);\n            context.arc(Math.round(segment.x) + segment.width / 2.0 + 0.5, Math.round(segment.y) + segment.height / 2.0 + 0.5, Math.round(segment.width / 2.0), 0, 2 * Math.PI, false);\n          } else if (segment.cornerRadius === 0) {\n            // square\n            context.moveTo(Math.round(segment.x) + 0.5, Math.round(segment.y) + 0.5);\n            context.lineTo(Math.round(segment.x + segment.width) + 0.5, Math.round(segment.y) + 0.5);\n            context.lineTo(Math.round(segment.x + segment.width) + 0.5, Math.round(segment.y + segment.height) + 0.5);\n            context.lineTo(Math.round(segment.x) + 0.5, Math.round(segment.y + segment.height) + 0.5);\n            context.lineTo(Math.round(segment.x) + 0.5, Math.round(segment.y) + 0.5);\n          } else {\n            // rounded corners rectangle\n            cornerRadius = Math.min(segment.cornerRadius, Math.min(segment.width / 2.0, segment.height / 2.0));\n            context.moveTo(Math.round(segment.x) + 0.5, Math.round(segment.y + cornerRadius) + 0.5);\n            context.arc(Math.round(segment.x + cornerRadius) + 0.5, Math.round(segment.y + cornerRadius) + 0.5, Math.round(cornerRadius), Math.PI, -Math.PI / 2.0, false);\n            context.lineTo(Math.round(segment.x + segment.width - cornerRadius) + 0.5, Math.round(segment.y) + 0.5);\n            context.arc(Math.round(segment.x + segment.width - cornerRadius) + 0.5, Math.round(segment.y + cornerRadius) + 0.5, Math.round(cornerRadius), -Math.PI / 2.0, 0, false);\n            context.lineTo(Math.round(segment.x + segment.width) + 0.5, Math.round(segment.y + segment.height - cornerRadius) + 0.5);\n            context.arc(Math.round(segment.x + segment.width - cornerRadius) + 0.5, Math.round(segment.y + segment.height - cornerRadius) + 0.5, Math.round(cornerRadius), 0, Math.PI / 2.0, false);\n            context.lineTo(Math.round(segment.x + cornerRadius) + 0.5, Math.round(segment.y + segment.height) + 0.5);\n            context.arc(Math.round(segment.x + cornerRadius) + 0.5, Math.round(segment.y + segment.height - cornerRadius) + 0.5, Math.round(cornerRadius), Math.PI / 2.0, Math.PI, false);\n            context.lineTo(Math.round(segment.x) + 0.5, Math.round(segment.y + cornerRadius) + 0.5);\n          }\n\n          break;\n\n        case SegmentType.QuadraticArc:\n          context.quadraticCurveTo(Math.round(segment.cpX) + 0.5, Math.round(segment.cpY) + 0.5, Math.round(segment.x) + 0.5, Math.round(segment.y) + 0.5);\n          break;\n\n        case SegmentType.CubicArc:\n          context.bezierCurveTo(Math.round(segment.cpX1) + 0.5, Math.round(segment.cpY1) + 0.5, Math.round(segment.cpX2) + 0.5, Math.round(segment.cpY2) + 0.5, Math.round(segment.x) + 0.5, Math.round(segment.y) + 0.5);\n          break;\n      }\n    });\n\n    if (attr.opacity != null) {\n      context.globalAlpha = attr.opacity;\n    }\n\n    if (attr.lineWidth !== undefined) {\n      context.stroke();\n    }\n\n    if (attr.fillColor !== undefined) {\n      context.fillStyle = attr.fillColor;\n      context.fill();\n    }\n\n    context.restore();\n  }\n};","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/graphics/CanvasGraphics.js"],"names":["Graphics","GraphicsType","LineType","SegmentType","CanvasGraphics","element","parent","prototype","constructor","apply","arguments","graphicsType","Canvas","m_maximum","clean","key","placeholder","layerKey","layer","m_placeholders","hasOwnProperty","layers","canvascanvas","parentNode","removeChild","_activatePlaceholder","placeholderName","width","height","m_activePlaceholder","size","hasGraphics","resizePlaceholder","left","top","begin","canvascontext","clearRect","_getContext","document","createElement","prepend","activeLayer","canvas","getContext","reset","arg0","arg1","layerName","length","undefined","polyline","polylineData","context","attr","paletteItem","toAttr","dashes","step","cornerRadius","save","lineWidth","borderColor","strokeStyle","lineType","Math","round","Solid","Dotted","Dashed","setLineDash","webkitLineDash","mozDash","beginPath","loop","segment","segmentType","Move","moveTo","x","y","Line","lineTo","Dot","arc","PI","min","QuadraticArc","quadraticCurveTo","cpX","cpY","CubicArc","bezierCurveTo","cpX1","cpY1","cpX2","cpY2","opacity","globalAlpha","stroke","fillColor","fillStyle","fill","restore"],"mappings":"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","sourcesContent":["import Graphics from './Graphics';\nimport { GraphicsType, LineType, SegmentType } from '../enums';\n\nexport default function CanvasGraphics(element) {\n  this.parent = Graphics.prototype;\n\n  this.parent.constructor.apply(this, arguments);\n\n  this.graphicsType = GraphicsType.Canvas;\n  this.m_maximum = 8000; // Search for maximum size of canvas element\n};\n\nCanvasGraphics.prototype = new Graphics();\n\nCanvasGraphics.prototype.clean = function () {\n  var key,\n    placeholder,\n    layerKey,\n    layer;\n  for (key in this.m_placeholders) {\n    if (this.m_placeholders.hasOwnProperty(key)) {\n      placeholder = this.m_placeholders[key];\n      for (layerKey in placeholder.layers) {\n        if (placeholder.layers.hasOwnProperty(layerKey)) {\n          layer = placeholder.layers[layerKey];\n          if (layer.canvascanvas !== null) {\n            layer.canvascanvas.parentNode.removeChild(layer.canvascanvas);\n            layer.canvascanvas = null;\n          }\n        }\n      }\n    }\n  }\n  this.parent.clean.apply(this, arguments);\n};\n\nCanvasGraphics.prototype._activatePlaceholder = function (placeholderName) {\n  var placeholder,\n    width,\n    height;\n\n  this.parent._activatePlaceholder.apply(this, arguments);\n\n  placeholder = this.m_activePlaceholder;\n  width = placeholder.size.width;\n  height = placeholder.size.height;\n  if (width > this.m_maximum || height > this.m_maximum) {\n    placeholder.hasGraphics = false;\n  }\n  else {\n    placeholder.hasGraphics = true;\n  }\n  return placeholder;\n};\n\nCanvasGraphics.prototype.resizePlaceholder = function (placeholder, left, top, width, height) {\n  var layerKey,\n    layer;\n\n  this.parent.resizePlaceholder.apply(this, arguments);\n\n  for (layerKey in placeholder.layers) {\n    if (placeholder.layers.hasOwnProperty(layerKey)) {\n      layer = placeholder.layers[layerKey];\n      if (layer.canvascanvas !== null) {\n        layer.canvascanvas.width = width;\n        layer.canvascanvas.height = height;\n      }\n    }\n  }\n};\n\nCanvasGraphics.prototype.begin = function () {\n  var key,\n    placeholder,\n    layerKey,\n    layer,\n    width,\n    height;\n  this.parent.begin.apply(this);\n\n  for (key in this.m_placeholders) {\n    if (this.m_placeholders.hasOwnProperty(key)) {\n      placeholder = this.m_placeholders[key];\n      width = placeholder.size.width;\n      height = placeholder.size.height;\n      for (layerKey in placeholder.layers) {\n        if (placeholder.layers.hasOwnProperty(layerKey)) {\n          layer = placeholder.layers[layerKey];\n\n          if (layer.canvascanvas !== null) {\n            layer.canvascontext.clearRect(0, 0, width, height);\n          }\n        }\n      }\n    }\n  }\n};\n\nCanvasGraphics.prototype._getContext = function (placeholder, layer) {\n  var width = placeholder.size.width,\n    height = placeholder.size.height;\n\n  if (layer.canvascanvas === null) {\n    layer.canvascanvas = document.createElement('canvas');\n    layer.canvascanvas.width = width;\n    layer.canvascanvas.height = height;\n    this.prepend(placeholder.activeLayer.canvas, layer.canvascanvas);\n    layer.canvascontext = layer.canvascanvas.getContext('2d');\n  }\n  return layer.canvascontext;\n};\n\nCanvasGraphics.prototype.reset = function (arg0, arg1) {\n  var placeholderName = \"none\",\n    layerName = -1,\n    placeholder,\n    layer,\n    width,\n    height;\n  switch (arguments.length) {\n    case 1:\n      if (typeof arg0 === \"string\") {\n        placeholderName = arg0;\n      }\n      else {\n        layerName = arg0;\n      }\n      break;\n    case 2:\n      placeholderName = arg0;\n      layerName = arg1;\n      break;\n  }\n\n  this.parent.reset.apply(this, arguments);\n\n  placeholder = this.m_placeholders[placeholderName];\n  if (placeholder !== undefined) {\n    width = placeholder.size.width;\n    height = placeholder.size.height;\n    layer = placeholder.layers[layerName];\n    if (layer !== undefined && layer.canvascanvas !== null) {\n      layer.canvascontext.clearRect(0, 0, width, height);\n    }\n  }\n};\n\nCanvasGraphics.prototype.polyline = function (polylineData) {\n  var placeholder = this.m_activePlaceholder,\n    layer,\n    context,\n    attr = polylineData.paletteItem.toAttr(),\n    dashes,\n    step,\n    cornerRadius;\n  if (!placeholder.hasGraphics) {\n    this.parent.polyline.apply(this, arguments);\n  }\n  else {\n    layer = placeholder.activeLayer;\n    context = this._getContext(placeholder, layer);\n    context.save();\n\n    if (attr.lineWidth !== undefined && attr.borderColor !== undefined) {\n      context.strokeStyle = attr.borderColor;\n      context.lineWidth = attr.lineWidth;\n    }\n    else {\n      context.lineWidth = 0;\n      context.strokeStyle = \"Transparent\";\n    }\n\n    if (attr.lineType != null) {\n      step = Math.round(attr.lineWidth) || 1;\n      switch (attr.lineType) {\n        case LineType.Solid:\n          dashes = [];\n          break;\n        case LineType.Dotted:\n          dashes = [step, step];\n          break;\n        case LineType.Dashed:\n          dashes = [step * 5, step * 3];\n          break;\n      }\n\n      if (context.setLineDash !== undefined) {\n        context.setLineDash(dashes);\n      } else if (context.webkitLineDash !== undefined) {\n        context.webkitLineDash = dashes;\n      } else if (context.mozDash !== undefined) {\n        context.mozDash = dashes;\n      }\n    }\n\n    context.beginPath();\n\n    polylineData.loop(this, function (segment) {\n      switch (segment.segmentType) {\n        case SegmentType.Move:\n          context.moveTo(Math.round(segment.x) + 0.5, Math.round(segment.y) + 0.5);\n          break;\n        case SegmentType.Line:\n          context.lineTo(Math.round(segment.x) + 0.5, Math.round(segment.y) + 0.5);\n          break;\n        case SegmentType.Dot:\n          if (segment.width == segment.height && segment.width / 2.0 <= segment.cornerRadius) {\n            // circle dot\n            context.moveTo(Math.round(segment.x) + segment.width + 0.5, Math.round(segment.y) + segment.height / 2.0 + 0.5);\n            context.arc(Math.round(segment.x) + segment.width / 2.0 + 0.5, Math.round(segment.y) + segment.height / 2.0 + 0.5, Math.round(segment.width / 2.0), 0, 2 * Math.PI, false);\n          } else if (segment.cornerRadius === 0) {\n            // square\n            context.moveTo(Math.round(segment.x) + 0.5, Math.round(segment.y) + 0.5);\n            context.lineTo(Math.round(segment.x + segment.width) + 0.5, Math.round(segment.y) + 0.5);\n            context.lineTo(Math.round(segment.x + segment.width) + 0.5, Math.round(segment.y + segment.height) + 0.5);\n            context.lineTo(Math.round(segment.x) + 0.5, Math.round(segment.y + segment.height) + 0.5);\n            context.lineTo(Math.round(segment.x) + 0.5, Math.round(segment.y) + 0.5);\n          } else {\n            // rounded corners rectangle\n            cornerRadius = Math.min(segment.cornerRadius, Math.min(segment.width / 2.0, segment.height / 2.0));\n\n            context.moveTo(Math.round(segment.x) + 0.5, Math.round(segment.y + cornerRadius) + 0.5);\n            context.arc(Math.round(segment.x + cornerRadius) + 0.5, Math.round(segment.y + cornerRadius) + 0.5, Math.round(cornerRadius), Math.PI, -Math.PI / 2.0, false);\n\n            context.lineTo(Math.round(segment.x + segment.width - cornerRadius) + 0.5, Math.round(segment.y) + 0.5);\n            context.arc(Math.round(segment.x + segment.width - cornerRadius) + 0.5, Math.round(segment.y + cornerRadius) + 0.5, Math.round(cornerRadius), -Math.PI / 2.0, 0, false);\n\n            context.lineTo(Math.round(segment.x + segment.width) + 0.5, Math.round(segment.y + segment.height - cornerRadius) + 0.5);\n            context.arc(Math.round(segment.x + segment.width - cornerRadius) + 0.5, Math.round(segment.y + segment.height - cornerRadius) + 0.5, Math.round(cornerRadius), 0, Math.PI / 2.0, false);\n\n            context.lineTo(Math.round(segment.x + cornerRadius) + 0.5, Math.round(segment.y + segment.height) + 0.5);\n            context.arc(Math.round(segment.x + cornerRadius) + 0.5, Math.round(segment.y + segment.height - cornerRadius) + 0.5, Math.round(cornerRadius), Math.PI / 2.0, Math.PI, false);\n\n            context.lineTo(Math.round(segment.x) + 0.5, Math.round(segment.y + cornerRadius) + 0.5);\n          }\n          break;\n        case SegmentType.QuadraticArc:\n          context.quadraticCurveTo(Math.round(segment.cpX) + 0.5, Math.round(segment.cpY) + 0.5, Math.round(segment.x) + 0.5, Math.round(segment.y) + 0.5);\n          break;\n        case SegmentType.CubicArc:\n          context.bezierCurveTo(Math.round(segment.cpX1) + 0.5,\n            Math.round(segment.cpY1) + 0.5,\n            Math.round(segment.cpX2) + 0.5,\n            Math.round(segment.cpY2) + 0.5,\n            Math.round(segment.x) + 0.5,\n            Math.round(segment.y) + 0.5);\n          break;\n      }\n    });\n    if (attr.opacity != null) {\n      context.globalAlpha = attr.opacity;\n    }\n    if (attr.lineWidth !== undefined) {\n      context.stroke();\n    }\n    if (attr.fillColor !== undefined) {\n      context.fillStyle = attr.fillColor;\n      context.fill();\n    }\n    context.restore();\n  }\n};"]},"metadata":{},"sourceType":"module"}