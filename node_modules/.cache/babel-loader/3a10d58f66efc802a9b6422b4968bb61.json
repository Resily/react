{"ast":null,"code":"import { GraphicsType } from '../enums';\nimport SvgGraphics from './SvgGraphics';\nimport CanvasGraphics from './CanvasGraphics';\nvar _supportsSVG = null;\n/**\n * Checks if browser supports HTML SVG graphics.\n * \n * @returns {boolean} Returns true if browser supports SVG canvas graphics.\n * @ignore\n */\n\nexport function supportsSVG() {\n  if (_supportsSVG === null) {\n    _supportsSVG = document.implementation.hasFeature(\"http://www.w3.org/TR/SVG11/feature#BasicStructure\", \"1.1\") || document.implementation.hasFeature(\"http://www.w3.org/TR/SVG11/feature#Shape\", \"1.0\");\n  }\n\n  return _supportsSVG;\n}\n;\nvar _supportsCanvas = null;\n/**\n * Checks if browser supports HTML Canvas graphics.\n * \n * @ignore\n * @returns {boolean} Returns true if browser supports HTML canvas graphics.\n */\n\nexport function supportsCanvas() {\n  if (_supportsCanvas === null) {\n    _supportsCanvas = !!window.HTMLCanvasElement;\n  }\n\n  return _supportsCanvas;\n}\n;\n/**\n * Checks if browser is Chrome.\n * \n * @returns {boolean} Returns true if browser is chrome.\n * @ignore\n */\n\nexport function isChrome() {\n  if (navigator != null) {\n    //ignore jslint\n    return /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor); //ignore jslint\n  }\n\n  return false;\n}\n;\n/**\n * Creates graphics object for chart rendering\n * \n * @param {GraphicsType} preferred Preferred graphics type by user\n * @param {object} element Reference to dom element the graphics object is created for\n * @returns {Graphics} Returns graphics object\n * @ignore\n */\n\nexport default function createGraphics(preferred, element) {\n  var result = null,\n      modes,\n      key,\n      index;\n  modes = [preferred];\n\n  for (key in GraphicsType) {\n    if (GraphicsType.hasOwnProperty(key)) {\n      modes.push(GraphicsType[key]);\n    }\n  }\n\n  for (index = 0; result === null && index < modes.length; index += 1) {\n    switch (modes[index]) {\n      case GraphicsType.SVG:\n        if (supportsSVG()) {\n          result = new SvgGraphics(element);\n        }\n\n        break;\n\n      case GraphicsType.Canvas:\n        if (supportsCanvas()) {\n          result = new CanvasGraphics(element);\n        }\n\n        break;\n    }\n  }\n\n  return result;\n}\n;","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/graphics/createGraphics.js"],"names":["GraphicsType","SvgGraphics","CanvasGraphics","_supportsSVG","supportsSVG","document","implementation","hasFeature","_supportsCanvas","supportsCanvas","window","HTMLCanvasElement","isChrome","navigator","test","userAgent","vendor","createGraphics","preferred","element","result","modes","key","index","hasOwnProperty","push","length","SVG","Canvas"],"mappings":"AAAA,SAASA,YAAT,QAA6B,UAA7B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,IAAIC,YAAY,GAAG,IAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,WAAT,GAAuB;AAC1B,MAAID,YAAY,KAAK,IAArB,EAA2B;AACvBA,IAAAA,YAAY,GAAGE,QAAQ,CAACC,cAAT,CAAwBC,UAAxB,CAAmC,mDAAnC,EAAwF,KAAxF,KACfF,QAAQ,CAACC,cAAT,CAAwBC,UAAxB,CAAmC,0CAAnC,EAA+E,KAA/E,CADA;AAEH;;AACD,SAAOJ,YAAP;AACH;AAAA;AAED,IAAIK,eAAe,GAAG,IAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,cAAT,GAA0B;AAC7B,MAAID,eAAe,KAAK,IAAxB,EAA8B;AAC1BA,IAAAA,eAAe,GAAG,CAAC,CAACE,MAAM,CAACC,iBAA3B;AACH;;AACD,SAAOH,eAAP;AACH;AAAA;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,QAAT,GAAqB;AACxB,MAAIC,SAAS,IAAI,IAAjB,EAAuB;AAAE;AACrB,WAAO,SAASC,IAAT,CAAcD,SAAS,CAACE,SAAxB,KAAsC,aAAaD,IAAb,CAAkBD,SAAS,CAACG,MAA5B,CAA7C,CADmB,CAC+D;AACrF;;AACD,SAAO,KAAP;AACH;AAAA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,cAAT,CAAwBC,SAAxB,EAAmCC,OAAnC,EAA4C;AACvD,MAAIC,MAAM,GAAG,IAAb;AAAA,MACIC,KADJ;AAAA,MAEIC,GAFJ;AAAA,MAGIC,KAHJ;AAKAF,EAAAA,KAAK,GAAG,CAACH,SAAD,CAAR;;AACA,OAAKI,GAAL,IAAYtB,YAAZ,EAA0B;AACtB,QAAIA,YAAY,CAACwB,cAAb,CAA4BF,GAA5B,CAAJ,EAAsC;AACtCD,MAAAA,KAAK,CAACI,IAAN,CAAWzB,YAAY,CAACsB,GAAD,CAAvB;AACC;AACJ;;AACD,OAAKC,KAAK,GAAG,CAAb,EAAgBH,MAAM,KAAK,IAAX,IAAmBG,KAAK,GAAGF,KAAK,CAACK,MAAjD,EAAyDH,KAAK,IAAI,CAAlE,EAAqE;AACjE,YAAQF,KAAK,CAACE,KAAD,CAAb;AACA,WAAKvB,YAAY,CAAC2B,GAAlB;AACI,YAAIvB,WAAW,EAAf,EAAmB;AAEfgB,UAAAA,MAAM,GAAG,IAAInB,WAAJ,CAAgBkB,OAAhB,CAAT;AACH;;AACD;;AACJ,WAAKnB,YAAY,CAAC4B,MAAlB;AACI,YAAInB,cAAc,EAAlB,EAAsB;AAClBW,UAAAA,MAAM,GAAG,IAAIlB,cAAJ,CAAmBiB,OAAnB,CAAT;AACH;;AACD;AAXJ;AAaH;;AACD,SAAOC,MAAP;AACH;AAAA","sourcesContent":["import { GraphicsType } from '../enums';\nimport SvgGraphics from './SvgGraphics';\nimport CanvasGraphics from './CanvasGraphics';\n\nlet _supportsSVG = null;\n\n/**\n * Checks if browser supports HTML SVG graphics.\n * \n * @returns {boolean} Returns true if browser supports SVG canvas graphics.\n * @ignore\n */\nexport function supportsSVG() {\n    if (_supportsSVG === null) {\n        _supportsSVG = document.implementation.hasFeature(\"http://www.w3.org/TR/SVG11/feature#BasicStructure\", \"1.1\") ||\n        document.implementation.hasFeature(\"http://www.w3.org/TR/SVG11/feature#Shape\", \"1.0\");\n    }\n    return _supportsSVG;\n};\n\nlet _supportsCanvas = null;\n\n/**\n * Checks if browser supports HTML Canvas graphics.\n * \n * @ignore\n * @returns {boolean} Returns true if browser supports HTML canvas graphics.\n */\nexport function supportsCanvas() {\n    if (_supportsCanvas === null) {\n        _supportsCanvas = !!window.HTMLCanvasElement;\n    }\n    return _supportsCanvas;\n};\n\n/**\n * Checks if browser is Chrome.\n * \n * @returns {boolean} Returns true if browser is chrome.\n * @ignore\n */\nexport function isChrome () {\n    if (navigator != null) { //ignore jslint\n        return /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor); //ignore jslint\n    }\n    return false;\n};\n\n/**\n * Creates graphics object for chart rendering\n * \n * @param {GraphicsType} preferred Preferred graphics type by user\n * @param {object} element Reference to dom element the graphics object is created for\n * @returns {Graphics} Returns graphics object\n * @ignore\n */\nexport default function createGraphics(preferred, element) {\n    var result = null,\n        modes,\n        key,\n        index;\n\n    modes = [preferred];\n    for (key in GraphicsType) {\n        if (GraphicsType.hasOwnProperty(key)) {\n        modes.push(GraphicsType[key]);\n        }\n    }\n    for (index = 0; result === null && index < modes.length; index += 1) {\n        switch (modes[index]) {\n        case GraphicsType.SVG:\n            if (supportsSVG()) {\n\n                result = new SvgGraphics(element);\n            }\n            break;\n        case GraphicsType.Canvas:\n            if (supportsCanvas()) {\n                result = new CanvasGraphics(element);\n            }\n            break;\n        }\n    }\n    return result;\n};"]},"metadata":{},"sourceType":"module"}