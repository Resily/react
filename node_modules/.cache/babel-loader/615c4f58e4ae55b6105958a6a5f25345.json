{"ast":null,"code":"/**\n * @class Interval\n * @classdesc Class represents interval defined by two values.\n * \n * @param {Interval} arg0 Interval object to clone.\n * \n * @param {number} arg0 The from value.\n * @param {number} arg1 The to value.\n */\nexport default function Interval(arg0, arg1, arg2) {\n  /**\n   * The from value\n   * @type {number}\n   */\n  this.from = null;\n  /**\n   * The to value\n   * @type {number}\n   */\n\n  this.to = null;\n  /**\n   * Reference to the context object associated with this Interval.\n   * @type {object}\n   */\n\n  this.context = null;\n\n  switch (arguments.length) {\n    case 1:\n      this.from = arg0.from;\n      this.to = arg0.to;\n      this.context = arg0.context;\n      break;\n\n    case 2:\n      this.from = arg0;\n      this.to = arg1;\n      break;\n\n    case 3:\n      this.from = arg0;\n      this.to = arg1;\n      this.context = arg2;\n      break;\n\n    default:\n      break;\n  }\n}\n;\n/**\n * Width\n * \n * @returns {number} Returns interval width\n */\n\nInterval.prototype.width = function () {\n  return this.to - this.from;\n};\n/**\n * Checks if intervals are equal\n * \n * @param {Interval} interval Interval\n * @returns {boolean} Returns true if intervals are equal.\n */\n\n\nInterval.prototype.equalTo = function (interval) {\n  return this.from == interval.from && this.to == interval.to;\n};\n/**\n * Clones the interval\n * \n * @returns {Interval} Returns copy of the interval.\n */\n\n\nInterval.prototype.clone = function () {\n  return new Interval(this);\n};\n/**\n * Returns interval in form of user friendly string \n * \n * @returns {string} Returns string interval representation.\n */\n\n\nInterval.prototype.toString = function () {\n  return this.from + \", \" + this.to;\n};\n/**\n * Checks if the interval overlaps the specified interval\n * \n * @param {Interval} interval The interval to check overlapping for.\n * @returns {boolean} Returns true if two intervals overlap each other.\n */\n\n\nInterval.prototype.overlaps = function (interval) {\n  var result = true;\n\n  if (this.to < interval.from || interval.to < this.from) {\n    result = false;\n  }\n\n  return result;\n};","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/graphics/structs/Interval.js"],"names":["Interval","arg0","arg1","arg2","from","to","context","arguments","length","prototype","width","equalTo","interval","clone","toString","overlaps","result"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,QAAT,CAAkBC,IAAlB,EAAwBC,IAAxB,EAA8BC,IAA9B,EAAoC;AACjD;AACF;AACA;AACA;AACE,OAAKC,IAAL,GAAY,IAAZ;AACA;AACF;AACA;AACA;;AACE,OAAKC,EAAL,GAAU,IAAV;AAEA;AACF;AACA;AACA;;AACE,OAAKC,OAAL,GAAe,IAAf;;AAEA,UAAQC,SAAS,CAACC,MAAlB;AACE,SAAK,CAAL;AACE,WAAKJ,IAAL,GAAYH,IAAI,CAACG,IAAjB;AACA,WAAKC,EAAL,GAAUJ,IAAI,CAACI,EAAf;AACA,WAAKC,OAAL,GAAeL,IAAI,CAACK,OAApB;AACA;;AACF,SAAK,CAAL;AACE,WAAKF,IAAL,GAAYH,IAAZ;AACA,WAAKI,EAAL,GAAUH,IAAV;AACA;;AACF,SAAK,CAAL;AACE,WAAKE,IAAL,GAAYH,IAAZ;AACA,WAAKI,EAAL,GAAUH,IAAV;AACA,WAAKI,OAAL,GAAeH,IAAf;AACA;;AACF;AACE;AAhBJ;AAkBD;AAAA;AAED;AACA;AACA;AACA;AACA;;AACAH,QAAQ,CAACS,SAAT,CAAmBC,KAAnB,GAA2B,YAAY;AACrC,SAAO,KAAKL,EAAL,GAAU,KAAKD,IAAtB;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;;;AACAJ,QAAQ,CAACS,SAAT,CAAmBE,OAAnB,GAA6B,UAAUC,QAAV,EAAoB;AAC/C,SAAO,KAAKR,IAAL,IAAaQ,QAAQ,CAACR,IAAtB,IAA8B,KAAKC,EAAL,IAAWO,QAAQ,CAACP,EAAzD;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;;;AACAL,QAAQ,CAACS,SAAT,CAAmBI,KAAnB,GAA2B,YAAY;AACrC,SAAO,IAAIb,QAAJ,CAAa,IAAb,CAAP;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;;;AACAA,QAAQ,CAACS,SAAT,CAAmBK,QAAnB,GAA8B,YAAY;AACxC,SAAO,KAAKV,IAAL,GAAY,IAAZ,GAAmB,KAAKC,EAA/B;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;;;AACAL,QAAQ,CAACS,SAAT,CAAmBM,QAAnB,GAA8B,UAAUH,QAAV,EAAoB;AAChD,MAAII,MAAM,GAAG,IAAb;;AACA,MAAI,KAAKX,EAAL,GAAUO,QAAQ,CAACR,IAAnB,IAA2BQ,QAAQ,CAACP,EAAT,GAAc,KAAKD,IAAlD,EAAwD;AACtDY,IAAAA,MAAM,GAAG,KAAT;AACD;;AACD,SAAOA,MAAP;AACD,CAND","sourcesContent":["/**\n * @class Interval\n * @classdesc Class represents interval defined by two values.\n * \n * @param {Interval} arg0 Interval object to clone.\n * \n * @param {number} arg0 The from value.\n * @param {number} arg1 The to value.\n */\nexport default function Interval(arg0, arg1, arg2) {\n  /**\n   * The from value\n   * @type {number}\n   */\n  this.from = null;\n  /**\n   * The to value\n   * @type {number}\n   */\n  this.to = null;\n\n  /**\n   * Reference to the context object associated with this Interval.\n   * @type {object}\n   */\n  this.context = null;\n\n  switch (arguments.length) {\n    case 1:\n      this.from = arg0.from;\n      this.to = arg0.to;\n      this.context = arg0.context;\n      break;\n    case 2:\n      this.from = arg0;\n      this.to = arg1;\n      break;\n    case 3:\n      this.from = arg0;\n      this.to = arg1;\n      this.context = arg2;\n      break;\n    default:\n      break;\n  }\n};\n\n/**\n * Width\n * \n * @returns {number} Returns interval width\n */\nInterval.prototype.width = function () {\n  return this.to - this.from;\n};\n\n/**\n * Checks if intervals are equal\n * \n * @param {Interval} interval Interval\n * @returns {boolean} Returns true if intervals are equal.\n */\nInterval.prototype.equalTo = function (interval) {\n  return this.from == interval.from && this.to == interval.to;\n};\n\n\n/**\n * Clones the interval\n * \n * @returns {Interval} Returns copy of the interval.\n */\nInterval.prototype.clone = function () {\n  return new Interval(this);\n};\n\n/**\n * Returns interval in form of user friendly string \n * \n * @returns {string} Returns string interval representation.\n */\nInterval.prototype.toString = function () {\n  return this.from + \", \" + this.to;\n};\n\n/**\n * Checks if the interval overlaps the specified interval\n * \n * @param {Interval} interval The interval to check overlapping for.\n * @returns {boolean} Returns true if two intervals overlap each other.\n */\nInterval.prototype.overlaps = function (interval) {\n  var result = true;\n  if (this.to < interval.from || interval.to < this.from) {\n    result = false;\n  }\n  return result;\n};\n"]},"metadata":{},"sourceType":"module"}