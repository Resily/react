{"ast":null,"code":"import { Layers } from '../../enums';\nimport Graph from '../../algorithms/Graph';\nexport default function ConnectionsGraphTask(getGraphics, createTransformTask, connectorsOptionTask, visualTreeLevelsTask, alignDiagramTask, removeLoopsTask) {\n  var _data = {\n    graph: null,\n    nodeid: 0\n  };\n\n  function process() {\n    var graphics = getGraphics(),\n        panel = graphics.activate(\"placeholder\", Layers.Connector),\n        bundles = visualTreeLevelsTask.getBundles(),\n        nestedLayoutBottomConnectorIds = visualTreeLevelsTask.getNestedLayoutBottomConnectorIds(),\n        connectorsOptions = connectorsOptionTask.getOptions(),\n        loops = removeLoopsTask != null ? removeLoopsTask.getLoops() : [];\n    var data = {\n      graph: Graph(),\n      nodeid: 0\n    };\n    var params = {\n      treeItemsPositions: alignDiagramTask.getItemsPositions(),\n      nestedLayoutBottomConnectorIds: nestedLayoutBottomConnectorIds,\n      transform: createTransformTask.getTransform(),\n      hasGraphics: panel.hasGraphics\n    };\n    var options = {\n      connectorType: connectorsOptions.connectorType,\n      showExtraArrows: connectorsOptions.showExtraArrows,\n      bevelSize: connectorsOptions.bevelSize,\n      elbowType: connectorsOptions.elbowType\n    };\n\n    for (var index = 0, len = bundles.length; index < len; index += 1) {\n      var bundle = bundles[index];\n      bundle.trace(data, params, options);\n    }\n\n    TraceLoops(data.graph, loops, connectorsOptions.extraArrowsMinimumSpace);\n    _data = data;\n    return true;\n  }\n\n  function TraceLoops(graph, loops) {\n    for (var index = 0, len = loops.length; index < len; index += 1) {\n      var loop = loops[index];\n      graph.getShortestPath(this, loop.from, [loop.to], function (connectorEdge, fromItem, toItem) {\n        return connectorEdge.weight;\n      }, function (path, to) {\n        for (var index2 = 0, len2 = path.length - 1; index2 < len2; index2 += 1) {\n          var fromItem = path[index2],\n              toItem = path[index2 + 1];\n          var edge = graph.edge(fromItem, toItem);\n          edge.isOppositeFlow = true;\n          edge.hasArrow = true;\n        }\n      }); //ignore jslint\n    }\n  }\n\n  function getGraph() {\n    return _data.graph;\n  }\n\n  return {\n    process: process,\n    getGraph: getGraph\n  };\n}\n;","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/tasks/transformations/ConnectionsGraphTask.js"],"names":["Layers","Graph","ConnectionsGraphTask","getGraphics","createTransformTask","connectorsOptionTask","visualTreeLevelsTask","alignDiagramTask","removeLoopsTask","_data","graph","nodeid","process","graphics","panel","activate","Connector","bundles","getBundles","nestedLayoutBottomConnectorIds","getNestedLayoutBottomConnectorIds","connectorsOptions","getOptions","loops","getLoops","data","params","treeItemsPositions","getItemsPositions","transform","getTransform","hasGraphics","options","connectorType","showExtraArrows","bevelSize","elbowType","index","len","length","bundle","trace","TraceLoops","extraArrowsMinimumSpace","loop","getShortestPath","from","to","connectorEdge","fromItem","toItem","weight","path","index2","len2","edge","isOppositeFlow","hasArrow","getGraph"],"mappings":"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","sourcesContent":["import { Layers } from '../../enums';\nimport Graph from '../../algorithms/Graph';\n\nexport default function ConnectionsGraphTask(getGraphics, createTransformTask, connectorsOptionTask, visualTreeLevelsTask, alignDiagramTask, removeLoopsTask) {\n  var _data = {\n    graph: null,\n    nodeid: 0\n  };\n\n  function process() {\n    var graphics = getGraphics(),\n      panel = graphics.activate(\"placeholder\", Layers.Connector),\n      bundles = visualTreeLevelsTask.getBundles(),\n      nestedLayoutBottomConnectorIds = visualTreeLevelsTask.getNestedLayoutBottomConnectorIds(),\n      connectorsOptions = connectorsOptionTask.getOptions(),\n      loops = removeLoopsTask != null ? removeLoopsTask.getLoops() : [];\n\n\n    var data = {\n      graph: Graph(),\n      nodeid: 0\n    };\n\n    var params = {\n      treeItemsPositions: alignDiagramTask.getItemsPositions(),\n      nestedLayoutBottomConnectorIds: nestedLayoutBottomConnectorIds,\n      transform: createTransformTask.getTransform(),\n      hasGraphics: panel.hasGraphics\n    };\n\n    var options = {\n      connectorType: connectorsOptions.connectorType,\n      showExtraArrows: connectorsOptions.showExtraArrows,\n      bevelSize: connectorsOptions.bevelSize,\n      elbowType: connectorsOptions.elbowType\n    };\n\n    for (var index = 0, len = bundles.length; index < len; index += 1) {\n      var bundle = bundles[index];\n\n      bundle.trace(data, params, options);\n    }\n\n    TraceLoops(data.graph, loops, connectorsOptions.extraArrowsMinimumSpace);\n\n    _data = data;\n\n    return true;\n  }\n\n  function TraceLoops(graph, loops) {\n    for (var index = 0, len = loops.length; index < len; index += 1) {\n      var loop = loops[index];\n\n      graph.getShortestPath(this, loop.from, [loop.to], function (connectorEdge, fromItem, toItem) {\n        return connectorEdge.weight;\n      }, function (path, to) {\n        for (var index2 = 0, len2 = path.length - 1; index2 < len2; index2 += 1) {\n          var fromItem = path[index2], toItem = path[index2 + 1];\n          var edge = graph.edge(fromItem, toItem);\n          edge.isOppositeFlow = true;\n          edge.hasArrow = true;\n        }\n      }); //ignore jslint\n    }\n  }\n\n  function getGraph() {\n    return _data.graph;\n  }\n\n  return {\n    process: process,\n    getGraph: getGraph\n  };\n};"]},"metadata":{},"sourceType":"module"}