{"ast":null,"code":"import ObjectReader from '../../readers/ObjectReader';\nimport ValueReader from '../../readers/ValueReader';\nimport { PageFitMode } from '../../enums';\nimport Size from '../../graphics/structs/Size';\nimport Thickness from '../../graphics/structs/Thickness';\nexport default function CurrentControlSizeTask(layoutOptionsTask, itemsSizesOptionTask, frameSizeTask, levelTitleSizeTask) {\n  var _data = {},\n      _hash = {},\n      _dataTemplate = new ObjectReader({\n    scrollPanelSize: new ObjectReader({\n      width: new ValueReader([\"number\"], true),\n      height: new ValueReader([\"number\"], true)\n    }, true),\n    optimalPanelSize: new ObjectReader({\n      width: new ValueReader([\"number\"], true),\n      height: new ValueReader([\"number\"], true)\n    }, true),\n    hasFrame: new ValueReader([\"boolean\"], true),\n    hasLevelTitles: new ValueReader([\"boolean\"], true)\n  });\n\n  function process() {\n    var result = false,\n        context = {\n      isChanged: false,\n      hash: _hash\n    },\n        layoutOptions = layoutOptionsTask.getOptions(),\n        _itemsSizesOptionTask = itemsSizesOptionTask.getOptions(),\n        pageFitMode = _itemsSizesOptionTask.pageFitMode,\n        frameThickness = new Thickness(frameSizeTask.getThickness()),\n        levelTitlesThickness = new Thickness(levelTitleSizeTask.getOptions().thickness); // disable outer level titles if its square space is bigger than viewport\n\n\n    layoutOptions.hasLevelTitles = false;\n\n    if (levelTitlesThickness.isPositive()) {\n      var viewportSize = new Size(layoutOptions.scrollPanelSize);\n      viewportSize.removeThickness(levelTitlesThickness);\n\n      if (layoutOptions.scrollPanelSize.space() < viewportSize.space() * 2) {\n        layoutOptions.scrollPanelSize = viewportSize;\n        layoutOptions.hasLevelTitles = true;\n      }\n    } // disable frame if its square space is bigger than viewport\n\n\n    layoutOptions.hasFrame = false;\n\n    if (frameThickness.isPositive()) {\n      var _viewportSize = new Size(layoutOptions.scrollPanelSize);\n\n      _viewportSize.removeThickness(frameThickness);\n\n      if (layoutOptions.scrollPanelSize.space() < _viewportSize.space() * 2) {\n        layoutOptions.scrollPanelSize = _viewportSize;\n        layoutOptions.hasFrame = true;\n      }\n    }\n\n    layoutOptions.optimalPanelSize = new Size(layoutOptions.scrollPanelSize.width - 25, layoutOptions.scrollPanelSize.height - 25);\n    _data = _dataTemplate.read(_data, layoutOptions, \"layout\", context);\n\n    switch (pageFitMode) {\n      case PageFitMode.PageWidth:\n      case PageFitMode.PageHeight:\n      case PageFitMode.FitToPage:\n      case PageFitMode.None:\n      case PageFitMode.SelectionOnly:\n        result = context.isChanged;\n        break;\n\n      default:\n        break;\n    }\n\n    return result;\n  }\n\n  function getOptions() {\n    return _data;\n  }\n\n  return {\n    process: process,\n    getOptions: getOptions\n  };\n}\n;","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/tasks/layout/CurrentControlSizeTask.js"],"names":["ObjectReader","ValueReader","PageFitMode","Size","Thickness","CurrentControlSizeTask","layoutOptionsTask","itemsSizesOptionTask","frameSizeTask","levelTitleSizeTask","_data","_hash","_dataTemplate","scrollPanelSize","width","height","optimalPanelSize","hasFrame","hasLevelTitles","process","result","context","isChanged","hash","layoutOptions","getOptions","pageFitMode","frameThickness","getThickness","levelTitlesThickness","thickness","isPositive","viewportSize","removeThickness","space","read","PageWidth","PageHeight","FitToPage","None","SelectionOnly"],"mappings":"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","sourcesContent":["import ObjectReader from '../../readers/ObjectReader';\nimport ValueReader from '../../readers/ValueReader';\nimport { PageFitMode } from '../../enums';\nimport Size from '../../graphics/structs/Size';\nimport Thickness from '../../graphics/structs/Thickness';\n\nexport default function CurrentControlSizeTask(layoutOptionsTask, itemsSizesOptionTask, frameSizeTask, levelTitleSizeTask) {\n  var _data = {},\n    _hash = {},\n    _dataTemplate = new ObjectReader({\n      scrollPanelSize: new ObjectReader({\n        width: new ValueReader([\"number\"], true),\n        height: new ValueReader([\"number\"], true)\n      }, true),\n      optimalPanelSize: new ObjectReader({\n        width: new ValueReader([\"number\"], true),\n        height: new ValueReader([\"number\"], true)\n      }, true),\n      hasFrame: new ValueReader([\"boolean\"], true),\n      hasLevelTitles: new ValueReader([\"boolean\"], true)\n    });\n\n  function process() {\n    var result = false,\n      context = { isChanged: false, hash: _hash },\n      layoutOptions = layoutOptionsTask.getOptions(),\n      { pageFitMode } = itemsSizesOptionTask.getOptions(),\n      frameThickness = new Thickness(frameSizeTask.getThickness()),\n      levelTitlesThickness = new Thickness(levelTitleSizeTask.getOptions().thickness);\n\n    // disable outer level titles if its square space is bigger than viewport\n    layoutOptions.hasLevelTitles = false;\n    if(levelTitlesThickness.isPositive()) {\n      let viewportSize = new Size(layoutOptions.scrollPanelSize);\n      viewportSize.removeThickness(levelTitlesThickness);\n      if(layoutOptions.scrollPanelSize.space() < viewportSize.space() * 2) {\n        layoutOptions.scrollPanelSize = viewportSize;\n        layoutOptions.hasLevelTitles = true;\n      }\n    }      \n\n    // disable frame if its square space is bigger than viewport\n    layoutOptions.hasFrame = false;\n    if(frameThickness.isPositive()) {\n      let viewportSize = new Size(layoutOptions.scrollPanelSize);\n      viewportSize.removeThickness(frameThickness);\n      if(layoutOptions.scrollPanelSize.space() < viewportSize.space() * 2) {\n        layoutOptions.scrollPanelSize = viewportSize;\n        layoutOptions.hasFrame = true;\n      }\n    }\n\n    layoutOptions.optimalPanelSize = new Size(layoutOptions.scrollPanelSize.width - 25, layoutOptions.scrollPanelSize.height - 25)\n\n    _data = _dataTemplate.read(_data, layoutOptions, \"layout\", context);\n\n    switch (pageFitMode) {\n      case PageFitMode.PageWidth:\n      case PageFitMode.PageHeight:\n      case PageFitMode.FitToPage:\n      case PageFitMode.None:\n      case PageFitMode.SelectionOnly:\n        result = context.isChanged;\n        break;\n      default:\n        break;\n\n    }\n\n    return result;\n  }\n\n  function getOptions() {\n    return _data;\n  }\n\n  return {\n    process: process,\n    getOptions: getOptions\n  };\n};"]},"metadata":{},"sourceType":"module"}