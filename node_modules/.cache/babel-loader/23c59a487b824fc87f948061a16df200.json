{"ast":null,"code":"import Thickness from '../graphics/structs/Thickness';\nimport Size from '../graphics/structs/Size';\nimport { AnnotationType, LineType, Colors, ZOrderType, ConnectorShapeType, ConnectorPlacementType, ConnectorLabelPlacementType } from '../enums';\n/**\n * @class ConnectorAnnotationConfig\n * @classdesc  Connector annotation configuration object. Connector annotations draws lines between two nodes of the diagram.\n * They are drawn on top of existing diagram layout and they don't affect nodes placement. So it is users responsibility to\n * preserve space between nodes for them. \n *\n * @param {object} arg0 Object properties.\n */\n\nexport default function ConnectorAnnotationConfig(arg0, arg1) {\n  var property;\n  /**\n   * Annotation type. All types of annotations objects are added to `annotations` collection property of the control.\n   * This property is needed to distinguish them when they are defined as JSON objects.\n   * \n   * @type {AnnotationType}\n   */\n\n  this.annotationType = AnnotationType.Connector;\n  /**\n   * Sets annotation Z order placement relative to the diagram items. Diagram visual elements are drawn in layers on top of each other.\n   * If you place annotations over diagram nodes then you block mouse events of UI elements in their templates.\n   * Browsers don't support mouse events transparency consistently yet. So in order to avoid mouse events blocking of UI elements in item\n   * templates you have to place annotation items under them or explicitly define maximum zindex for controls and make them rendered on top\n   * of other visual elements. The control takes this into account and renders buttons panel on top of everything,\n   * so they are never blocked by annotations drawn in front of diagram nodes.\n   * \n   * @type {ZOrderType}\n   */\n\n  this.zOrderType = ZOrderType.Foreground;\n  /**\n   * The start node of connection line\n   * \n   * @type {string}\n   */\n\n  this.fromItem = null;\n  /**\n   * The end node of connection line\n   * \n   * @type {string}\n   */\n\n  this.toItem = null;\n  /**\n   * Connector shape type defines number of lines and arrows at their ends drawn between nodes of the connector annotation.\n   * This feature combined with basic conflict resolution, which places overlapping annotations in parallel when they overlap each other,\n   * gives you full flexibility over variations of possible connector lines between two given nodes of diagram.\n   * \n   * @type {ConnectorShapeType}\n   */\n\n  this.connectorShapeType = ConnectorShapeType.OneWay;\n  /**\n   * Connector placement type defines style of connector line drawing over diagram layout. It supports two options: \n   * the `Straight` is classic direct line connecting two nodes, this is the most expected style of connector annotation\n   * drawing over diagram, the second style is called `Offbeat` and it is designed to dynamically adopt to nodes mutual \n   * location and gap between them. It uses free hand line style drawing going from start to the end node. Since every diagram \n   * is packed with various connection lines, this annotation placement style is deliberately made not straight, so it can be \n   * noticeable on top of other lines of the diagram.\n   * \n   * @type {ConnectorPlacementType}\n   */\n\n  this.connectorPlacementType = ConnectorPlacementType.Offbeat;\n  /**\n   * Label placement relative to connector annotation. Connector annotation is bound and drawn between two nodes\n   * defined by two properties: `fromItem` and `toItem`. Label can be placed close to \"start\", \"end\" nodes or in between of them\n   * along the connector line. \n   * \n   * @type {ConnectorLabelPlacementType}\n   */\n\n  this.labelPlacementType = ConnectorLabelPlacementType.Between;\n  /**\n   * Connector line end points offset. By default connection lines start from the margin of the node's rectangle.\n   * If offset is positive then start point goes from outside of the rectangle, if it is negative then it starts from inside of the nodes rectangle.\n   * \n   * @type {Thickness}\n   */\n\n  this.offset = new Thickness(0, 0, 0, 0);\n  /**\n   * Border line width.\n   * \n   * @type {number}\n   */\n\n  this.lineWidth = 2;\n  /**\n   * Color\n   * \n   * @type {string}\n   */\n\n  this.color = Colors.Black;\n  /**\n   * Line pattern\n   * \n   * @type {LineType}\n   */\n\n  this.lineType = LineType.Solid;\n  /**\n   * If true then annotated nodes are shown full size regardless of controls auto fit mode and available screen space.\n   * @type {boolean}\n   */\n\n  this.selectItems = true;\n  /**\n   * Label. Label styled with css class name \"bp-connector-label\".\n   * @type {string}\n   */\n\n  this.label = null;\n  /**\n   * Label size\n   * @type {Size}\n   */\n\n  this.labelSize = new Size(60, 30);\n\n  switch (arguments.length) {\n    case 1:\n      for (property in arg0) {\n        if (arg0.hasOwnProperty(property)) {\n          this[property] = arg0[property];\n        }\n      }\n\n      break;\n\n    case 2:\n      this.fromItem = arg0;\n      this.toItem = arg1;\n      break;\n  }\n}\n;","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/configs/ConnectorAnnotationConfig.js"],"names":["Thickness","Size","AnnotationType","LineType","Colors","ZOrderType","ConnectorShapeType","ConnectorPlacementType","ConnectorLabelPlacementType","ConnectorAnnotationConfig","arg0","arg1","property","annotationType","Connector","zOrderType","Foreground","fromItem","toItem","connectorShapeType","OneWay","connectorPlacementType","Offbeat","labelPlacementType","Between","offset","lineWidth","color","Black","lineType","Solid","selectItems","label","labelSize","arguments","length","hasOwnProperty"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,+BAAtB;AACA,OAAOC,IAAP,MAAiB,0BAAjB;AACA,SAAQC,cAAR,EAAwBC,QAAxB,EAAkCC,MAAlC,EAA0CC,UAA1C,EAAsDC,kBAAtD,EACEC,sBADF,EAC0BC,2BAD1B,QAC6D,UAD7D;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,yBAAT,CAAmCC,IAAnC,EAAyCC,IAAzC,EAA+C;AAC5D,MAAIC,QAAJ;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,cAAL,GAAsBX,cAAc,CAACY,SAArC;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,UAAL,GAAkBV,UAAU,CAACW,UAA7B;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKC,QAAL,GAAgB,IAAhB;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKC,MAAL,GAAc,IAAd;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,kBAAL,GAA0Bb,kBAAkB,CAACc,MAA7C;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,sBAAL,GAA8Bd,sBAAsB,CAACe,OAArD;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,kBAAL,GAA0Bf,2BAA2B,CAACgB,OAAtD;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,MAAL,GAAc,IAAIzB,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,CAAd;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAK0B,SAAL,GAAiB,CAAjB;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKC,KAAL,GAAavB,MAAM,CAACwB,KAApB;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKC,QAAL,GAAgB1B,QAAQ,CAAC2B,KAAzB;AAEA;AACF;AACA;AACA;;AACE,OAAKC,WAAL,GAAmB,IAAnB;AAEA;AACF;AACA;AACA;;AACE,OAAKC,KAAL,GAAa,IAAb;AAEA;AACF;AACA;AACA;;AACE,OAAKC,SAAL,GAAiB,IAAIhC,IAAJ,CAAS,EAAT,EAAa,EAAb,CAAjB;;AAEA,UAAQiC,SAAS,CAACC,MAAlB;AACE,SAAK,CAAL;AACE,WAAKvB,QAAL,IAAiBF,IAAjB,EAAuB;AACrB,YAAIA,IAAI,CAAC0B,cAAL,CAAoBxB,QAApB,CAAJ,EAAmC;AACjC,eAAKA,QAAL,IAAiBF,IAAI,CAACE,QAAD,CAArB;AACD;AACF;;AACD;;AACF,SAAK,CAAL;AACE,WAAKK,QAAL,GAAgBP,IAAhB;AACA,WAAKQ,MAAL,GAAcP,IAAd;AACA;AAXJ;AAaD;AAAA","sourcesContent":["import Thickness from '../graphics/structs/Thickness';\nimport Size from '../graphics/structs/Size';\nimport {AnnotationType, LineType, Colors, ZOrderType, ConnectorShapeType,\n  ConnectorPlacementType, ConnectorLabelPlacementType } from '../enums';\n/**\n * @class ConnectorAnnotationConfig\n * @classdesc  Connector annotation configuration object. Connector annotations draws lines between two nodes of the diagram.\n * They are drawn on top of existing diagram layout and they don't affect nodes placement. So it is users responsibility to\n * preserve space between nodes for them. \n *\n * @param {object} arg0 Object properties.\n */\nexport default function ConnectorAnnotationConfig(arg0, arg1) {\n  var property;\n\n  /**\n   * Annotation type. All types of annotations objects are added to `annotations` collection property of the control.\n   * This property is needed to distinguish them when they are defined as JSON objects.\n   * \n   * @type {AnnotationType}\n   */\n  this.annotationType = AnnotationType.Connector;\n\n  /**\n   * Sets annotation Z order placement relative to the diagram items. Diagram visual elements are drawn in layers on top of each other.\n   * If you place annotations over diagram nodes then you block mouse events of UI elements in their templates.\n   * Browsers don't support mouse events transparency consistently yet. So in order to avoid mouse events blocking of UI elements in item\n   * templates you have to place annotation items under them or explicitly define maximum zindex for controls and make them rendered on top\n   * of other visual elements. The control takes this into account and renders buttons panel on top of everything,\n   * so they are never blocked by annotations drawn in front of diagram nodes.\n   * \n   * @type {ZOrderType}\n   */\n  this.zOrderType = ZOrderType.Foreground;\n\n  /**\n   * The start node of connection line\n   * \n   * @type {string}\n   */\n  this.fromItem = null;\n\n  /**\n   * The end node of connection line\n   * \n   * @type {string}\n   */\n  this.toItem = null;\n\n  /**\n   * Connector shape type defines number of lines and arrows at their ends drawn between nodes of the connector annotation.\n   * This feature combined with basic conflict resolution, which places overlapping annotations in parallel when they overlap each other,\n   * gives you full flexibility over variations of possible connector lines between two given nodes of diagram.\n   * \n   * @type {ConnectorShapeType}\n   */\n  this.connectorShapeType = ConnectorShapeType.OneWay;\n\n  /**\n   * Connector placement type defines style of connector line drawing over diagram layout. It supports two options: \n   * the `Straight` is classic direct line connecting two nodes, this is the most expected style of connector annotation\n   * drawing over diagram, the second style is called `Offbeat` and it is designed to dynamically adopt to nodes mutual \n   * location and gap between them. It uses free hand line style drawing going from start to the end node. Since every diagram \n   * is packed with various connection lines, this annotation placement style is deliberately made not straight, so it can be \n   * noticeable on top of other lines of the diagram.\n   * \n   * @type {ConnectorPlacementType}\n   */\n  this.connectorPlacementType = ConnectorPlacementType.Offbeat;\n\n  /**\n   * Label placement relative to connector annotation. Connector annotation is bound and drawn between two nodes\n   * defined by two properties: `fromItem` and `toItem`. Label can be placed close to \"start\", \"end\" nodes or in between of them\n   * along the connector line. \n   * \n   * @type {ConnectorLabelPlacementType}\n   */\n  this.labelPlacementType = ConnectorLabelPlacementType.Between;\n\n  /**\n   * Connector line end points offset. By default connection lines start from the margin of the node's rectangle.\n   * If offset is positive then start point goes from outside of the rectangle, if it is negative then it starts from inside of the nodes rectangle.\n   * \n   * @type {Thickness}\n   */\n  this.offset = new Thickness(0, 0, 0, 0);\n\n  /**\n   * Border line width.\n   * \n   * @type {number}\n   */\n  this.lineWidth = 2;\n\n  /**\n   * Color\n   * \n   * @type {string}\n   */\n  this.color = Colors.Black;\n\n  /**\n   * Line pattern\n   * \n   * @type {LineType}\n   */\n  this.lineType = LineType.Solid;\n\n  /**\n   * If true then annotated nodes are shown full size regardless of controls auto fit mode and available screen space.\n   * @type {boolean}\n   */\n  this.selectItems = true;\n\n  /**\n   * Label. Label styled with css class name \"bp-connector-label\".\n   * @type {string}\n   */\n  this.label = null;\n\n  /**\n   * Label size\n   * @type {Size}\n   */\n  this.labelSize = new Size(60, 30);\n\n  switch (arguments.length) {\n    case 1:\n      for (property in arg0) {\n        if (arg0.hasOwnProperty(property)) {\n          this[property] = arg0[property];\n        }\n      }\n      break;\n    case 2:\n      this.fromItem = arg0;\n      this.toItem = arg1;\n      break;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}