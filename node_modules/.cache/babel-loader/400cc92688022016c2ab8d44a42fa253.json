{"ast":null,"code":"import { OrientationType } from '../enums';\nimport Thickness from './structs/Thickness';\nexport default function Transform() {\n  this.invertArea = false;\n  this.invertHorizontally = false;\n  this.invertVertically = false;\n  this.size = null;\n}\n;\n\nTransform.prototype.setOrientation = function (orientationType) {\n  switch (orientationType) {\n    case OrientationType.Top:\n      this.invertArea = false;\n      this.invertHorizontally = false;\n      this.invertVertically = false;\n      break;\n\n    case OrientationType.Bottom:\n      this.invertArea = false;\n      this.invertHorizontally = false;\n      this.invertVertically = true;\n      break;\n\n    case OrientationType.Left:\n      this.invertArea = true;\n      this.invertHorizontally = false;\n      this.invertVertically = false;\n      break;\n\n    case OrientationType.Right:\n      this.invertArea = true;\n      this.invertHorizontally = true;\n      this.invertVertically = false;\n      break;\n  }\n};\n\nTransform.prototype.getOrientation = function (orientationType) {\n  var result = orientationType;\n\n  if (this.invertHorizontally) {\n    switch (orientationType) {\n      case OrientationType.Left:\n        result = OrientationType.Right;\n        break;\n\n      case OrientationType.Right:\n        result = OrientationType.Left;\n        break;\n    }\n  }\n\n  if (this.invertVertically) {\n    switch (orientationType) {\n      case OrientationType.Top:\n        result = OrientationType.Bottom;\n        break;\n\n      case OrientationType.Bottom:\n        result = OrientationType.Top;\n        break;\n    }\n  }\n\n  if (this.invertArea) {\n    switch (result) {\n      case OrientationType.Top:\n        result = OrientationType.Left;\n        break;\n\n      case OrientationType.Bottom:\n        result = OrientationType.Right;\n        break;\n\n      case OrientationType.Left:\n        result = OrientationType.Top;\n        break;\n\n      case OrientationType.Right:\n        result = OrientationType.Bottom;\n        break;\n    }\n  }\n\n  return result;\n};\n\nTransform.prototype.transformPoint = function (x, y, forward, self, func) {\n  var value;\n\n  if (forward) {\n    if (this.invertArea) {\n      value = x;\n      x = y;\n      y = value;\n    }\n  }\n\n  if (this.invertHorizontally) {\n    x = this.size.width - x;\n  }\n\n  if (this.invertVertically) {\n    y = this.size.height - y;\n  }\n\n  if (!forward) {\n    if (this.invertArea) {\n      value = x;\n      x = y;\n      y = value;\n    }\n  }\n\n  func.call(self, x, y);\n};\n\nTransform.prototype.transformPoints = function (x, y, x2, y2, forward, self, func) {\n  var value;\n\n  if (forward) {\n    if (this.invertArea) {\n      value = x;\n      x = y;\n      y = value;\n      value = x2;\n      x2 = y2;\n      y2 = value;\n    }\n  }\n\n  if (this.invertHorizontally) {\n    x = this.size.width - x;\n    x2 = this.size.width - x2;\n  }\n\n  if (this.invertVertically) {\n    y = this.size.height - y;\n    y2 = this.size.height - y2;\n  }\n\n  if (!forward) {\n    if (this.invertArea) {\n      value = x;\n      x = y;\n      y = value;\n      value = x2;\n      x2 = y2;\n      y2 = value;\n    }\n  }\n\n  func.call(self, x, y, x2, y2);\n};\n\nTransform.prototype.transform3Points = function (x, y, x2, y2, x3, y3, forward, self, func) {\n  var value;\n\n  if (forward) {\n    if (this.invertArea) {\n      value = x;\n      x = y;\n      y = value;\n      value = x2;\n      x2 = y2;\n      y2 = value;\n      value = x3;\n      x3 = y3;\n      y3 = value;\n    }\n  }\n\n  if (this.invertHorizontally) {\n    x = this.size.width - x;\n    x2 = this.size.width - x2;\n    x3 = this.size.width - x3;\n  }\n\n  if (this.invertVertically) {\n    y = this.size.height - y;\n    y2 = this.size.height - y2;\n    y3 = this.size.height - y3;\n  }\n\n  if (!forward) {\n    if (this.invertArea) {\n      value = x;\n      x = y;\n      y = value;\n      value = x2;\n      x2 = y2;\n      y2 = value;\n      value = x3;\n      x3 = y3;\n      y3 = value;\n    }\n  }\n\n  func.call(self, x, y, x2, y2, x3, y3);\n};\n\nTransform.prototype.transformRect = function (x, y, width, height, forward, self, func) {\n  var value;\n\n  if (forward) {\n    if (this.invertArea) {\n      value = x;\n      x = y;\n      y = value;\n      value = width;\n      width = height;\n      height = value;\n    }\n  }\n\n  if (this.invertHorizontally) {\n    x = this.size.width - x - width;\n  }\n\n  if (this.invertVertically) {\n    y = this.size.height - y - height;\n  }\n\n  if (!forward) {\n    if (this.invertArea) {\n      value = x;\n      x = y;\n      y = value;\n      value = width;\n      width = height;\n      height = value;\n    }\n  }\n\n  func.call(self, x, y, width, height);\n};\n\nTransform.prototype.transformThickness = function (thickness, forward) {\n  var value,\n      left = thickness.left,\n      right = thickness.right,\n      top = thickness.top,\n      bottom = thickness.bottom;\n\n  if (forward) {\n    if (this.invertArea) {\n      value = left;\n      left = top;\n      top = value;\n      value = right;\n      right = bottom;\n      bottom = value;\n    }\n  }\n\n  if (this.invertHorizontally) {\n    value = left;\n    left = right;\n    right = value;\n  }\n\n  if (this.invertVertically) {\n    value = top;\n    top = bottom;\n    bottom = value;\n  }\n\n  if (!forward) {\n    if (this.invertArea) {\n      value = left;\n      left = top;\n      top = value;\n      value = right;\n      right = bottom;\n      bottom = value;\n    }\n  }\n\n  return new Thickness(left, top, right, bottom);\n};","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/graphics/Transform.js"],"names":["OrientationType","Thickness","Transform","invertArea","invertHorizontally","invertVertically","size","prototype","setOrientation","orientationType","Top","Bottom","Left","Right","getOrientation","result","transformPoint","x","y","forward","self","func","value","width","height","call","transformPoints","x2","y2","transform3Points","x3","y3","transformRect","transformThickness","thickness","left","right","top","bottom"],"mappings":"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","sourcesContent":["import { OrientationType } from '../enums';\nimport Thickness from './structs/Thickness';\n\nexport default function Transform() {\n  this.invertArea = false;\n  this.invertHorizontally = false;\n  this.invertVertically = false;\n\n  this.size = null;\n};\n\nTransform.prototype.setOrientation = function (orientationType) {\n  switch (orientationType) {\n    case OrientationType.Top:\n      this.invertArea = false;\n      this.invertHorizontally = false;\n      this.invertVertically = false;\n      break;\n    case OrientationType.Bottom:\n      this.invertArea = false;\n      this.invertHorizontally = false;\n      this.invertVertically = true;\n      break;\n    case OrientationType.Left:\n      this.invertArea = true;\n      this.invertHorizontally = false;\n      this.invertVertically = false;\n      break;\n    case OrientationType.Right:\n      this.invertArea = true;\n      this.invertHorizontally = true;\n      this.invertVertically = false;\n      break;\n  }\n};\n\nTransform.prototype.getOrientation = function (orientationType) {\n  var result = orientationType;\n  if (this.invertHorizontally) {\n    switch (orientationType) {\n      case OrientationType.Left:\n        result = OrientationType.Right;\n        break;\n      case OrientationType.Right:\n        result = OrientationType.Left;\n        break;\n    }\n  }\n\n  if (this.invertVertically) {\n    switch (orientationType) {\n      case OrientationType.Top:\n        result = OrientationType.Bottom;\n        break;\n      case OrientationType.Bottom:\n        result = OrientationType.Top;\n        break;\n    }\n  }\n\n\n  if (this.invertArea) {\n    switch (result) {\n      case OrientationType.Top:\n        result = OrientationType.Left;\n        break;\n      case OrientationType.Bottom:\n        result = OrientationType.Right;\n        break;\n      case OrientationType.Left:\n        result = OrientationType.Top;\n        break;\n      case OrientationType.Right:\n        result = OrientationType.Bottom;\n        break;\n    }\n  }\n\n  return result;\n};\n\nTransform.prototype.transformPoint = function (x, y, forward, self, func) {\n  var value;\n\n  if (forward) {\n    if (this.invertArea) {\n      value = x;\n      x = y;\n      y = value;\n    }\n  }\n\n  if (this.invertHorizontally) {\n    x = this.size.width - x;\n  }\n  if (this.invertVertically) {\n    y = this.size.height - y;\n  }\n\n  if (!forward) {\n    if (this.invertArea) {\n      value = x;\n      x = y;\n      y = value;\n    }\n  }\n\n  func.call(self, x, y);\n};\n\nTransform.prototype.transformPoints = function (x, y, x2, y2, forward, self, func) {\n  var value;\n\n  if (forward) {\n    if (this.invertArea) {\n      value = x;\n      x = y;\n      y = value;\n      value = x2;\n      x2 = y2;\n      y2 = value;\n    }\n  }\n\n  if (this.invertHorizontally) {\n    x = this.size.width - x;\n    x2 = this.size.width - x2;\n  }\n\n  if (this.invertVertically) {\n    y = this.size.height - y;\n    y2 = this.size.height - y2;\n  }\n\n  if (!forward) {\n    if (this.invertArea) {\n      value = x;\n      x = y;\n      y = value;\n      value = x2;\n      x2 = y2;\n      y2 = value;\n    }\n  }\n\n  func.call(self, x, y, x2, y2);\n};\n\nTransform.prototype.transform3Points = function (x, y, x2, y2, x3, y3, forward, self, func) {\n  var value;\n\n  if (forward) {\n    if (this.invertArea) {\n      value = x;\n      x = y;\n      y = value;\n      value = x2;\n      x2 = y2;\n      y2 = value;\n      value = x3;\n      x3 = y3;\n      y3 = value;\n    }\n  }\n\n  if (this.invertHorizontally) {\n    x = this.size.width - x;\n    x2 = this.size.width - x2;\n    x3 = this.size.width - x3;\n  }\n  if (this.invertVertically) {\n    y = this.size.height - y;\n    y2 = this.size.height - y2;\n    y3 = this.size.height - y3;\n  }\n\n  if (!forward) {\n    if (this.invertArea) {\n      value = x;\n      x = y;\n      y = value;\n      value = x2;\n      x2 = y2;\n      y2 = value;\n      value = x3;\n      x3 = y3;\n      y3 = value;\n    }\n  }\n\n  func.call(self, x, y, x2, y2, x3, y3);\n};\n\nTransform.prototype.transformRect = function (x, y, width, height, forward, self, func) {\n  var value;\n\n  if (forward) {\n    if (this.invertArea) {\n      value = x;\n      x = y;\n      y = value;\n      value = width;\n      width = height;\n      height = value;\n    }\n  }\n\n  if (this.invertHorizontally) {\n    x = this.size.width - x - width;\n  }\n  if (this.invertVertically) {\n    y = this.size.height - y - height;\n  }\n\n  if (!forward) {\n    if (this.invertArea) {\n      value = x;\n      x = y;\n      y = value;\n      value = width;\n      width = height;\n      height = value;\n    }\n  }\n\n  func.call(self, x, y, width, height);\n};\n\nTransform.prototype.transformThickness = function (thickness, forward) {\n  var value,\n    {left, right, top, bottom } = thickness;\n\n  if (forward) {\n    if (this.invertArea) {\n      value = left;\n      left = top;\n      top = value;\n      value = right;\n      right = bottom;\n      bottom = value;\n    }\n  }\n\n  if (this.invertHorizontally) {\n    value = left;\n    left = right;\n    right = value;\n  }\n  if (this.invertVertically) {\n    value = top;\n    top = bottom;\n    bottom = value;\n  }\n\n  if (!forward) {\n    if (this.invertArea) {\n      value = left;\n      left = top;\n      top = value;\n      value = right;\n      right = bottom;\n      bottom = value;\n    }\n  }\n\n  return new Thickness(left, top, right, bottom);\n};\n"]},"metadata":{},"sourceType":"module"}