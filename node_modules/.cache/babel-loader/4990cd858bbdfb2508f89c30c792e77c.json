{"ast":null,"code":"import { Visibility } from '../enums';\nexport default function TreeLevelPosition(source) {\n  this.currentvisibility = Visibility.Normal;\n  this.actualVisibility = Visibility.Normal;\n  this.shift = 0.0;\n  /* top abolute position of items in level */\n\n  this.depth = 0.0;\n  /* maximum  height of items in level */\n\n  this.nextLevelShift = 0.0;\n  /* next level relative position */\n\n  this.horizontalConnectorsDepth = 0;\n  /* relative position of horizontal connectors between items */\n\n  this.topConnectorShift = 0.0;\n  /* relative position of top connector horizontal line */\n\n  this.connectorShift = 0.0;\n  /* relative position of bottom horizontal line */\n\n  this.levelSpace = 0.0;\n  /* user interval between prev level and this one based on options set by user, if number of horizontal connections is bigger that one it is proportionally increased */\n\n  this.currentOffset = 0.0;\n  /* this is x axis coordinate offset, it used to calculate horizontal items position in level */\n\n  this.labels = [];\n  this.labelsRect = null;\n  this.showLabels = true;\n  this.hasFixedLabels = false;\n\n  if (source != null) {\n    for (var property in source) {\n      if (source.hasOwnProperty(property)) {\n        this[property] = source[property];\n      }\n    }\n  }\n}\n;\n\nTreeLevelPosition.prototype.setShift = function (shift, levelSpace, topConnectorSpace, connectorSpace, partnerConnectorOffset) {\n  this.shift = shift;\n  this.levelSpace = levelSpace;\n  this.topConnectorShift = -levelSpace / 2.0 - topConnectorSpace;\n  this.connectorShift = this.depth + connectorSpace + (partnerConnectorOffset + 1) * (levelSpace / 2.0);\n  this.nextLevelShift = topConnectorSpace + this.depth + connectorSpace + levelSpace + partnerConnectorOffset * levelSpace / 2.0;\n  return this.nextLevelShift;\n};\n\nTreeLevelPosition.prototype.shiftDown = function (shift) {\n  this.shift += shift;\n};\n\nTreeLevelPosition.prototype.toString = function () {\n  return this.currentvisibility;\n};","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/models/TreeLevelPosition.js"],"names":["Visibility","TreeLevelPosition","source","currentvisibility","Normal","actualVisibility","shift","depth","nextLevelShift","horizontalConnectorsDepth","topConnectorShift","connectorShift","levelSpace","currentOffset","labels","labelsRect","showLabels","hasFixedLabels","property","hasOwnProperty","prototype","setShift","topConnectorSpace","connectorSpace","partnerConnectorOffset","shiftDown","toString"],"mappings":"AAAA,SAASA,UAAT,QAA2B,UAA3B;AAEA,eAAe,SAASC,iBAAT,CAA2BC,MAA3B,EAAmC;AAChD,OAAKC,iBAAL,GAAyBH,UAAU,CAACI,MAApC;AACA,OAAKC,gBAAL,GAAwBL,UAAU,CAACI,MAAnC;AAEA,OAAKE,KAAL,GAAa,GAAb;AAAkB;;AAClB,OAAKC,KAAL,GAAa,GAAb;AAAkB;;AAClB,OAAKC,cAAL,GAAsB,GAAtB;AAA2B;;AAC3B,OAAKC,yBAAL,GAAiC,CAAjC;AAAoC;;AACpC,OAAKC,iBAAL,GAAyB,GAAzB;AAA8B;;AAC9B,OAAKC,cAAL,GAAsB,GAAtB;AAA2B;;AAC3B,OAAKC,UAAL,GAAkB,GAAlB;AAAuB;;AAEvB,OAAKC,aAAL,GAAqB,GAArB;AAA0B;;AAE1B,OAAKC,MAAL,GAAc,EAAd;AACA,OAAKC,UAAL,GAAkB,IAAlB;AACA,OAAKC,UAAL,GAAkB,IAAlB;AACA,OAAKC,cAAL,GAAsB,KAAtB;;AAEA,MAAIf,MAAM,IAAI,IAAd,EAAoB;AAClB,SAAK,IAAIgB,QAAT,IAAqBhB,MAArB,EAA6B;AAC3B,UAAIA,MAAM,CAACiB,cAAP,CAAsBD,QAAtB,CAAJ,EAAqC;AACnC,aAAKA,QAAL,IAAiBhB,MAAM,CAACgB,QAAD,CAAvB;AACD;AACF;AACF;AACF;AAAA;;AAEDjB,iBAAiB,CAACmB,SAAlB,CAA4BC,QAA5B,GAAuC,UAAUf,KAAV,EAAiBM,UAAjB,EAA6BU,iBAA7B,EAAgDC,cAAhD,EAAgEC,sBAAhE,EAAwF;AAC7H,OAAKlB,KAAL,GAAaA,KAAb;AACA,OAAKM,UAAL,GAAkBA,UAAlB;AAEA,OAAKF,iBAAL,GAAyB,CAACE,UAAD,GAAc,GAAd,GAAoBU,iBAA7C;AACA,OAAKX,cAAL,GAAsB,KAAKJ,KAAL,GAAagB,cAAb,GAA8B,CAACC,sBAAsB,GAAG,CAA1B,KAAgCZ,UAAU,GAAG,GAA7C,CAApD;AACA,OAAKJ,cAAL,GAAsBc,iBAAiB,GAAG,KAAKf,KAAzB,GAAiCgB,cAAjC,GAAkDX,UAAlD,GAA+DY,sBAAsB,GAAGZ,UAAzB,GAAsC,GAA3H;AAEA,SAAO,KAAKJ,cAAZ;AACD,CATD;;AAWAP,iBAAiB,CAACmB,SAAlB,CAA4BK,SAA5B,GAAwC,UAAUnB,KAAV,EAAiB;AACvD,OAAKA,KAAL,IAAcA,KAAd;AACD,CAFD;;AAIAL,iBAAiB,CAACmB,SAAlB,CAA4BM,QAA5B,GAAuC,YAAY;AACjD,SAAO,KAAKvB,iBAAZ;AACD,CAFD","sourcesContent":["import { Visibility } from '../enums';\n\nexport default function TreeLevelPosition(source) {\n  this.currentvisibility = Visibility.Normal;\n  this.actualVisibility = Visibility.Normal;\n\n  this.shift = 0.0; /* top abolute position of items in level */\n  this.depth = 0.0; /* maximum  height of items in level */\n  this.nextLevelShift = 0.0; /* next level relative position */\n  this.horizontalConnectorsDepth = 0; /* relative position of horizontal connectors between items */\n  this.topConnectorShift = 0.0; /* relative position of top connector horizontal line */\n  this.connectorShift = 0.0; /* relative position of bottom horizontal line */\n  this.levelSpace = 0.0; /* user interval between prev level and this one based on options set by user, if number of horizontal connections is bigger that one it is proportionally increased */\n\n  this.currentOffset = 0.0; /* this is x axis coordinate offset, it used to calculate horizontal items position in level */\n\n  this.labels = [];\n  this.labelsRect = null;\n  this.showLabels = true;\n  this.hasFixedLabels = false;\n\n  if (source != null) {\n    for (var property in source) {\n      if (source.hasOwnProperty(property)) {\n        this[property] = source[property];\n      }\n    }\n  }\n};\n\nTreeLevelPosition.prototype.setShift = function (shift, levelSpace, topConnectorSpace, connectorSpace, partnerConnectorOffset) {\n  this.shift = shift;\n  this.levelSpace = levelSpace;\n\n  this.topConnectorShift = -levelSpace / 2.0 - topConnectorSpace;\n  this.connectorShift = this.depth + connectorSpace + (partnerConnectorOffset + 1) * (levelSpace / 2.0);\n  this.nextLevelShift = topConnectorSpace + this.depth + connectorSpace + levelSpace + partnerConnectorOffset * levelSpace / 2.0;\n\n  return this.nextLevelShift;\n};\n\nTreeLevelPosition.prototype.shiftDown = function (shift) {\n  this.shift += shift;\n};\n\nTreeLevelPosition.prototype.toString = function () {\n  return this.currentvisibility;\n};"]},"metadata":{},"sourceType":"module"}