{"ast":null,"code":"import Point from '../../graphics/structs/Point';\nimport Size from '../../graphics/structs/Size';\nimport Rect from '../../graphics/structs/Rect';\nimport RenderEventArgs from '../../events/RenderEventArgs';\nimport { Layers, Visibility, AdviserPlacementType } from '../../enums';\nexport default function DrawTreeItemsTask(getGraphics, createTransformTask, applyLayoutChangesTask, scaleOptionTask, itemsSizesOptionTask, combinedContextsTask, alignDiagramTask, centerOnCursorTask, itemTemplateParamsTask, cursorItemTask, selectedItemsTask, groupTitleTemplateTask, checkBoxTemplateTask, buttonsTemplateTask) {\n  var _positions, _graphics, _transform, _itemsSizesOptions, _buttonsTemplate, _checkBoxTemplate, _groupTitleTemplate;\n\n  function process() {\n    _graphics = getGraphics();\n    _itemsSizesOptions = itemsSizesOptionTask.getOptions();\n    _positions = alignDiagramTask.getItemsPositions();\n    _transform = createTransformTask.getTransform();\n    _buttonsTemplate = buttonsTemplateTask.getTemplate();\n    _checkBoxTemplate = checkBoxTemplateTask.getTemplate();\n    _groupTitleTemplate = groupTitleTemplateTask.getTemplate();\n\n    _graphics.reset(\"placeholder\", Layers.Item);\n\n    _graphics.reset(\"placeholder\", Layers.Controls);\n\n    redrawTreeItems();\n    return false;\n  }\n\n  function redrawTreeItems() {\n    var uiHash,\n        element,\n        cursorItemId = cursorItemTask.getCursorTreeItem(),\n        treeItemPosition,\n        actualPosition,\n        viewPortPosition = getViewPortPosition();\n\n    for (var treeItemId in _positions) {\n      if (_positions.hasOwnProperty(treeItemId)) {\n        treeItemPosition = _positions[treeItemId], actualPosition = treeItemPosition.actualPosition;\n\n        if (treeItemPosition.actualVisibility == Visibility.Normal) {\n          _transform.transformRect(actualPosition.x, actualPosition.y, actualPosition.width, actualPosition.height, true, this, function (x, y, width, height) {\n            var nodePosition = new Rect(x, y, width, height);\n\n            if (viewPortPosition == null || viewPortPosition.overlaps(nodePosition)) {\n              var templateParams = itemTemplateParamsTask.getTemplateParams(treeItemId),\n                  template = templateParams.template;\n              uiHash = new RenderEventArgs();\n              uiHash.id = treeItemId;\n              uiHash.context = combinedContextsTask.getConfig(treeItemId);\n              uiHash.isCursor = treeItemId == cursorItemId;\n              uiHash.isSelected = selectedItemsTask.isSelected(treeItemId);\n              uiHash.templateName = template.templateConfig.name;\n              uiHash.template = templateParams.template;\n              uiHash.isActive = templateParams.isActive;\n              uiHash.hasSelectorCheckbox = templateParams.hasSelectorCheckbox;\n              uiHash.hasButtons = templateParams.hasButtons;\n              uiHash.hasGroupTitle = templateParams.hasGroupTitle;\n              uiHash.onButtonsRender = templateParams.onButtonsRender;\n\n              _graphics.activate(\"placeholder\", Layers.Item);\n\n              element = _graphics.template(x, y, width, height, treeItemPosition.contentPosition.x, treeItemPosition.contentPosition.y, treeItemPosition.contentPosition.width, treeItemPosition.contentPosition.height, template.itemTemplate.template(), template.itemTemplate.getHashCode(), template.itemTemplate.render, uiHash, {\n                \"borderWidth\": template.templateConfig.itemBorderWidth\n              });\n\n              if (templateParams.hasGroupTitle) {\n                var groupTitlePosition = 0;\n\n                switch (_itemsSizesOptions.groupTitlePlacementType) {\n                  case AdviserPlacementType.Left:\n                  case AdviserPlacementType.Auto:\n                    groupTitlePosition = 2;\n                    break;\n\n                  case AdviserPlacementType.Right:\n                    groupTitlePosition = width - (_itemsSizesOptions.groupTitlePanelSize - 4);\n                    break;\n\n                  default:\n                }\n\n                element = _graphics.template(x, y, width, height, groupTitlePosition, treeItemPosition.contentPosition.y, _itemsSizesOptions.groupTitlePanelSize - 4, treeItemPosition.contentPosition.height + 2, _groupTitleTemplate.template(), _groupTitleTemplate.getHashCode(), _groupTitleTemplate.render, uiHash, null);\n              }\n\n              if (templateParams.hasSelectorCheckbox) {\n                _graphics.activate(\"placeholder\", Layers.Controls);\n\n                element = _graphics.template(x, y, width, height, treeItemPosition.contentPosition.x, height - (_itemsSizesOptions.checkBoxPanelSize - 4), treeItemPosition.contentPosition.width, _itemsSizesOptions.checkBoxPanelSize - 4, _checkBoxTemplate.template(), _checkBoxTemplate.getHashCode(), _checkBoxTemplate.render, uiHash, null);\n              }\n\n              if (templateParams.hasButtons) {\n                _graphics.activate(\"placeholder\", Layers.Controls);\n\n                var buttonsPanelPosition = 0;\n\n                switch (_itemsSizesOptions.groupTitlePlacementType) {\n                  case AdviserPlacementType.Left:\n                  case AdviserPlacementType.Auto:\n                    buttonsPanelPosition = width - (_itemsSizesOptions.buttonsPanelSize - 4);\n                    break;\n\n                  case AdviserPlacementType.Right:\n                    buttonsPanelPosition = 2;\n                    break;\n\n                  default:\n                }\n\n                element = _graphics.template(x, y, width, height, buttonsPanelPosition, treeItemPosition.contentPosition.y, _itemsSizesOptions.buttonsPanelSize - 4, Math.max(treeItemPosition.contentPosition.height, height - treeItemPosition.contentPosition.y), _buttonsTemplate.template(), template.templateConfig.name + _buttonsTemplate.getHashCode(), _buttonsTemplate.render, uiHash, null);\n              }\n            }\n          }); //ignore jslint\n\n        }\n      }\n    }\n  }\n\n  function getViewPortPosition() {\n    var result = null;\n\n    if (centerOnCursorTask != null) {\n      var scaleOptions = scaleOptionTask.getOptions(),\n          scale = scaleOptions.scale,\n          placeholderOffset = new Point(centerOnCursorTask.getPlaceholderOffset()),\n          panelSize = new Rect(alignDiagramTask.getContentSize()),\n          optimalPanelSize = new Size(applyLayoutChangesTask.getOptimalPanelSize());\n      placeholderOffset.scale(1.0 / scale);\n      optimalPanelSize.scale(1.0 / scale);\n      result = new Rect(placeholderOffset.x, placeholderOffset.y, Math.min(optimalPanelSize.width, panelSize.width), Math.min(optimalPanelSize.height, panelSize.height));\n    }\n\n    return result;\n  }\n\n  return {\n    process: process\n  };\n}\n;","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/tasks/renders/DrawTreeItemsTask.js"],"names":["Point","Size","Rect","RenderEventArgs","Layers","Visibility","AdviserPlacementType","DrawTreeItemsTask","getGraphics","createTransformTask","applyLayoutChangesTask","scaleOptionTask","itemsSizesOptionTask","combinedContextsTask","alignDiagramTask","centerOnCursorTask","itemTemplateParamsTask","cursorItemTask","selectedItemsTask","groupTitleTemplateTask","checkBoxTemplateTask","buttonsTemplateTask","_positions","_graphics","_transform","_itemsSizesOptions","_buttonsTemplate","_checkBoxTemplate","_groupTitleTemplate","process","getOptions","getItemsPositions","getTransform","getTemplate","reset","Item","Controls","redrawTreeItems","uiHash","element","cursorItemId","getCursorTreeItem","treeItemPosition","actualPosition","viewPortPosition","getViewPortPosition","treeItemId","hasOwnProperty","actualVisibility","Normal","transformRect","x","y","width","height","nodePosition","overlaps","templateParams","getTemplateParams","template","id","context","getConfig","isCursor","isSelected","templateName","templateConfig","name","isActive","hasSelectorCheckbox","hasButtons","hasGroupTitle","onButtonsRender","activate","contentPosition","itemTemplate","getHashCode","render","itemBorderWidth","groupTitlePosition","groupTitlePlacementType","Left","Auto","Right","groupTitlePanelSize","checkBoxPanelSize","buttonsPanelPosition","buttonsPanelSize","Math","max","result","scaleOptions","scale","placeholderOffset","getPlaceholderOffset","panelSize","getContentSize","optimalPanelSize","getOptimalPanelSize","min"],"mappings":"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","sourcesContent":["import Point from '../../graphics/structs/Point';\nimport Size from '../../graphics/structs/Size';\nimport Rect from '../../graphics/structs/Rect';\nimport RenderEventArgs from '../../events/RenderEventArgs';\nimport { Layers, Visibility, AdviserPlacementType } from '../../enums';\n\nexport default function DrawTreeItemsTask(getGraphics, createTransformTask, applyLayoutChangesTask, scaleOptionTask,\n  itemsSizesOptionTask,\n  combinedContextsTask,\n  alignDiagramTask, centerOnCursorTask,\n  itemTemplateParamsTask,\n  cursorItemTask, selectedItemsTask,\n  groupTitleTemplateTask, checkBoxTemplateTask, buttonsTemplateTask) {\n\n  var _positions,\n    _graphics,\n    _transform,\n    _itemsSizesOptions,\n\n    _buttonsTemplate,\n    _checkBoxTemplate,\n    _groupTitleTemplate;\n\n  function process() {\n    _graphics = getGraphics();\n\n    _itemsSizesOptions = itemsSizesOptionTask.getOptions();\n    _positions = alignDiagramTask.getItemsPositions();\n    _transform = createTransformTask.getTransform();\n\n    _buttonsTemplate = buttonsTemplateTask.getTemplate();\n    _checkBoxTemplate = checkBoxTemplateTask.getTemplate();\n    _groupTitleTemplate = groupTitleTemplateTask.getTemplate();\n\n    _graphics.reset(\"placeholder\", Layers.Item);\n    _graphics.reset(\"placeholder\", Layers.Controls);\n\n    redrawTreeItems();\n\n    return false;\n  }\n\n  function redrawTreeItems() {\n    var uiHash,\n      element,\n      cursorItemId = cursorItemTask.getCursorTreeItem(),\n      treeItemPosition,\n      actualPosition,\n      viewPortPosition = getViewPortPosition();\n\n    for (var treeItemId in _positions) {\n      if (_positions.hasOwnProperty(treeItemId)) {\n        treeItemPosition = _positions[treeItemId],\n        actualPosition = treeItemPosition.actualPosition;\n        if (treeItemPosition.actualVisibility == Visibility.Normal) {\n          _transform.transformRect(actualPosition.x, actualPosition.y, actualPosition.width, actualPosition.height, true,\n            this, function (x, y, width, height) {\n              var nodePosition = new Rect(x, y, width, height);\n              if (viewPortPosition == null || viewPortPosition.overlaps(nodePosition)) {\n                var templateParams = itemTemplateParamsTask.getTemplateParams(treeItemId),\n                  template = templateParams.template;\n\n                uiHash = new RenderEventArgs();\n                uiHash.id = treeItemId;\n                uiHash.context = combinedContextsTask.getConfig(treeItemId);\n                uiHash.isCursor = (treeItemId == cursorItemId);\n                uiHash.isSelected = selectedItemsTask.isSelected(treeItemId);\n                uiHash.templateName = template.templateConfig.name;\n\n                uiHash.template = templateParams.template;\n                uiHash.isActive = templateParams.isActive;\n                uiHash.hasSelectorCheckbox = templateParams.hasSelectorCheckbox;\n                uiHash.hasButtons = templateParams.hasButtons;\n                uiHash.hasGroupTitle = templateParams.hasGroupTitle;\n                uiHash.onButtonsRender = templateParams.onButtonsRender;\n\n                _graphics.activate(\"placeholder\", Layers.Item);\n                element = _graphics.template(\n                  x\n                  , y\n                  , width\n                  , height\n                  , treeItemPosition.contentPosition.x\n                  , treeItemPosition.contentPosition.y\n                  , treeItemPosition.contentPosition.width\n                  , treeItemPosition.contentPosition.height\n                  , template.itemTemplate.template()\n                  , template.itemTemplate.getHashCode()\n                  , template.itemTemplate.render\n                  , uiHash\n                  , { \"borderWidth\": template.templateConfig.itemBorderWidth }\n                );\n\n                if (templateParams.hasGroupTitle) {\n                  var groupTitlePosition = 0;\n                  switch (_itemsSizesOptions.groupTitlePlacementType) {\n                    case AdviserPlacementType.Left:\n                    case AdviserPlacementType.Auto:\n                      groupTitlePosition = 2;\n                      break;\n                    case AdviserPlacementType.Right:\n                      groupTitlePosition = width - (_itemsSizesOptions.groupTitlePanelSize - 4);\n                      break;\n                    default:\n                  }\n                  element = _graphics.template(\n                    x,\n                    y,\n                    width,\n                    height,\n                    groupTitlePosition,\n                    treeItemPosition.contentPosition.y,\n                    _itemsSizesOptions.groupTitlePanelSize - 4,\n                    treeItemPosition.contentPosition.height + 2,\n                    _groupTitleTemplate.template(),\n                    _groupTitleTemplate.getHashCode(),\n                    _groupTitleTemplate.render,\n                    uiHash,\n                    null\n                  );\n                }\n                if (templateParams.hasSelectorCheckbox) {\n                  _graphics.activate(\"placeholder\", Layers.Controls);\n                  element = _graphics.template(\n                    x,\n                    y,\n                    width,\n                    height,\n                    treeItemPosition.contentPosition.x,\n                    height - (_itemsSizesOptions.checkBoxPanelSize - 4),\n                    treeItemPosition.contentPosition.width,\n                    _itemsSizesOptions.checkBoxPanelSize - 4,\n                    _checkBoxTemplate.template(),\n                    _checkBoxTemplate.getHashCode(),\n                    _checkBoxTemplate.render,\n                    uiHash,\n                    null\n                  );\n                }\n                if (templateParams.hasButtons) {\n                  _graphics.activate(\"placeholder\", Layers.Controls);\n                  var buttonsPanelPosition = 0;\n                  switch (_itemsSizesOptions.groupTitlePlacementType) {\n                    case AdviserPlacementType.Left:\n                    case AdviserPlacementType.Auto:\n                      buttonsPanelPosition = width - (_itemsSizesOptions.buttonsPanelSize - 4);\n                      break;\n                    case AdviserPlacementType.Right:\n                      buttonsPanelPosition = 2;\n                      break;\n                    default:\n                  }\n                  element = _graphics.template(\n                    x,\n                    y,\n                    width,\n                    height,\n                    buttonsPanelPosition,\n                    treeItemPosition.contentPosition.y,\n                    _itemsSizesOptions.buttonsPanelSize - 4,\n                    Math.max(treeItemPosition.contentPosition.height, height - treeItemPosition.contentPosition.y),\n                    _buttonsTemplate.template(),\n                    template.templateConfig.name + _buttonsTemplate.getHashCode(),\n                    _buttonsTemplate.render,\n                    uiHash,\n                    null\n                  );\n                }\n              }\n            });//ignore jslint\n        }\n      }\n    }\n  }\n\n  function getViewPortPosition() {\n    var result = null;\n    if (centerOnCursorTask != null) {\n      var scaleOptions = scaleOptionTask.getOptions(),\n        scale = scaleOptions.scale,\n        placeholderOffset = new Point(centerOnCursorTask.getPlaceholderOffset()),\n        panelSize = new Rect(alignDiagramTask.getContentSize()),\n        optimalPanelSize = new Size(applyLayoutChangesTask.getOptimalPanelSize());\n\n      placeholderOffset.scale(1.0 / scale);\n      optimalPanelSize.scale(1.0 / scale);\n\n      result = new Rect(\n        placeholderOffset.x,\n        placeholderOffset.y,\n        Math.min(optimalPanelSize.width, panelSize.width),\n        Math.min(optimalPanelSize.height, panelSize.height)\n      );\n    }\n    return result;\n  }\n\n  return {\n    process: process\n  };\n};"]},"metadata":{},"sourceType":"module"}