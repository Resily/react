{"ast":null,"code":"import getMergedIntervals from '../../algorithms/getMergedIntervals';\nexport default function MergeLevelIntervalsTask(levelAnnotationOptionTask, logicalLevelsPlacementTask) {\n  var _data = {\n    positions: []\n  };\n\n  function process() {\n    var annotations = levelAnnotationOptionTask.getAnnotations();\n    _data.positions = [];\n\n    if (annotations.length > 0) {\n      var positions = logicalLevelsPlacementTask.getPositions();\n      _data.positions = createPositions(annotations, positions);\n    }\n\n    return true;\n  }\n\n  function createPositions(annotations, positions) {\n    var index,\n        len,\n        index2,\n        len2,\n        used = {},\n        result = {};\n\n    for (index = 0, len = annotations.length; index < len; index += 1) {\n      var annotationConfig = annotations[index];\n      var levels = annotationConfig.levels;\n      var intervals = [];\n\n      if (levels != null && levels.length > 0) {\n        for (index2 = 0, len2 = levels.length; index2 < len2; index2 += 1) {\n          var level = levels[index2];\n\n          if (!used[level]) {\n            used[level] = true;\n            var intervals = [];\n\n            if (positions[level] != null) {\n              intervals = intervals.concat(positions[level]);\n            }\n          }\n        }\n      }\n\n      result[index] = [];\n      getMergedIntervals(this, intervals, function (interval) {\n        result[index].push(interval);\n      });\n    }\n\n    return result;\n  }\n\n  function getPositions() {\n    return _data.positions;\n  }\n\n  return {\n    getPositions: getPositions,\n    process: process\n  };\n}\n;","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/tasks/layout/MergeLevelIntervalsTask.js"],"names":["getMergedIntervals","MergeLevelIntervalsTask","levelAnnotationOptionTask","logicalLevelsPlacementTask","_data","positions","process","annotations","getAnnotations","length","getPositions","createPositions","index","len","index2","len2","used","result","annotationConfig","levels","intervals","level","concat","interval","push"],"mappings":"AAAA,OAAOA,kBAAP,MAA+B,qCAA/B;AAEA,eAAe,SAASC,uBAAT,CAAiCC,yBAAjC,EAA4DC,0BAA5D,EAAwF;AACrG,MAAIC,KAAK,GAAG;AACVC,IAAAA,SAAS,EAAE;AADD,GAAZ;;AAIA,WAASC,OAAT,GAAmB;AACjB,QAAIC,WAAW,GAAGL,yBAAyB,CAACM,cAA1B,EAAlB;AAEAJ,IAAAA,KAAK,CAACC,SAAN,GAAkB,EAAlB;;AAEA,QAAGE,WAAW,CAACE,MAAZ,GAAqB,CAAxB,EAA2B;AACzB,UAAIJ,SAAS,GAAGF,0BAA0B,CAACO,YAA3B,EAAhB;AACAN,MAAAA,KAAK,CAACC,SAAN,GAAkBM,eAAe,CAACJ,WAAD,EAAcF,SAAd,CAAjC;AACD;;AAED,WAAO,IAAP;AACD;;AAED,WAASM,eAAT,CAAyBJ,WAAzB,EAAsCF,SAAtC,EAAiD;AAC/C,QAAIO,KAAJ;AAAA,QAAWC,GAAX;AAAA,QACEC,MADF;AAAA,QACUC,IADV;AAAA,QAEEC,IAAI,GAAG,EAFT;AAAA,QAGEC,MAAM,GAAG,EAHX;;AAKA,SAAKL,KAAK,GAAG,CAAR,EAAWC,GAAG,GAAGN,WAAW,CAACE,MAAlC,EAA0CG,KAAK,GAAGC,GAAlD,EAAuDD,KAAK,IAAI,CAAhE,EAAmE;AACjE,UAAIM,gBAAgB,GAAGX,WAAW,CAACK,KAAD,CAAlC;AACA,UAAIO,MAAM,GAAGD,gBAAgB,CAACC,MAA9B;AACA,UAAIC,SAAS,GAAG,EAAhB;;AACA,UAAID,MAAM,IAAI,IAAV,IAAkBA,MAAM,CAACV,MAAP,GAAgB,CAAtC,EAAyC;AACvC,aAAKK,MAAM,GAAG,CAAT,EAAYC,IAAI,GAAGI,MAAM,CAACV,MAA/B,EAAuCK,MAAM,GAAGC,IAAhD,EAAsDD,MAAM,IAAI,CAAhE,EAAmE;AACjE,cAAIO,KAAK,GAAGF,MAAM,CAACL,MAAD,CAAlB;;AACA,cAAG,CAACE,IAAI,CAACK,KAAD,CAAR,EAAiB;AACfL,YAAAA,IAAI,CAACK,KAAD,CAAJ,GAAc,IAAd;AAEA,gBAAID,SAAS,GAAG,EAAhB;;AACA,gBAAIf,SAAS,CAACgB,KAAD,CAAT,IAAoB,IAAxB,EAA8B;AAC5BD,cAAAA,SAAS,GAAGA,SAAS,CAACE,MAAV,CAAiBjB,SAAS,CAACgB,KAAD,CAA1B,CAAZ;AACD;AACF;AACF;AACF;;AACDJ,MAAAA,MAAM,CAACL,KAAD,CAAN,GAAgB,EAAhB;AACAZ,MAAAA,kBAAkB,CAAC,IAAD,EAAOoB,SAAP,EAAkB,UAASG,QAAT,EAAmB;AACrDN,QAAAA,MAAM,CAACL,KAAD,CAAN,CAAcY,IAAd,CAAmBD,QAAnB;AACD,OAFiB,CAAlB;AAGD;;AAED,WAAON,MAAP;AACD;;AAGD,WAASP,YAAT,GAAwB;AACtB,WAAON,KAAK,CAACC,SAAb;AACD;;AAED,SAAO;AACLK,IAAAA,YAAY,EAACA,YADR;AAELJ,IAAAA,OAAO,EAAEA;AAFJ,GAAP;AAID;AAAA","sourcesContent":["import getMergedIntervals from '../../algorithms/getMergedIntervals';\n\nexport default function MergeLevelIntervalsTask(levelAnnotationOptionTask, logicalLevelsPlacementTask) {\n  var _data = {\n    positions: []\n  };\n\n  function process() {\n    var annotations = levelAnnotationOptionTask.getAnnotations();\n\n    _data.positions = [];\n    \n    if(annotations.length > 0) {\n      var positions = logicalLevelsPlacementTask.getPositions();\n      _data.positions = createPositions(annotations, positions);\n    }\n\n    return true;\n  }\n\n  function createPositions(annotations, positions) {\n    var index, len,\n      index2, len2,\n      used = {},\n      result = {};\n\n    for (index = 0, len = annotations.length; index < len; index += 1) {\n      var annotationConfig = annotations[index];\n      var levels = annotationConfig.levels;\n      var intervals = [];\n      if (levels != null && levels.length > 0) {\n        for (index2 = 0, len2 = levels.length; index2 < len2; index2 += 1) {\n          var level = levels[index2];\n          if(!used[level]) {\n            used[level] = true;\n\n            var intervals = [];\n            if (positions[level] != null) {\n              intervals = intervals.concat(positions[level]);\n            }\n          }\n        }\n      }\n      result[index] = [];\n      getMergedIntervals(this, intervals, function(interval) {\n        result[index].push(interval);\n      });\n    }\n\n    return result;\n  }\n\n\n  function getPositions() {\n    return _data.positions;\n  }\n\n  return {\n    getPositions:getPositions,\n    process: process\n  };\n};"]},"metadata":{},"sourceType":"module"}