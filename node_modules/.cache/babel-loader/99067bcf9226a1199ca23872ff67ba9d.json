{"ast":null,"code":"import Size from '../../graphics/structs/Size';\nimport Point from '../../graphics/structs/Point';\nimport Rect from '../../graphics/structs/Rect';\n/*\n  This method should try to keep cursor item as close as possible to its previous position\n*/\n\nexport default function CenterOnCursorTask(layoutOptionsTask, applyLayoutChangesTask, currentScrollPositionTask, cursorItemTask, alignDiagramTask, createTransformTask, scaleOptionTask) {\n  var _data = {\n    placeholderOffset: null\n  },\n      _transform;\n\n  function process() {\n    var snapRect,\n        layoutOptions = layoutOptionsTask.getOptions(),\n        cursorTreeItemId = cursorItemTask.getCursorTreeItem(),\n        treeItemPosition = alignDiagramTask.getItemPosition(cursorTreeItemId),\n        contentSize = new Size(alignDiagramTask.getContentSize()),\n        scrollPanelSize,\n        scaleOptions = scaleOptionTask.getOptions(),\n        scale = scaleOptions.scale;\n    _data.placeholderOffset = currentScrollPositionTask.getPlaceholderOffset();\n\n    if (layoutOptions.forceCenterOnCursor) {\n      _transform = createTransformTask.getTransform();\n\n      if (treeItemPosition != null) {\n        snapRect = getTransformedItemPosition(treeItemPosition.actualPosition);\n        snapRect.scale(scale);\n        contentSize.scale(scale);\n        scrollPanelSize = applyLayoutChangesTask.getScrollPanelSize();\n        _data.placeholderOffset = new Point(Math.max(Math.min(snapRect.horizontalCenter() - scrollPanelSize.width / 2, contentSize.width - scrollPanelSize.width), 0), Math.max(Math.min(snapRect.verticalCenter() - scrollPanelSize.height / 2, contentSize.height - scrollPanelSize.height), 0));\n      }\n    }\n\n    return true;\n  }\n\n  function getTransformedItemPosition(position) {\n    var result = false;\n\n    _transform.transformRect(position.x, position.y, position.width, position.height, true, this, function (x, y, width, height) {\n      result = new Rect(x, y, width, height);\n    });\n\n    return result;\n  }\n\n  function getPlaceholderOffset() {\n    return _data.placeholderOffset;\n  }\n\n  return {\n    process: process,\n    getPlaceholderOffset: getPlaceholderOffset\n  };\n}\n;","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/tasks/layout/CenterOnCursorTask.js"],"names":["Size","Point","Rect","CenterOnCursorTask","layoutOptionsTask","applyLayoutChangesTask","currentScrollPositionTask","cursorItemTask","alignDiagramTask","createTransformTask","scaleOptionTask","_data","placeholderOffset","_transform","process","snapRect","layoutOptions","getOptions","cursorTreeItemId","getCursorTreeItem","treeItemPosition","getItemPosition","contentSize","getContentSize","scrollPanelSize","scaleOptions","scale","getPlaceholderOffset","forceCenterOnCursor","getTransform","getTransformedItemPosition","actualPosition","getScrollPanelSize","Math","max","min","horizontalCenter","width","verticalCenter","height","position","result","transformRect","x","y"],"mappings":"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","sourcesContent":["import Size from '../../graphics/structs/Size';\nimport Point from '../../graphics/structs/Point';\nimport Rect from '../../graphics/structs/Rect';\n\n/*\n  This method should try to keep cursor item as close as possible to its previous position\n*/\nexport default function CenterOnCursorTask(layoutOptionsTask, applyLayoutChangesTask, currentScrollPositionTask, cursorItemTask, alignDiagramTask, createTransformTask, scaleOptionTask) {\n  var _data = {\n    placeholderOffset: null\n  },\n    _transform;\n\n  function process() {\n    var snapRect,\n      layoutOptions = layoutOptionsTask.getOptions(),\n      cursorTreeItemId = cursorItemTask.getCursorTreeItem(),\n      treeItemPosition = alignDiagramTask.getItemPosition(cursorTreeItemId),\n      contentSize = new Size(alignDiagramTask.getContentSize()),\n      scrollPanelSize,\n      scaleOptions = scaleOptionTask.getOptions(),\n      scale = scaleOptions.scale;\n\n    _data.placeholderOffset = currentScrollPositionTask.getPlaceholderOffset();\n\n    if (layoutOptions.forceCenterOnCursor) {\n      _transform = createTransformTask.getTransform();\n      if (treeItemPosition != null) {\n        snapRect = getTransformedItemPosition(treeItemPosition.actualPosition);\n        snapRect.scale(scale);\n        contentSize.scale(scale);\n        scrollPanelSize = applyLayoutChangesTask.getScrollPanelSize();\n        _data.placeholderOffset = new Point(\n          Math.max(Math.min(snapRect.horizontalCenter() - scrollPanelSize.width / 2, contentSize.width - scrollPanelSize.width), 0),\n          Math.max(Math.min(snapRect.verticalCenter() - scrollPanelSize.height / 2, contentSize.height - scrollPanelSize.height), 0)\n        );\n      }\n    }\n\n\n    return true;\n  }\n\n  function getTransformedItemPosition(position) {\n    var result = false;\n\n    _transform.transformRect(position.x, position.y, position.width, position.height, true,\n      this, function (x, y, width, height) {\n        result = new Rect(x, y, width, height);\n      }\n    );\n    return result;\n  }\n\n  function getPlaceholderOffset() {\n    return _data.placeholderOffset;\n  }\n\n  return {\n    process: process,\n    getPlaceholderOffset: getPlaceholderOffset\n  };\n};"]},"metadata":{},"sourceType":"module"}