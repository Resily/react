{"ast":null,"code":"import { OrientationType, TextOrientationType, VerticalAlignmentType } from '../../enums';\nimport JsonML from '../../common/jsonml-html';\nimport Rect from '../../graphics/structs/Rect';\nimport { getTextAlign, getVerticalAlignment } from '../../graphics/EnumValues';\nexport function getRotatedText(_ref) {\n  var orientation = _ref.orientation,\n      textOrientation = _ref.textOrientation,\n      horizontalAlignment = _ref.horizontalAlignment,\n      verticalAlignment = _ref.verticalAlignment,\n      fontSize = _ref.fontSize,\n      fontFamily = _ref.fontFamily,\n      fontWeight = _ref.fontWeight,\n      fontStyle = _ref.fontStyle,\n      label = _ref.label;\n  var rotation = \"\",\n      element;\n\n  switch (textOrientation) {\n    case TextOrientationType.Horizontal:\n      break;\n\n    case TextOrientationType.RotateLeft:\n      rotation = \"rotate(-90deg)\";\n      break;\n\n    case TextOrientationType.RotateRight:\n      rotation = \"rotate(90deg)\";\n      break;\n\n    case TextOrientationType.Auto:\n      switch (orientation) {\n        case OrientationType.Top:\n          rotation = \"rotate(90deg)\";\n          break;\n\n        case OrientationType.Bottom:\n          rotation = \"rotate(90deg)\";\n          break;\n\n        case OrientationType.Left:\n        case OrientationType.Right:\n          break;\n      }\n\n      break;\n  }\n\n  var style = {\n    \"fontSize\": fontSize,\n    \"fontFamily\": fontFamily,\n    \"fontWeight\": fontWeight,\n    \"fontStyle\": fontStyle,\n    \"position\": \"absolute\",\n    \"padding\": 0,\n    \"margin\": 0,\n    \"textAlign\": getTextAlign(horizontalAlignment),\n    \"lineHeight\": 1,\n    \"-webkit-transform-origin\": \"center center\",\n    \"-moz-transform-origin\": \"center center\",\n    \"-o-transform-origin\": \"center center\",\n    \"-ms-transform-origin\": \"center center\",\n    \"-webkit-transform\": rotation,\n    \"-moz-transform\": rotation,\n    \"-o-transform\": rotation,\n    \"-ms-transform\": rotation,\n    \"transform\": rotation,\n    \"textOverflow\": \"ellipsis\",\n    \"whiteSpace\": \"nowrap\",\n    \"overflow\": \"hidden\",\n    \"tableLayout\": \"fixed\"\n  };\n\n  switch (verticalAlignment) {\n    case VerticalAlignmentType.Top:\n      element = [\"div\", {\n        \"style\": style\n      }, label];\n      break;\n\n    default:\n      style.borderCollapse = \"collapse\";\n      element = [\"table\", {\n        \"style\": style\n      }, [\"tbody\", [\"tr\", [\"td\", {\n        \"style\": {\n          \"verticalAlign\": getVerticalAlignment(verticalAlignment),\n          \"padding\": 0,\n          \"textOverflow\": \"ellipsis\",\n          \"whiteSpace\": \"nowrap\",\n          \"overflow\": \"hidden\"\n        }\n      }, label]]]];\n      break;\n  }\n\n  return element;\n}\nexport function updateRotatedText(_ref2) {\n  var element = _ref2.element,\n      orientation = _ref2.orientation,\n      textOrientation = _ref2.textOrientation,\n      verticalAlignment = _ref2.verticalAlignment,\n      width = _ref2.width,\n      height = _ref2.height,\n      label = _ref2.label,\n      fontColor = _ref2.fontColor;\n  var style = {},\n      isVertical = false;\n\n  switch (textOrientation) {\n    case TextOrientationType.RotateLeft:\n    case TextOrientationType.RotateRight:\n      isVertical = true;\n      break;\n\n    case TextOrientationType.Auto:\n      switch (orientation) {\n        case OrientationType.Top:\n        case OrientationType.Bottom:\n          isVertical = true;\n          break;\n\n        default:\n          break;\n      }\n\n      break;\n\n    default:\n      break;\n  }\n\n  var textRect;\n\n  if (isVertical) {\n    textRect = new Rect(Math.round(width / 2.0 - height / 2.0), Math.round(height / 2.0 - width / 2.0), height, width);\n  } else {\n    textRect = new Rect(0, 0, width, height);\n  }\n\n  style = textRect.getCSS();\n  style.maxWidth = style.width;\n  style.maxHeight = style.height;\n  var container = element.firstChild;\n  JsonML.applyStyles(container, style);\n  var title;\n\n  switch (verticalAlignment) {\n    case VerticalAlignmentType.Top:\n      title = element.firstChild;\n      break;\n\n    default:\n      title = element.firstChild.firstChild.firstChild.firstChild;\n      title.style.borderCollapse = \"collapse\";\n      break;\n  }\n\n  title.style.color = fontColor;\n  title.textContent = label || \"\";\n}","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/templates/html/RotatedText.js"],"names":["OrientationType","TextOrientationType","VerticalAlignmentType","JsonML","Rect","getTextAlign","getVerticalAlignment","getRotatedText","orientation","textOrientation","horizontalAlignment","verticalAlignment","fontSize","fontFamily","fontWeight","fontStyle","label","rotation","element","Horizontal","RotateLeft","RotateRight","Auto","Top","Bottom","Left","Right","style","borderCollapse","updateRotatedText","width","height","fontColor","isVertical","textRect","Math","round","getCSS","maxWidth","maxHeight","container","firstChild","applyStyles","title","color","textContent"],"mappings":"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","sourcesContent":["import { OrientationType, TextOrientationType, VerticalAlignmentType }  from '../../enums';\nimport JsonML from '../../common/jsonml-html';\nimport Rect from '../../graphics/structs/Rect';\nimport { getTextAlign, getVerticalAlignment } from '../../graphics/EnumValues';\n\nexport function getRotatedText({orientation, textOrientation, horizontalAlignment, verticalAlignment, fontSize, fontFamily, fontWeight, fontStyle, label}) {\n    var rotation = \"\",\n      element;\n\n    switch (textOrientation) {\n      case TextOrientationType.Horizontal:\n        break;\n      case TextOrientationType.RotateLeft:\n        rotation = \"rotate(-90deg)\";\n        break;\n      case TextOrientationType.RotateRight:\n        rotation = \"rotate(90deg)\";\n        break;\n      case TextOrientationType.Auto:\n        switch (orientation) {\n          case OrientationType.Top:\n            rotation = \"rotate(90deg)\";\n            break;\n          case OrientationType.Bottom:\n            rotation = \"rotate(90deg)\";\n            break;\n          case OrientationType.Left:\n          case OrientationType.Right:\n            break;\n        }\n        break;\n    }\n\n    var style = {\n      \"fontSize\": fontSize,\n      \"fontFamily\": fontFamily,\n      \"fontWeight\": fontWeight,\n      \"fontStyle\": fontStyle,\n      \"position\": \"absolute\",\n      \"padding\": 0,\n      \"margin\": 0,\n      \"textAlign\": getTextAlign(horizontalAlignment),\n      \"lineHeight\": 1,\n      \"-webkit-transform-origin\": \"center center\",\n      \"-moz-transform-origin\": \"center center\",\n      \"-o-transform-origin\": \"center center\",\n      \"-ms-transform-origin\": \"center center\",\n      \"-webkit-transform\": rotation,\n      \"-moz-transform\": rotation,\n      \"-o-transform\": rotation,\n      \"-ms-transform\": rotation,\n      \"transform\": rotation,\n      \"textOverflow\": \"ellipsis\",\n      \"whiteSpace\": \"nowrap\",\n      \"overflow\": \"hidden\",\n      \"tableLayout\": \"fixed\"\n    };\n\n    switch (verticalAlignment) {\n      case VerticalAlignmentType.Top:\n        element = [\"div\",\n          {\n            \"style\": style\n          },\n          label\n        ];\n        break;\n      default:\n        style.borderCollapse = \"collapse\";\n\n        element = [\"table\",\n          {\n            \"style\": style\n          },\n          [\"tbody\",\n            [\"tr\",\n              [\"td\",\n                {\n                  \"style\": {\n                    \"verticalAlign\": getVerticalAlignment(verticalAlignment),\n                    \"padding\": 0,\n                    \"textOverflow\": \"ellipsis\",\n                    \"whiteSpace\": \"nowrap\",\n                    \"overflow\": \"hidden\"\n                  }\n                },\n                label\n              ]\n            ]\n          ]\n        ];\n        break;\n    }\n\n    return element;\n  }\n\nexport function updateRotatedText({element, orientation, textOrientation, verticalAlignment, width, height, label, fontColor }) {\n    var style = {},\n      isVertical = false;\n\n    switch (textOrientation) {\n      case TextOrientationType.RotateLeft:\n      case TextOrientationType.RotateRight:\n        isVertical = true;\n        break;\n      case TextOrientationType.Auto:\n        switch (orientation) {\n          case OrientationType.Top:\n          case OrientationType.Bottom:\n            isVertical = true;\n            break;\n          default:\n            break;\n        }\n        break;\n      default:\n        break;\n    }\n\n    var textRect;\n    if(isVertical) {\n      textRect = new Rect(Math.round(width / 2.0 - height / 2.0), Math.round(height / 2.0 - width / 2.0), height, width);\n    } else {\n      textRect = new Rect(0, 0, width, height);\n    }\n    style = textRect.getCSS();\n    style.maxWidth = style.width;\n    style.maxHeight = style.height;\n\n    var container = element.firstChild;\n    JsonML.applyStyles(container, style);\n\n    var title;\n    switch (verticalAlignment) {\n      case VerticalAlignmentType.Top:\n        title = element.firstChild;\n        break;\n      default:\n        title = element.firstChild.firstChild.firstChild.firstChild;\n        title.style.borderCollapse = \"collapse\";\n        break;\n    }\n    title.style.color = fontColor;\n    title.textContent = label || \"\";\n  }"]},"metadata":{},"sourceType":"module"}