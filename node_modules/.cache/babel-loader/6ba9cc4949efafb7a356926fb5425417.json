{"ast":null,"code":"/**\n * Callback function to measure item weights of merged arrays.\n * \n * @callback getItemWeightCallback\n * @param {object} item The item to weight\n * @returns {number} Returns item's weight.\n */\n\n/**\n * Merges array of sorted arrays into one using call back function for comparison.\n * \n * @param {object[][]} arrays  Array of sorted arrays of objects.\n * @param {getItemWeightCallback} getItemWeight Callback function to measure item weight. \n * @param {boolean} ignoreDuplicates If true returns distinct weight items only.\n * @returns {object[]} Returns merged sorted array.\n */\nexport default function mergeSort(arrays, getItemWeight, ignoreDuplicates) {\n  var result = null,\n      firstArray,\n      secondArray,\n      mergedArray,\n      arrayIndex,\n      firstIndex,\n      secondIndex,\n      firstLen,\n      secondLen,\n      firstItem,\n      secondItem,\n      firstItemWeight,\n      secondItemWeight,\n      currentValue;\n\n  switch (arrays.length) {\n    case 0:\n      result = [];\n      break;\n\n    default:\n      firstArray = [];\n\n      for (arrayIndex = 0; arrayIndex < arrays.length; arrayIndex += 1) {\n        secondArray = arrays[arrayIndex];\n        mergedArray = [];\n        firstLen = firstArray.length;\n        secondLen = secondArray.length;\n        firstIndex = 0;\n        secondIndex = 0;\n        firstItem = null;\n        firstItemWeight = null;\n        secondItem = null;\n        secondItemWeight = null;\n\n        if (firstLen > 0) {\n          firstItem = firstArray[firstIndex];\n          firstItemWeight = !getItemWeight ? firstItem : getItemWeight(firstItem);\n        }\n\n        if (secondLen > 0) {\n          secondItem = secondArray[secondIndex];\n          secondItemWeight = !getItemWeight ? secondItem : getItemWeight(secondItem);\n        }\n\n        currentValue = null;\n\n        while (firstIndex < firstLen || secondIndex < secondLen) {\n          if (firstIndex >= firstLen) {\n            if (!ignoreDuplicates || currentValue != secondItem) {\n              mergedArray.push(secondItem);\n              currentValue = secondItem;\n            }\n\n            secondIndex += 1;\n\n            if (secondIndex < secondLen) {\n              secondItem = secondArray[secondIndex];\n              secondItemWeight = !getItemWeight ? secondItem : getItemWeight(secondItem);\n            }\n          } else {\n            if (secondIndex >= secondLen) {\n              if (!ignoreDuplicates || currentValue != firstItem) {\n                mergedArray.push(firstItem);\n                currentValue = firstItem;\n              }\n\n              firstIndex += 1;\n\n              if (firstIndex < firstLen) {\n                firstItem = firstArray[firstIndex];\n                firstItemWeight = !getItemWeight ? firstItem : getItemWeight(firstItem);\n              }\n            } else {\n              if (firstItemWeight < secondItemWeight) {\n                if (!ignoreDuplicates || currentValue != firstItem) {\n                  mergedArray.push(firstItem);\n                  currentValue = firstItem;\n                }\n\n                firstIndex += 1;\n\n                if (firstIndex < firstLen) {\n                  firstItem = firstArray[firstIndex];\n                  firstItemWeight = !getItemWeight ? firstItem : getItemWeight(firstItem);\n                }\n              } else {\n                if (!ignoreDuplicates || currentValue != secondItem) {\n                  mergedArray.push(secondItem);\n                  currentValue = secondItem;\n                }\n\n                secondIndex += 1;\n\n                if (secondIndex < secondLen) {\n                  secondItem = secondArray[secondIndex];\n                  secondItemWeight = !getItemWeight ? secondItem : getItemWeight(secondItem);\n                }\n              }\n            }\n          }\n        }\n\n        firstArray = mergedArray;\n      }\n\n      result = firstArray;\n      break;\n  }\n\n  return result;\n}\n;","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/algorithms/mergeSort.js"],"names":["mergeSort","arrays","getItemWeight","ignoreDuplicates","result","firstArray","secondArray","mergedArray","arrayIndex","firstIndex","secondIndex","firstLen","secondLen","firstItem","secondItem","firstItemWeight","secondItemWeight","currentValue","length","push"],"mappings":"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","sourcesContent":["/**\n * Callback function to measure item weights of merged arrays.\n * \n * @callback getItemWeightCallback\n * @param {object} item The item to weight\n * @returns {number} Returns item's weight.\n */\n\n/**\n * Merges array of sorted arrays into one using call back function for comparison.\n * \n * @param {object[][]} arrays  Array of sorted arrays of objects.\n * @param {getItemWeightCallback} getItemWeight Callback function to measure item weight. \n * @param {boolean} ignoreDuplicates If true returns distinct weight items only.\n * @returns {object[]} Returns merged sorted array.\n */\nexport default function mergeSort(arrays, getItemWeight, ignoreDuplicates) {\n  var result = null,\n    firstArray, secondArray, mergedArray, arrayIndex,\n    firstIndex, secondIndex, firstLen, secondLen, firstItem, secondItem,\n    firstItemWeight, secondItemWeight,\n    currentValue;\n\n  switch (arrays.length) {\n    case 0:\n      result = [];\n      break;\n    default:\n      firstArray = [];\n      for (arrayIndex = 0; arrayIndex < arrays.length; arrayIndex += 1) {\n        secondArray = arrays[arrayIndex];\n        mergedArray = [];\n\n        firstLen = firstArray.length;\n        secondLen = secondArray.length;\n\n        firstIndex = 0;\n        secondIndex = 0;\n\n        firstItem = null;\n        firstItemWeight = null;\n        secondItem = null;\n        secondItemWeight = null;\n\n        if (firstLen > 0) {\n          firstItem = firstArray[firstIndex];\n          firstItemWeight = !getItemWeight ? firstItem : getItemWeight(firstItem);\n        }\n\n        if (secondLen > 0) {\n          secondItem = secondArray[secondIndex];\n          secondItemWeight = !getItemWeight ? secondItem : getItemWeight(secondItem);\n        }\n        currentValue = null;\n        while (firstIndex < firstLen || secondIndex < secondLen) {\n\n          if (firstIndex >= firstLen) {\n            if (!ignoreDuplicates || currentValue != secondItem) {\n              mergedArray.push(secondItem);\n              currentValue = secondItem;\n            }\n            secondIndex += 1;\n\n\n            if (secondIndex < secondLen) {\n              secondItem = secondArray[secondIndex];\n              secondItemWeight = !getItemWeight ? secondItem : getItemWeight(secondItem);\n            }\n          } else {\n            if (secondIndex >= secondLen) {\n              if (!ignoreDuplicates || currentValue != firstItem) {\n                mergedArray.push(firstItem);\n                currentValue = firstItem;\n              }\n              firstIndex += 1;\n\n\n              if (firstIndex < firstLen) {\n                firstItem = firstArray[firstIndex];\n                firstItemWeight = !getItemWeight ? firstItem : getItemWeight(firstItem);\n              }\n            } else {\n              if (firstItemWeight < secondItemWeight) {\n                if (!ignoreDuplicates || currentValue != firstItem) {\n                  mergedArray.push(firstItem);\n                  currentValue = firstItem;\n                }\n                firstIndex += 1;\n\n                if (firstIndex < firstLen) {\n                  firstItem = firstArray[firstIndex];\n                  firstItemWeight = !getItemWeight ? firstItem : getItemWeight(firstItem);\n                }\n              } else {\n                if (!ignoreDuplicates || currentValue != secondItem) {\n                  mergedArray.push(secondItem);\n                  currentValue = secondItem;\n                }\n                secondIndex += 1;\n\n                if (secondIndex < secondLen) {\n                  secondItem = secondArray[secondIndex];\n                  secondItemWeight = !getItemWeight ? secondItem : getItemWeight(secondItem);\n                }\n              }\n            }\n          }\n        }\n        firstArray = mergedArray;\n      }\n      result = firstArray;\n      break;\n  }\n  return result;\n};\n"]},"metadata":{},"sourceType":"module"}