{"ast":null,"code":"/**\n * @class Thickness\n * @classdesc Class describes the thickness of a frame around rectangle.\n * \n * @param {number} left Left.\n * @param {number} top Top.\n * @param {number} right Right.\n * @param {number} bottom Bottom.\n */\nexport default function Thickness(arg0, arg1, arg2, arg3) {\n  /**\n   * The thickness for the left side of the rectangle.\n   */\n  this.left = 0;\n  /**\n   * The thickness for the upper side of the rectangle.\n   */\n\n  this.top = 0;\n  /**\n   * The thickness for the right side of the rectangle.\n   */\n\n  this.right = 0;\n  /**\n   * The thickness for the bottom side of the rectangle.\n   */\n\n  this.bottom = 0;\n\n  switch (arguments.length) {\n    case 1:\n      if (arg0 !== null && typeof arg0 == \"object\") {\n        this.left = arg0.left;\n        this.top = arg0.top;\n        this.right = arg0.right;\n        this.bottom = arg0.bottom;\n      } else {\n        this.left = arg0;\n        this.top = arg0;\n        this.right = arg0;\n        this.bottom = arg0;\n      }\n\n      break;\n\n    case 4:\n      this.left = arg0;\n      this.top = arg1;\n      this.right = arg2;\n      this.bottom = arg3;\n      break;\n  }\n\n  return this;\n}\n;\n/**\n * Checks object is empty\n * \n * @returns {boolean} Returns true if object has no thickness defined for any of its sides\n */\n\nThickness.prototype.isEmpty = function () {\n  return this.left === 0 && this.top === 0 && this.right === 0 && this.bottom === 0;\n};\n/**\n * Checks if at least one side is positive\n * \n * @returns {boolean} Returns true if any of its sides is positive\n */\n\n\nThickness.prototype.isPositive = function () {\n  return this.left > 0 || this.top > 0 || this.right > 0 || this.bottom > 0;\n};\n/**\n * Checks if at least one side is negative\n * \n * @returns {boolean} Returns true if any of its sides is negative\n */\n\n\nThickness.prototype.isNegative = function () {\n  return this.left < 0 || this.top < 0 || this.right < 0 || this.bottom < 0;\n};\n/**\n * Maximum thickness.\n * \n * @param {Thickness} thickness The thickness to compare with.\n * @returns {Thickness} Returns reference to the current thickness object\n */\n\n\nThickness.prototype.maxThickness = function (thickness) {\n  this.left = Math.max(this.left, thickness.left);\n  this.top = Math.max(this.top, thickness.top);\n  this.right = Math.max(this.right, thickness.right);\n  this.bottom = Math.max(this.bottom, thickness.bottom);\n  return this;\n};\n/**\n * Add thickness.\n * \n * @param {Thickness} thickness The thickness to add.\n * @returns {Thickness} Returns reference to the current thickness object\n */\n\n\nThickness.prototype.addThickness = function (arg0, arg1, arg2, arg3) {\n  switch (arguments.length) {\n    case 1:\n      if (arg0 !== null && typeof arg0 == \"object\") {\n        this.left += arg0.left;\n        this.top += arg0.top;\n        this.right += arg0.right;\n        this.bottom += arg0.bottom;\n      } else {\n        this.left += arg0;\n        this.top += arg0;\n        this.right += arg0;\n        this.bottom += arg0;\n      }\n\n      break;\n\n    case 4:\n      this.left += arg0;\n      this.top += arg1;\n      this.right += arg2;\n      this.bottom += arg3;\n      break;\n  }\n\n  return this;\n};\n/**\n * Scales the thickness by the specified value\n * \n * @param {number} scale\n * @returns {Thickness} Returns reference to the current size.\n */\n\n\nThickness.prototype.scale = function (scale) {\n  this.left = this.left * scale;\n  this.top = this.top * scale;\n  this.right = this.right * scale;\n  this.bottom = this.bottom * scale;\n  return this;\n};\n/**\n * Returns thickness object in form of CSS style string. It is conversion to padding style string.\n * \n * @param {string} [units=\"px\"] The string name of units.\n * @returns {string} CSS style string.\n */\n\n\nThickness.prototype.toString = function (units) {\n  units = units !== undefined ? units : \"px\";\n  return this.top + units + \" \" + this.right + units + \" \" + this.bottom + units + \" \" + this.left + units;\n};","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/graphics/structs/Thickness.js"],"names":["Thickness","arg0","arg1","arg2","arg3","left","top","right","bottom","arguments","length","prototype","isEmpty","isPositive","isNegative","maxThickness","thickness","Math","max","addThickness","scale","toString","units","undefined"],"mappings":"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","sourcesContent":["/**\n * @class Thickness\n * @classdesc Class describes the thickness of a frame around rectangle.\n * \n * @param {number} left Left.\n * @param {number} top Top.\n * @param {number} right Right.\n * @param {number} bottom Bottom.\n */\nexport default function Thickness(arg0, arg1, arg2, arg3) {\n  /**\n   * The thickness for the left side of the rectangle.\n   */\n  this.left = 0;\n\n  /**\n   * The thickness for the upper side of the rectangle.\n   */\n  this.top = 0;\n\n  /**\n   * The thickness for the right side of the rectangle.\n   */\n  this.right = 0;\n\n  /**\n   * The thickness for the bottom side of the rectangle.\n   */\n  this.bottom = 0;\n\n  switch (arguments.length) {\n    case 1:\n      if (arg0 !== null && typeof arg0 == \"object\") {\n        this.left = arg0.left;\n        this.top = arg0.top;\n        this.right = arg0.right;\n        this.bottom = arg0.bottom;\n      } else {\n        this.left = arg0;\n        this.top = arg0;\n        this.right = arg0;\n        this.bottom = arg0;\n      }\n      break;\n    case 4:\n      this.left = arg0;\n      this.top = arg1;\n      this.right = arg2;\n      this.bottom = arg3;\n      break;\n  }\n  return this;\n};\n\n/**\n * Checks object is empty\n * \n * @returns {boolean} Returns true if object has no thickness defined for any of its sides\n */\nThickness.prototype.isEmpty = function () {\n  return this.left === 0 && this.top === 0 && this.right === 0 && this.bottom === 0;\n};\n\n/**\n * Checks if at least one side is positive\n * \n * @returns {boolean} Returns true if any of its sides is positive\n */\nThickness.prototype.isPositive = function () {\n  return this.left > 0 || this.top > 0 || this.right > 0 || this.bottom > 0;\n};\n\n/**\n * Checks if at least one side is negative\n * \n * @returns {boolean} Returns true if any of its sides is negative\n */\nThickness.prototype.isNegative = function () {\n  return this.left < 0 || this.top < 0 || this.right < 0 || this.bottom < 0;\n};\n\n/**\n * Maximum thickness.\n * \n * @param {Thickness} thickness The thickness to compare with.\n * @returns {Thickness} Returns reference to the current thickness object\n */\nThickness.prototype.maxThickness = function (thickness) {\n  this.left = Math.max(this.left, thickness.left);\n  this.top = Math.max(this.top, thickness.top);\n  this.right = Math.max(this.right, thickness.right);\n  this.bottom = Math.max(this.bottom, thickness.bottom);\n\n  return this;\n};\n\n/**\n * Add thickness.\n * \n * @param {Thickness} thickness The thickness to add.\n * @returns {Thickness} Returns reference to the current thickness object\n */\nThickness.prototype.addThickness = function (arg0, arg1, arg2, arg3) {\n  switch (arguments.length) {\n    case 1:\n      if (arg0 !== null && typeof arg0 == \"object\") {\n        this.left += arg0.left;\n        this.top += arg0.top;\n        this.right += arg0.right;\n        this.bottom += arg0.bottom;\n      } else {\n        this.left += arg0;\n        this.top += arg0;\n        this.right += arg0;\n        this.bottom += arg0;\n      }\n      break;\n    case 4:\n      this.left += arg0;\n      this.top += arg1;\n      this.right += arg2;\n      this.bottom += arg3;\n      break;\n  }\n\n  return this;\n};\n\n/**\n * Scales the thickness by the specified value\n * \n * @param {number} scale\n * @returns {Thickness} Returns reference to the current size.\n */\nThickness.prototype.scale = function (scale) {\n  this.left = this.left * scale;\n  this.top = this.top * scale;\n  this.right = this.right * scale;\n  this.bottom = this.bottom * scale;\n  return this;\n};\n\n/**\n * Returns thickness object in form of CSS style string. It is conversion to padding style string.\n * \n * @param {string} [units=\"px\"] The string name of units.\n * @returns {string} CSS style string.\n */\nThickness.prototype.toString = function (units) {\n  units = (units !== undefined) ? units : \"px\";\n\n  return this.top + units + \" \" + this.right + units + \" \" + this.bottom + units + \" \" + this.left + units;\n};"]},"metadata":{},"sourceType":"module"}