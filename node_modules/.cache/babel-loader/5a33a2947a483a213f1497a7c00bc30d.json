{"ast":null,"code":"import FamilyItem from '../../models/FamilyItem';\nimport { GroupByType } from '../../enums';\nexport default function AddSpousesTask(spousesOptionTask, addLabelAnnotationsTask) {\n  var _data = {\n    logicalFamily: null,\n    maximumId: null\n  };\n\n  function process(debug) {\n    var logicalFamily = addLabelAnnotationsTask.getLogicalFamily(),\n        maximumId = addLabelAnnotationsTask.getMaximumId(),\n        items = spousesOptionTask.getItems();\n    logicalFamily = logicalFamily.clone();\n    maximumId = addFakeChildrenForSpouses(logicalFamily, items, maximumId, debug);\n    _data.logicalFamily = logicalFamily;\n    _data.maximumId = maximumId;\n\n    if (debug && !logicalFamily.validate()) {\n      throw \"References are broken in family structure!\";\n    }\n\n    return true;\n  }\n\n  function addFakeChildrenForSpouses(logicalFamily, items, maximumId, debug) {\n    var couple, fakeChild, index, len, itemConfig, spouseIndex, spouseLen, spouses;\n\n    for (index = 0, len = items.length; index < len; index += 1) {\n      itemConfig = items[index];\n      spouses = itemConfig.spouses.slice(0);\n\n      for (spouseIndex = 0, spouseLen = spouses.length; spouseIndex < spouseLen; spouseIndex += 1) {\n        couple = [itemConfig.id, spouses[spouseIndex]];\n\n        if (!logicalFamily.hasCommonChild(couple)) {\n          /* create fake child item to keep spouses together */\n          maximumId += 1;\n          fakeChild = new FamilyItem({\n            id: maximumId,\n            isVisible: false,\n            isActive: false,\n            isLevelNeutral: true,\n            hideParentConnection: true,\n            hideChildrenConnection: true,\n            itemConfig: {\n              title: \"fake child #\" + maximumId,\n              description: \"This is fake child keeps spouses together.\"\n            },\n            levelGravity: GroupByType.Parents\n          });\n          logicalFamily.add(couple, fakeChild.id, fakeChild);\n        }\n      }\n    }\n\n    return maximumId;\n  }\n\n  function getLogicalFamily() {\n    return _data.logicalFamily;\n  }\n\n  function getMaximumId() {\n    return _data.maximumId;\n  }\n\n  return {\n    process: process,\n    getLogicalFamily: getLogicalFamily,\n    getMaximumId: getMaximumId\n  };\n}\n;","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/tasks/transformations/AddSpousesTask.js"],"names":["FamilyItem","GroupByType","AddSpousesTask","spousesOptionTask","addLabelAnnotationsTask","_data","logicalFamily","maximumId","process","debug","getLogicalFamily","getMaximumId","items","getItems","clone","addFakeChildrenForSpouses","validate","couple","fakeChild","index","len","itemConfig","spouseIndex","spouseLen","spouses","length","slice","id","hasCommonChild","isVisible","isActive","isLevelNeutral","hideParentConnection","hideChildrenConnection","title","description","levelGravity","Parents","add"],"mappings":"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","sourcesContent":["import FamilyItem from '../../models/FamilyItem';\nimport { GroupByType } from '../../enums';\n\nexport default function AddSpousesTask(spousesOptionTask, addLabelAnnotationsTask) {\n  var _data = {\n    logicalFamily: null,\n    maximumId: null\n  };\n\n  function process(debug) {\n    var logicalFamily = addLabelAnnotationsTask.getLogicalFamily(),\n      maximumId = addLabelAnnotationsTask.getMaximumId(),\n      items = spousesOptionTask.getItems();\n\n    logicalFamily = logicalFamily.clone();\n\n    maximumId = addFakeChildrenForSpouses(logicalFamily, items, maximumId, debug);\n\n    _data.logicalFamily = logicalFamily;\n    _data.maximumId = maximumId;\n\n    if (debug && !logicalFamily.validate()) {\n      throw \"References are broken in family structure!\";\n    }\n    return true;\n  }\n\n  function addFakeChildrenForSpouses(logicalFamily, items, maximumId, debug) {\n    var couple, fakeChild,\n      index, len,\n      itemConfig,\n      spouseIndex, spouseLen,\n      spouses;\n    for (index = 0, len = items.length; index < len; index += 1) {\n      itemConfig = items[index];\n      spouses = itemConfig.spouses.slice(0);\n      for (spouseIndex = 0, spouseLen = spouses.length; spouseIndex < spouseLen; spouseIndex += 1) {\n        couple = [itemConfig.id, spouses[spouseIndex]];\n        if (!logicalFamily.hasCommonChild(couple)) {\n\n          /* create fake child item to keep spouses together */\n          maximumId += 1;\n\n          fakeChild = new FamilyItem({\n            id: maximumId,\n            isVisible: false,\n            isActive: false,\n            isLevelNeutral: true,\n            hideParentConnection: true,\n            hideChildrenConnection: true,\n            itemConfig: { title: \"fake child #\" + maximumId, description: \"This is fake child keeps spouses together.\" },\n            levelGravity: GroupByType.Parents\n          });\n\n          logicalFamily.add(couple, fakeChild.id, fakeChild);\n        }\n      }\n    }\n    return maximumId;\n  }\n\n  function getLogicalFamily() {\n    return _data.logicalFamily;\n  }\n\n  function getMaximumId() {\n    return _data.maximumId;\n  }\n\n  return {\n    process: process,\n    getLogicalFamily: getLogicalFamily,\n    getMaximumId: getMaximumId\n  };\n};"]},"metadata":{},"sourceType":"module"}