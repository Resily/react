{"ast":null,"code":"import Family from '../algorithms/Family';\nimport DependencyManager from './DependencyManager';\nimport { splitCamelCaseName } from '../common';\nexport default function TaskManager() {\n  var _taskFamily = new Family();\n\n  var _dependencies = new DependencyManager();\n\n  var _tasks = [];\n\n  function TaskInfo(name, dependencies, factory, color) {\n    this.name = name;\n    this.dependencies = dependencies;\n    this.factory = factory;\n    this.task = null;\n    this.color = color;\n  }\n\n  function addTask(taskName, taskDependencies, factory, color) {\n    if (_tasks.length > 0) {\n      throw \"Task Manager is already initialized\";\n    }\n\n    _taskFamily.add(taskDependencies, taskName, new TaskInfo(taskName, taskDependencies, factory, color));\n  }\n\n  function getTask(taskName) {\n    var taskInfo = _taskFamily.node(taskName);\n\n    return taskInfo && taskInfo.task;\n  }\n\n  function addDependency(name, dependency) {\n    if (_tasks.length > 0) {\n      throw \"Task Manager is already initialized\";\n    }\n\n    _dependencies.register(name, dependency);\n  }\n\n  function process(startTask, stopTask, debug) {\n    var hasChanges = false,\n        logtime = debug;\n\n    if (_tasks.length === 0) {\n      _taskFamily.loopTopo(this, function (taskName, taskInfo) {\n        taskInfo.task = _dependencies.register(taskName, _dependencies.resolve(taskInfo.dependencies, taskInfo.factory)());\n\n        _tasks.push(taskInfo);\n      });\n    }\n\n    if (debug) {\n      // eslint-disable-next-line no-console\n      console.log(\"-- process --\");\n    }\n\n    var isRequired = {};\n\n    for (var index = 0, len = _tasks.length; index < len; index += 1) {\n      var taskInfo = _tasks[index],\n          dependents = [];\n\n      if (taskInfo.name == startTask || isRequired.hasOwnProperty(taskInfo.name)) {\n        if (logtime) {\n          var startAt = performance.now(); //ignore jslint\n        }\n\n        if (hasChanges = taskInfo.task.process(debug)) {\n          _taskFamily.loopChildren(this, taskInfo.name, function (childTaskName, childTaskInfo) {\n            isRequired[childTaskName] = true;\n\n            if (debug) {\n              dependents.push(childTaskName);\n            }\n\n            return _taskFamily.SKIP;\n          });\n        }\n\n        if (logtime) {\n          var endAt = performance.now(); //ignore jslint\n        }\n\n        if (debug) {\n          var spentTime = Math.round(endAt - startAt, 2); // eslint-disable-next-line no-console\n\n          console.log(index + \". \" + taskInfo.name + (\", \" + spentTime + \" ms. \") + (hasChanges ? \" - forces: \" + dependents.toString() : \"\"));\n        }\n      }\n\n      if (taskInfo.name == stopTask) {\n        return;\n      }\n    }\n  }\n\n  function getProcessDiagramConfig() {\n    var result = [];\n\n    if (_tasks.length === 0) {\n      _taskFamily.loopTopo(this, function (taskName, taskInfo) {\n        taskInfo.task = _dependencies.register(taskName, _dependencies.resolve(taskInfo.dependencies, taskInfo.factory)());\n\n        _tasks.push(taskInfo);\n      });\n    }\n\n    for (var index = 0, len = _tasks.length; index < len; index += 1) {\n      var taskInfo = _tasks[index];\n      var itemConfig = {\n        id: taskInfo.name,\n        title: splitCamelCaseName(taskInfo.name).join(\" \"),\n        description: taskInfo.task.description || \"\",\n        itemTitleColor: taskInfo.color,\n        parents: []\n      };\n\n      _taskFamily.loopParents(this, taskInfo.name, function (parentTaskName, parentTaskInfo) {\n        itemConfig.parents.push(parentTaskName);\n        return _taskFamily.SKIP;\n      });\n\n      result.push(itemConfig);\n    }\n\n    return result;\n  }\n\n  return {\n    addTask: addTask,\n    addDependency: addDependency,\n    getTask: getTask,\n    process: process,\n    getProcessDiagramConfig: getProcessDiagramConfig\n  };\n}\n;","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/managers/TaskManager.js"],"names":["Family","DependencyManager","splitCamelCaseName","TaskManager","_taskFamily","_dependencies","_tasks","TaskInfo","name","dependencies","factory","color","task","addTask","taskName","taskDependencies","length","add","getTask","taskInfo","node","addDependency","dependency","register","process","startTask","stopTask","debug","hasChanges","logtime","loopTopo","resolve","push","console","log","isRequired","index","len","dependents","hasOwnProperty","startAt","performance","now","loopChildren","childTaskName","childTaskInfo","SKIP","endAt","spentTime","Math","round","toString","getProcessDiagramConfig","result","itemConfig","id","title","join","description","itemTitleColor","parents","loopParents","parentTaskName","parentTaskInfo"],"mappings":"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","sourcesContent":["import Family from '../algorithms/Family';\nimport DependencyManager from './DependencyManager';\nimport { splitCamelCaseName } from '../common';\n\nexport default function TaskManager() {\n  var _taskFamily = new Family();\n  var _dependencies = new DependencyManager();\n  var _tasks = [];\n\n  function TaskInfo(name, dependencies, factory, color) {\n    this.name = name;\n    this.dependencies = dependencies;\n    this.factory = factory;\n    this.task = null;\n    this.color = color;\n  }\n\n  function addTask(taskName, taskDependencies, factory, color) {\n    if (_tasks.length > 0) {\n      throw \"Task Manager is already initialized\";\n    }\n    _taskFamily.add(taskDependencies, taskName, new TaskInfo(taskName, taskDependencies, factory, color));\n  }\n\n  function getTask(taskName) {\n    var taskInfo = _taskFamily.node(taskName);\n    return taskInfo && taskInfo.task;\n  }\n\n  function addDependency(name, dependency) {\n    if (_tasks.length > 0) {\n      throw \"Task Manager is already initialized\";\n    }\n    _dependencies.register(name, dependency);\n  }\n\n  function process(startTask, stopTask, debug) {\n    var hasChanges = false,\n      logtime = debug;\n    if (_tasks.length === 0) {\n      _taskFamily.loopTopo(this, function (taskName, taskInfo) {\n        taskInfo.task = _dependencies.register(taskName, _dependencies.resolve(taskInfo.dependencies, taskInfo.factory)());\n        _tasks.push(taskInfo);\n      });\n    }\n    if (debug) {\n      // eslint-disable-next-line no-console\n      console.log(\"-- process --\");\n    }\n    var isRequired = {};\n    for (var index = 0, len = _tasks.length; index < len; index += 1) {\n      var taskInfo = _tasks[index],\n        dependents = [];\n\n      if (taskInfo.name == startTask || isRequired.hasOwnProperty(taskInfo.name)) {\n        if (logtime) {\n          var startAt = performance.now(); //ignore jslint\n        }\n        if ((hasChanges = taskInfo.task.process(debug))) {\n          _taskFamily.loopChildren(this, taskInfo.name, function (childTaskName, childTaskInfo) {\n            isRequired[childTaskName] = true;\n            if (debug) {\n              dependents.push(childTaskName);\n            }\n            return _taskFamily.SKIP;\n          });\n        }\n        if (logtime) {\n          var endAt = performance.now(); //ignore jslint\n        }\n        if (debug) {\n          var spentTime = Math.round((endAt - startAt), 2);\n          // eslint-disable-next-line no-console\n          console.log(index + \". \" + taskInfo.name + (\", \" + spentTime + \" ms. \") + (hasChanges ? \" - forces: \" + dependents.toString() : \"\"));\n        }\n      }\n      if (taskInfo.name == stopTask) {\n        return;\n      }\n    }\n  }\n\n\n  function getProcessDiagramConfig() {\n    var result = [];\n    if (_tasks.length === 0) {\n      _taskFamily.loopTopo(this, function (taskName, taskInfo) {\n        taskInfo.task = _dependencies.register(taskName, _dependencies.resolve(taskInfo.dependencies, taskInfo.factory)());\n        _tasks.push(taskInfo);\n      });\n    }\n    for (var index = 0, len = _tasks.length; index < len; index += 1) {\n      var taskInfo = _tasks[index];\n\n      var itemConfig = {\n        id: taskInfo.name,\n        title: splitCamelCaseName(taskInfo.name).join(\" \"),\n        description: taskInfo.task.description || \"\",\n        itemTitleColor: taskInfo.color,\n        parents: []\n      }\n      _taskFamily.loopParents(this, taskInfo.name, function (parentTaskName, parentTaskInfo) {\n        itemConfig.parents.push(parentTaskName);\n        return _taskFamily.SKIP;\n      });\n      result.push(itemConfig);\n    }\n    return result;\n  }\n\n  return {\n    addTask: addTask,\n    addDependency: addDependency,\n    getTask: getTask,\n    process: process,\n    getProcessDiagramConfig: getProcessDiagramConfig\n  };\n};"]},"metadata":{},"sourceType":"module"}