{"ast":null,"code":"import PaletteItem from './PaletteItem';\nimport { ConnectorStyleType } from '../../enums';\nexport default function PaletteManager(options, linesPalette) {\n  this.palette = [];\n  this.cursor = 0;\n  var index, len;\n  /* pallete based connectors */\n\n  if (linesPalette.length === 0) {\n    /* draw all extra as regular */\n    this.palette = [new PaletteItem({\n      lineColor: options.linesColor,\n      lineWidth: options.linesWidth,\n      lineType: options.linesType\n    })];\n    this.paletteLength = this.palette.length;\n    this.regularIndex = 0;\n  } else {\n    for (index = 0, len = linesPalette.length; index < len; index += 1) {\n      this.palette.push(new PaletteItem(linesPalette[index]));\n    }\n\n    this.paletteLength = this.palette.length;\n    /* regular */\n\n    this.palette.push(new PaletteItem({\n      lineColor: options.linesColor,\n      lineWidth: options.linesWidth,\n      lineType: options.linesType\n    }));\n    this.regularIndex = this.palette.length - 1;\n  }\n  /* highlight */\n\n\n  this.palette.push(new PaletteItem({\n    lineColor: options.highlightLinesColor,\n    lineWidth: options.highlightLinesWidth,\n    lineType: options.highlightLinesType\n  }));\n  this.highlightIndex = this.palette.length - 1;\n}\n;\n\nPaletteManager.prototype.selectPalette = function (index) {\n  this.cursor = index % this.paletteLength;\n};\n\nPaletteManager.prototype.getPalette = function (connectorStyleType) {\n  var index = null;\n\n  switch (connectorStyleType) {\n    case ConnectorStyleType.Regular:\n      index = this.regularIndex;\n      break;\n\n    case ConnectorStyleType.Highlight:\n      index = this.highlightIndex;\n      break;\n\n    case ConnectorStyleType.Extra:\n      index = this.cursor;\n      break;\n  }\n\n  return this.palette[index];\n};","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/graphics/structs/PaletteManager.js"],"names":["PaletteItem","ConnectorStyleType","PaletteManager","options","linesPalette","palette","cursor","index","len","length","lineColor","linesColor","lineWidth","linesWidth","lineType","linesType","paletteLength","regularIndex","push","highlightLinesColor","highlightLinesWidth","highlightLinesType","highlightIndex","prototype","selectPalette","getPalette","connectorStyleType","Regular","Highlight","Extra"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA,SAASC,kBAAT,QAAmC,aAAnC;AAEA,eAAe,SAASC,cAAT,CAAwBC,OAAxB,EAAiCC,YAAjC,EAA+C;AAC5D,OAAKC,OAAL,GAAe,EAAf;AACA,OAAKC,MAAL,GAAc,CAAd;AAEA,MAAIC,KAAJ,EAAWC,GAAX;AAEA;;AACA,MAAIJ,YAAY,CAACK,MAAb,KAAwB,CAA5B,EAA+B;AAC7B;AACA,SAAKJ,OAAL,GAAe,CAAC,IAAIL,WAAJ,CAAgB;AAC9BU,MAAAA,SAAS,EAAEP,OAAO,CAACQ,UADW;AAE9BC,MAAAA,SAAS,EAAET,OAAO,CAACU,UAFW;AAG9BC,MAAAA,QAAQ,EAAEX,OAAO,CAACY;AAHY,KAAhB,CAAD,CAAf;AAKA,SAAKC,aAAL,GAAqB,KAAKX,OAAL,CAAaI,MAAlC;AAEA,SAAKQ,YAAL,GAAoB,CAApB;AACD,GAVD,MAUO;AACL,SAAKV,KAAK,GAAG,CAAR,EAAWC,GAAG,GAAGJ,YAAY,CAACK,MAAnC,EAA2CF,KAAK,GAAGC,GAAnD,EAAwDD,KAAK,IAAI,CAAjE,EAAoE;AAClE,WAAKF,OAAL,CAAaa,IAAb,CAAkB,IAAIlB,WAAJ,CAAgBI,YAAY,CAACG,KAAD,CAA5B,CAAlB;AACD;;AACD,SAAKS,aAAL,GAAqB,KAAKX,OAAL,CAAaI,MAAlC;AAEA;;AACA,SAAKJ,OAAL,CAAaa,IAAb,CAAkB,IAAIlB,WAAJ,CAAgB;AAChCU,MAAAA,SAAS,EAAEP,OAAO,CAACQ,UADa;AAEhCC,MAAAA,SAAS,EAAET,OAAO,CAACU,UAFa;AAGhCC,MAAAA,QAAQ,EAAEX,OAAO,CAACY;AAHc,KAAhB,CAAlB;AAKA,SAAKE,YAAL,GAAoB,KAAKZ,OAAL,CAAaI,MAAb,GAAsB,CAA1C;AACD;AAED;;;AACA,OAAKJ,OAAL,CAAaa,IAAb,CAAkB,IAAIlB,WAAJ,CAAgB;AAChCU,IAAAA,SAAS,EAAEP,OAAO,CAACgB,mBADa;AAEhCP,IAAAA,SAAS,EAAET,OAAO,CAACiB,mBAFa;AAGhCN,IAAAA,QAAQ,EAAEX,OAAO,CAACkB;AAHc,GAAhB,CAAlB;AAKA,OAAKC,cAAL,GAAsB,KAAKjB,OAAL,CAAaI,MAAb,GAAsB,CAA5C;AACD;AAAA;;AAEDP,cAAc,CAACqB,SAAf,CAAyBC,aAAzB,GAAyC,UAAUjB,KAAV,EAAiB;AACxD,OAAKD,MAAL,GAAcC,KAAK,GAAG,KAAKS,aAA3B;AACD,CAFD;;AAIAd,cAAc,CAACqB,SAAf,CAAyBE,UAAzB,GAAsC,UAAUC,kBAAV,EAA8B;AAClE,MAAInB,KAAK,GAAG,IAAZ;;AACA,UAAQmB,kBAAR;AACE,SAAKzB,kBAAkB,CAAC0B,OAAxB;AACEpB,MAAAA,KAAK,GAAG,KAAKU,YAAb;AACA;;AACF,SAAKhB,kBAAkB,CAAC2B,SAAxB;AACErB,MAAAA,KAAK,GAAG,KAAKe,cAAb;AACA;;AACF,SAAKrB,kBAAkB,CAAC4B,KAAxB;AACEtB,MAAAA,KAAK,GAAG,KAAKD,MAAb;AACA;AATJ;;AAWA,SAAO,KAAKD,OAAL,CAAaE,KAAb,CAAP;AACD,CAdD","sourcesContent":["import PaletteItem from './PaletteItem';\nimport { ConnectorStyleType } from '../../enums';\n\nexport default function PaletteManager(options, linesPalette) {\n  this.palette = [];\n  this.cursor = 0;\n\n  var index, len;\n\n  /* pallete based connectors */\n  if (linesPalette.length === 0) {\n    /* draw all extra as regular */\n    this.palette = [new PaletteItem({\n      lineColor: options.linesColor,\n      lineWidth: options.linesWidth,\n      lineType: options.linesType\n    })];\n    this.paletteLength = this.palette.length;\n\n    this.regularIndex = 0;\n  } else {\n    for (index = 0, len = linesPalette.length; index < len; index += 1) {\n      this.palette.push(new PaletteItem(linesPalette[index]));\n    }\n    this.paletteLength = this.palette.length;\n\n    /* regular */\n    this.palette.push(new PaletteItem({\n      lineColor: options.linesColor,\n      lineWidth: options.linesWidth,\n      lineType: options.linesType\n    }));\n    this.regularIndex = this.palette.length - 1;\n  }\n\n  /* highlight */\n  this.palette.push(new PaletteItem({\n    lineColor: options.highlightLinesColor,\n    lineWidth: options.highlightLinesWidth,\n    lineType: options.highlightLinesType\n  }));\n  this.highlightIndex = this.palette.length - 1;\n};\n\nPaletteManager.prototype.selectPalette = function (index) {\n  this.cursor = index % this.paletteLength;\n};\n\nPaletteManager.prototype.getPalette = function (connectorStyleType) {\n  var index = null;\n  switch (connectorStyleType) {\n    case ConnectorStyleType.Regular:\n      index = this.regularIndex;\n      break;\n    case ConnectorStyleType.Highlight:\n      index = this.highlightIndex;\n      break;\n    case ConnectorStyleType.Extra:\n      index = this.cursor;\n      break;\n  }\n  return this.palette[index];\n};"]},"metadata":{},"sourceType":"module"}