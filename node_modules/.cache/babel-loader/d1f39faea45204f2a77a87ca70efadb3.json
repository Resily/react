{"ast":null,"code":"export default function UserDefinedPrimaryParents() {}\n;\n\nUserDefinedPrimaryParents.prototype.getUserDefinedPrimaryParents = function (items, family) {\n  var result = {},\n      index,\n      len;\n  var primaryParents = {};\n\n  for (index = 0, len = items.length; index < len; index += 1) {\n    var item = items[index];\n\n    if (item.primaryParent != null) {\n      primaryParents[item.id] = item.primaryParent;\n    }\n  }\n\n  for (var nodeid in primaryParents) {\n    var primaryParent = primaryParents[nodeid];\n    var trace = {};\n    var nodes = [nodeid];\n\n    while (nodes.length > 0) {\n      var tempNodes = [];\n\n      for (index = 0, len = nodes.length; index < len; index += 1) {\n        nodeid = nodes[index];\n        family.loopParents(this, nodeid, function (parentid, parent) {\n          trace[parentid] = nodeid;\n\n          if (parentid == primaryParent) {\n            while (trace[parentid] != null) {\n              result[trace[parentid]] = parentid;\n              parentid = trace[parentid];\n            }\n\n            tempNodes = [];\n            return family.BREAK;\n          }\n\n          if (parent.isVisible == false) {\n            tempNodes.push(parentid);\n          }\n\n          return family.SKIP;\n        });\n      }\n\n      nodes = tempNodes;\n    }\n  }\n\n  return result;\n};","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/tasks/transformations/familyTransformations/UserDefinedPrimaryParents.js"],"names":["UserDefinedPrimaryParents","prototype","getUserDefinedPrimaryParents","items","family","result","index","len","primaryParents","length","item","primaryParent","id","nodeid","trace","nodes","tempNodes","loopParents","parentid","parent","BREAK","isVisible","push","SKIP"],"mappings":"AAAA,eAAe,SAASA,yBAAT,GAAqC,CAEnD;AAAA;;AAEDA,yBAAyB,CAACC,SAA1B,CAAoCC,4BAApC,GAAmE,UAAUC,KAAV,EAAiBC,MAAjB,EAAyB;AAC1F,MAAIC,MAAM,GAAG,EAAb;AAAA,MACEC,KADF;AAAA,MACSC,GADT;AAGA,MAAIC,cAAc,GAAG,EAArB;;AACA,OAAKF,KAAK,GAAG,CAAR,EAAWC,GAAG,GAAGJ,KAAK,CAACM,MAA5B,EAAoCH,KAAK,GAAGC,GAA5C,EAAiDD,KAAK,IAAI,CAA1D,EAA6D;AAC3D,QAAII,IAAI,GAAGP,KAAK,CAACG,KAAD,CAAhB;;AACA,QAAII,IAAI,CAACC,aAAL,IAAsB,IAA1B,EAAgC;AAC9BH,MAAAA,cAAc,CAACE,IAAI,CAACE,EAAN,CAAd,GAA0BF,IAAI,CAACC,aAA/B;AACD;AACF;;AAED,OAAK,IAAIE,MAAT,IAAmBL,cAAnB,EAAmC;AACjC,QAAIG,aAAa,GAAGH,cAAc,CAACK,MAAD,CAAlC;AACA,QAAIC,KAAK,GAAG,EAAZ;AAEA,QAAIC,KAAK,GAAG,CAACF,MAAD,CAAZ;;AACA,WAAOE,KAAK,CAACN,MAAN,GAAe,CAAtB,EAAyB;AACvB,UAAIO,SAAS,GAAG,EAAhB;;AACA,WAAKV,KAAK,GAAG,CAAR,EAAWC,GAAG,GAAGQ,KAAK,CAACN,MAA5B,EAAoCH,KAAK,GAAGC,GAA5C,EAAiDD,KAAK,IAAI,CAA1D,EAA6D;AAC3DO,QAAAA,MAAM,GAAGE,KAAK,CAACT,KAAD,CAAd;AACAF,QAAAA,MAAM,CAACa,WAAP,CAAmB,IAAnB,EAAyBJ,MAAzB,EAAiC,UAAUK,QAAV,EAAoBC,MAApB,EAA4B;AAC3DL,UAAAA,KAAK,CAACI,QAAD,CAAL,GAAkBL,MAAlB;;AACA,cAAIK,QAAQ,IAAIP,aAAhB,EAA+B;AAC7B,mBAAOG,KAAK,CAACI,QAAD,CAAL,IAAmB,IAA1B,EAAgC;AAC9Bb,cAAAA,MAAM,CAACS,KAAK,CAACI,QAAD,CAAN,CAAN,GAA0BA,QAA1B;AACAA,cAAAA,QAAQ,GAAGJ,KAAK,CAACI,QAAD,CAAhB;AACD;;AACDF,YAAAA,SAAS,GAAG,EAAZ;AACA,mBAAOZ,MAAM,CAACgB,KAAd;AACD;;AACD,cAAID,MAAM,CAACE,SAAP,IAAoB,KAAxB,EAA+B;AAC7BL,YAAAA,SAAS,CAACM,IAAV,CAAeJ,QAAf;AACD;;AACD,iBAAOd,MAAM,CAACmB,IAAd;AACD,SAdD;AAeD;;AACDR,MAAAA,KAAK,GAAGC,SAAR;AACD;AACF;;AACD,SAAOX,MAAP;AACD,CAzCD","sourcesContent":["export default function UserDefinedPrimaryParents() {\n\n};\n\nUserDefinedPrimaryParents.prototype.getUserDefinedPrimaryParents = function (items, family) {\n  var result = {},\n    index, len;\n\n  var primaryParents = {};\n  for (index = 0, len = items.length; index < len; index += 1) {\n    var item = items[index];\n    if (item.primaryParent != null) {\n      primaryParents[item.id] = item.primaryParent;\n    }\n  }\n\n  for (var nodeid in primaryParents) {\n    var primaryParent = primaryParents[nodeid];\n    var trace = {}\n\n    var nodes = [nodeid];\n    while (nodes.length > 0) {\n      var tempNodes = [];\n      for (index = 0, len = nodes.length; index < len; index += 1) {\n        nodeid = nodes[index];\n        family.loopParents(this, nodeid, function (parentid, parent) {\n          trace[parentid] = nodeid;\n          if (parentid == primaryParent) {\n            while (trace[parentid] != null) {\n              result[trace[parentid]] = parentid;\n              parentid = trace[parentid];\n            }\n            tempNodes = [];\n            return family.BREAK;\n          }\n          if (parent.isVisible == false) {\n            tempNodes.push(parentid);\n          }\n          return family.SKIP;\n        })\n      }\n      nodes = tempNodes;\n    }\n  }\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}