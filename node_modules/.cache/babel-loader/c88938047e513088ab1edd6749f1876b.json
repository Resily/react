{"ast":null,"code":"import { isObject, cloneObject } from '../common';\nimport commonBinarySearch from './binarySearch';\nimport commonMergeSort from './mergeSort';\n/**\n * Creates Tree Levels structure. It is diagraming specific auxiliary structure\n * that keeps tree nodes order level by level.\n * @class TreeLevels\n * \n * @param {TreeLevels} [source=undefined] Optional source object to clone content from into the new instance of the structure.\n * @returns {TreeLevels} Returns tree levels structure.\n */\n\nexport default function TreeLevels(source) {\n  var _levels = [],\n      _items = {},\n      _minimum = null,\n      _maximum = null;\n\n  _init(source);\n\n  function _init(source) {\n    if (isObject(source)) {\n      _levels = cloneObject(source.levels, true);\n      _items = cloneObject(source.items, true);\n      _minimum = cloneObject(source.minimum, true);\n      _maximum = cloneObject(source.maximum, true);\n    }\n  }\n\n  function LevelContext(context) {\n    this.context = context;\n    this.items = [];\n  }\n\n  function ItemContext(context, position, level) {\n    this.context = context;\n    this.positions = {};\n    this.positions[level] = position;\n    this.startLevel = level;\n    this.endLevel = level;\n  }\n  /**\n   * Checks if structure has elements.\n   * \n   * @returns {boolean} Returns true if structure has elements.\n   */\n\n\n  function isEmpty() {\n    return !_levels.length;\n  }\n  /**\n   * Number of levels\n   * \n   * @returns {number} Returns number of levels in structure.\n   */\n\n\n  function length() {\n    return _levels.length;\n  }\n  /**\n   * Adds new level. Structure keeps levels sorted by their indexes. The level index can be positive and negative as well.\n   * Structure auto expands collection of levels in both directions and keeps them ordered.\n   * @param {number} level New level index\n   * @param {object} context Context object\n   */\n\n\n  function addLevel(level, context) {\n    var treeLevel = createLevel(level);\n    treeLevel.context = context;\n  }\n  /**\n   * Returns element's start level index in the structure. Element may occupy multiple levels of the tree levels structure.\n   * \n   * @param {string} itemid The element id\n   * @returns {number} Returns start level index\n   */\n\n\n  function getStartLevelIndex(itemid) {\n    return _items.hasOwnProperty(itemid) ? _items[itemid].startLevel : null;\n  }\n  /**\n   * Returns element's end level index in the structure. Element may occupy multiple levels of the tree levels structure.\n   * \n   * @param {string} itemid Element id\n   * @returns {number} Returns end level index\n   */\n\n\n  function getEndLevelIndex(itemid) {\n    return _items.hasOwnProperty(itemid) ? _items[itemid].endLevel : null;\n  }\n  /**\n   * Gets element position at level\n   * \n   * @param {string} itemid Element id\n   * @param {number} level Level index\n   * @returns {number} Returns position of the element \n   */\n\n\n  function getItemPosition(itemid, level) {\n    var context = _items[itemid];\n\n    if (context != null) {\n      if (level != null) {\n        return context.positions[level];\n      } else {\n        return context.positions[context.startLevel];\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Gets element at position\n   * \n   * @param {number} levelIndex Level index\n   * @param {number} position Item position\n   * @returns {number} Returns element id\n   */\n\n\n  function getItemAtPosition(levelIndex, position) {\n    var level = _levels[levelIndex],\n        itemid = null;\n\n    if (level != null) {\n      itemid = level.items[position];\n    }\n\n    return itemid;\n  }\n  /**\n   * Gets previous element\n   * \n   * @param {string} itemid Element id\n   * @param {number} itemLevel Level index\n   * @returns {number} Returns previous element id\n   */\n\n\n  function getPrevItem(itemid, itemLevel) {\n    var result = null;\n\n    if (_items.hasOwnProperty(itemid)) {\n      var item = _items[itemid];\n      itemLevel = itemLevel || item.startLevel;\n      var level = _levels[itemLevel];\n      result = level.items[item.positions[itemLevel] - 1];\n    }\n\n    return result;\n  }\n  /**\n   * Gets next element\n   * \n   * @param {string} itemid Element id\n   * @param {number} itemLevel Level index\n   * @returns {number} Returns next element id\n   */\n\n\n  function getNextItem(itemid, itemLevel) {\n    var result = null;\n\n    if (_items.hasOwnProperty(itemid)) {\n      var item = _items[itemid];\n      itemLevel = itemLevel || item.startLevel;\n      var level = _levels[itemLevel];\n      result = level.items[item.positions[itemLevel] + 1];\n    }\n\n    return result;\n  }\n  /**\n   * Checks if structure contains element\n   * @param {string} itemid Element id\n   * @returns {boolean} Returns true if structure contains given element id\n   */\n\n\n  function hasItem(itemid) {\n    return _items.hasOwnProperty(itemid);\n  }\n  /**\n   * Checks if structure contains level\n   * @param {number} levelIndex Level index\n   * @returns {boolean} Returns true if structure contains given level index\n   */\n\n\n  function hasLevel(levelIndex) {\n    return _levels[levelIndex] != null;\n  }\n  /**\n   * Gets element context object\n   * @param {string} itemid Element id\n   * @returns {object} Returns context object of the element\n   */\n\n\n  function getItemContext(itemid) {\n    var result = null;\n\n    if (_items.hasOwnProperty(itemid)) {\n      result = _items[itemid].context;\n    }\n\n    return result;\n  }\n  /**\n   * Creates new level\n   * @param {index} index New level index\n   * @returns {object} Returns new level empty context object\n   */\n\n\n  function createLevel(index) {\n    if (_levels[index] == null) {\n      _levels[index] = new LevelContext(null);\n      _minimum = _minimum === null ? index : Math.min(_minimum, index);\n      _maximum = _maximum === null ? index : Math.max(_maximum, index);\n    }\n\n    return _levels[index];\n  }\n  /**\n   * Adds element\n   * @param {number} levelIndex Level index\n   * @param {string} itemid New element id\n   * @param {object} context Context object\n   */\n\n\n  function addItem(levelIndex, itemid, context) {\n    var level, itemContext;\n\n    if (!_items.hasOwnProperty(itemid)) {\n      level = createLevel(levelIndex);\n      level.items.push(itemid);\n      _items[itemid] = new ItemContext(context, level.items.length - 1, levelIndex);\n    } else {\n      level = createLevel(levelIndex);\n      level.items.push(itemid);\n      itemContext = _items[itemid];\n      itemContext.positions[levelIndex] = level.items.length - 1;\n      itemContext.startLevel = Math.min(itemContext.startLevel, levelIndex);\n      itemContext.endLevel = Math.max(itemContext.endLevel, levelIndex);\n    }\n  }\n  /**\n   * Callback function for iteration of levels\n   * \n   * @callback onTreeLevelCallback\n   * @param {number} levelIndex Level index\n   * @param {object} level Context object\n   * @returns {boolean} Returns true to break iteration process.\n   */\n\n  /**\n   * Loops levels\n   * \n   * @param {Object} thisArg The callback function invocation context\n   * @param {onTreeLevelCallback} onItem A callback function to call for every level\n   */\n\n\n  function loopLevels(thisArg, onItem) {\n    var index, level;\n\n    if (onItem != null) {\n      for (index = _minimum; index <= _maximum; index += 1) {\n        level = _levels[index];\n\n        if (level != null) {\n          if (onItem.call(thisArg, index, level.context)) {\n            break;\n          }\n        }\n      }\n    }\n  }\n  /**\n   * Loops levels in reversed order\n   * \n   * @param {Object} thisArg The callback function invocation context\n   * @param {onTreeLevelCallback} onItem A callback function to call for every level\n   */\n\n\n  function loopLevelsReversed(thisArg, onItem) {\n    var index, level;\n\n    if (onItem != null) {\n      for (index = _maximum; index >= _minimum; index -= 1) {\n        level = _levels[index];\n\n        if (level != null) {\n          if (onItem.call(thisArg, index, level.context)) {\n            break;\n          }\n        }\n      }\n    }\n  }\n  /**\n   * Gets number of elements at level\n   * \n   * @param {number} levelIndex Level index\n   * @returns {number} Returns number of elements at the level\n   */\n\n\n  function getLevelLength(levelIndex) {\n    var result = 0,\n        level = _levels[levelIndex];\n\n    if (level != null) {\n      result = level.items.length;\n    }\n\n    return result;\n  }\n  /**\n   * Callback function for iteration of level elements\n   * \n   * @callback onTreeLevelItemCallback\n   * @param {string} itemid Element id\n   * @param {object} item Context object of the element\n   * @param {number} position Position of the element at level\n   * @returns {boolean} Returns true to break iteration process.\n   */\n\n  /**\n   * Loops level elements\n   * \n   * @param {Object} thisArg The callback function invocation context\n   * @param {number} levelIndex Level index\n   * @param {onTreeLevelItemCallback} onItem A callback function to call for every item\n   */\n\n\n  function loopLevelItems(thisArg, levelIndex, onItem) {\n    var index, len, level, itemid;\n\n    if (onItem != null) {\n      level = _levels[levelIndex];\n\n      if (level != null) {\n        for (index = 0, len = level.items.length; index < len; index += 1) {\n          itemid = level.items[index];\n\n          if (onItem.call(thisArg, itemid, _items[itemid].context, index)) {\n            break;\n          }\n        }\n      }\n    }\n  }\n  /**\n   * Callback function for iteration of elements level by level\n   * \n   * @callback onTreeLevelsItemCallback\n   * @param {string} itemid Element id\n   * @param {object} item Element context object\n   * @param {number} position Position of the element at level\n   * @param {number} levelIndex Level index\n   * @param {object} level Level context object\n   * @returns {boolean} Returns true to break iteration process.\n   */\n\n  /**\n   * Loops elements level by level\n   * \n   * @param {Object} thisArg The callback function invocation context\n   * @param {onTreeLevelsItemCallback} onItem A callback function to call for every item\n   */\n\n\n  function loopItems(thisArg, onItem) {\n    // function onItem(itemid, item, position, levelIndex, level)\n    var index,\n        len,\n        level,\n        levelIndex,\n        items,\n        itemid,\n        processed = {};\n\n    if (onItem != null) {\n      for (levelIndex = _minimum; levelIndex <= _maximum; levelIndex += 1) {\n        level = _levels[levelIndex];\n\n        if (level != null) {\n          items = level.items;\n\n          for (index = 0, len = items.length; index < len; index += 1) {\n            itemid = items[index];\n\n            if (!processed.hasOwnProperty(itemid)) {\n              processed[itemid] = true;\n\n              if (onItem.call(thisArg, itemid, _items[itemid].context, index, levelIndex, level.context)) {\n                return;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  /**\n   * Callback for finding distance for element\n   *\n   * @callback onTreeLevelDistanceCallback\n   * @param {number} itemid Element id\n   * @param {object} item Context object\n   * @returns {number} Returns distance for the element\n   */\n\n  /**\n   * Searches element at level using binary search\n   * \n   * @param {Object} thisArg The callback function invocation context\n   * @param {number} levelIndex Level index to search element at\n   * @param {onTreeLevelDistanceCallback} onGetDistance A callback function to measure distance for element\n   */\n\n\n  function binarySearch(thisArg, levelIndex, onGetDistance) {\n    var result = null,\n        level;\n\n    if (onGetDistance != null) {\n      level = _levels[levelIndex];\n\n      if (level != null) {\n        result = commonBinarySearch(level.items, function (itemid) {\n          return onGetDistance.call(thisArg, itemid, _items[itemid].context);\n        });\n      }\n    }\n\n    return result.item;\n  }\n  /**\n   * Callback for finding weight of element\n   *\n   * @callback onTreeLevelItemWeightCallback\n   * @param {number} itemid Element id\n   * @param {object} item Context object\n   * @returns {number} Returns distance for the element\n   */\n\n  /**\n   * Callback for iterating items\n   *\n   * @callback onTreeLevelMergedItemCallback\n   * @param {number} itemid Element id\n   * @param {object} item Context object\n   * @returns {number} Returns true to break iteration process.\n   */\n\n  /**\n   * Loops merged elements of tree level structure by weight\n   * \n   * @param {Object} thisArg The callback function invocation context\n   * @param {onTreeLevelItemWeightCallback} getItemWeight Callback to measure weight of the element\n   * @param {onTreeLevelMergedItemCallback} onItem Callback to iterate merged elements\n   */\n\n\n  function loopMerged(thisArg, getItemWeight, onItem) {\n    var index,\n        len,\n        level,\n        itemid,\n        levelsItems = [],\n        sortedItems;\n\n    for (index = 0, len = _levels.length; index < len; index += 1) {\n      level = _levels[index];\n\n      if (level != null) {\n        levelsItems.push(level.items);\n      }\n    }\n\n    sortedItems = commonMergeSort(levelsItems, getItemWeight, true);\n\n    if (onItem != null) {\n      for (index = 0, len = sortedItems.length; index < len; index += 1) {\n        itemid = sortedItems[index];\n\n        if (onItem.call(thisArg, itemid, _items[itemid].context)) {\n          break;\n        }\n      }\n    }\n  }\n  /**\n   * Loops level elements starting with the given item\n   * \n   * @param {Object} thisArg The callback function invocation context\n   * @param {string} itemid Start element id\n   * @param {boolean} isLeft If true then method loops leftward\n   * @param {onTreeLevelMergedItemCallback} onItem Callback function to call for every item\n   * @param {number} level Level index\n   */\n\n\n  function loopFromItem(thisArg, itemid, isLeft, onItem, level) {\n    var context, index, len, items, nextItemId, itemLevel, position;\n\n    if (_items.hasOwnProperty(itemid)) {\n      context = _items[itemid];\n      itemLevel = level || context.startLevel;\n      items = _levels[itemLevel].items;\n      position = context.positions[itemLevel];\n\n      if (onItem != null) {\n        if (isLeft) {\n          for (index = position - 1; index >= 0; index -= 1) {\n            nextItemId = items[index];\n\n            if (onItem.call(thisArg, nextItemId, _items[nextItemId].context)) {\n              break;\n            }\n          }\n        } else {\n          for (index = position + 1, len = items.length; index < len; index += 1) {\n            nextItemId = items[index];\n\n            if (onItem.call(thisArg, nextItemId, _items[nextItemId].context)) {\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n  /**\n   * Loops levels starting with the given element end level. Element may occupy multiple levels, \n   * so this method starts level iteration from next level after or before item levels.\n   * \n   * @param {Object} thisArg The callback function invocation context\n   * @param {string} itemid Element id\n   * @param {boolean} isBelow If true then method loops levels backward\n   * @param {onTreeLevelCallback} onItem Callback function to call for every level\n   */\n\n\n  function loopLevelsFromItem(thisArg, itemid, isBelow, onItem) {\n    // function(levelIndex, level)\n    var context, index, len, items, item, nextItemId, nextLevels, level;\n\n    if (_items.hasOwnProperty(itemid)) {\n      context = _items[itemid];\n\n      if (onItem != null) {\n        if (isBelow) {\n          for (index = context.endLevel + 1; index <= _maximum; index += 1) {\n            level = _levels[index];\n\n            if (onItem.call(thisArg, index, level != null ? level.context : null)) {\n              break;\n            }\n          }\n        } else {\n          for (index = context.startLevel - 1; index >= _minimum; index -= 1) {\n            level = _levels[index];\n\n            if (onItem.call(thisArg, index, level != null ? level.context : null)) {\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n  /**\n   * Clones tree levels structure.\n   * \n   * @returns {TreeLevels} Returns cloned copy of the structure\n   */\n\n\n  function clone() {\n    return TreeLevels({\n      levels: _levels,\n      items: _items,\n      minimum: _minimum,\n      maximum: _maximum\n    });\n  }\n\n  return {\n    addlevel: addLevel,\n    hasLevel: hasLevel,\n    hasItem: hasItem,\n    addItem: addItem,\n    getItemContext: getItemContext,\n    getLevelIndex: getStartLevelIndex,\n    getEndLevelIndex: getEndLevelIndex,\n    getItemPosition: getItemPosition,\n    getItemAtPosition: getItemAtPosition,\n    loopLevels: loopLevels,\n    loopLevelsReversed: loopLevelsReversed,\n    loopLevelItems: loopLevelItems,\n    getLevelLength: getLevelLength,\n    loopItems: loopItems,\n    binarySearch: binarySearch,\n    loopMerged: loopMerged,\n    loopFromItem: loopFromItem,\n    loopLevelsFromItem: loopLevelsFromItem,\n    getPrevItem: getPrevItem,\n    getNextItem: getNextItem,\n    length: length,\n    isEmpty: isEmpty,\n    clone: clone\n  };\n}\n;","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/algorithms/TreeLevels.js"],"names":["isObject","cloneObject","commonBinarySearch","commonMergeSort","TreeLevels","source","_levels","_items","_minimum","_maximum","_init","levels","items","minimum","maximum","LevelContext","context","ItemContext","position","level","positions","startLevel","endLevel","isEmpty","length","addLevel","treeLevel","createLevel","getStartLevelIndex","itemid","hasOwnProperty","getEndLevelIndex","getItemPosition","getItemAtPosition","levelIndex","getPrevItem","itemLevel","result","item","getNextItem","hasItem","hasLevel","getItemContext","index","Math","min","max","addItem","itemContext","push","loopLevels","thisArg","onItem","call","loopLevelsReversed","getLevelLength","loopLevelItems","len","loopItems","processed","binarySearch","onGetDistance","loopMerged","getItemWeight","levelsItems","sortedItems","loopFromItem","isLeft","nextItemId","loopLevelsFromItem","isBelow","nextLevels","clone","addlevel","getLevelIndex"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,WAAtC;AACA,OAAOC,kBAAP,MAA+B,gBAA/B;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,UAAT,CAAoBC,MAApB,EAA4B;AACzC,MAAIC,OAAO,GAAG,EAAd;AAAA,MACEC,MAAM,GAAG,EADX;AAAA,MAEEC,QAAQ,GAAG,IAFb;AAAA,MAGEC,QAAQ,GAAG,IAHb;;AAKAC,EAAAA,KAAK,CAACL,MAAD,CAAL;;AAEA,WAASK,KAAT,CAAeL,MAAf,EAAuB;AACrB,QAAIL,QAAQ,CAACK,MAAD,CAAZ,EAAsB;AACpBC,MAAAA,OAAO,GAAGL,WAAW,CAACI,MAAM,CAACM,MAAR,EAAgB,IAAhB,CAArB;AACAJ,MAAAA,MAAM,GAAGN,WAAW,CAACI,MAAM,CAACO,KAAR,EAAe,IAAf,CAApB;AACAJ,MAAAA,QAAQ,GAAGP,WAAW,CAACI,MAAM,CAACQ,OAAR,EAAiB,IAAjB,CAAtB;AACAJ,MAAAA,QAAQ,GAAGR,WAAW,CAACI,MAAM,CAACS,OAAR,EAAiB,IAAjB,CAAtB;AACD;AACF;;AAED,WAASC,YAAT,CAAsBC,OAAtB,EAA+B;AAC7B,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKJ,KAAL,GAAa,EAAb;AACD;;AAED,WAASK,WAAT,CAAqBD,OAArB,EAA8BE,QAA9B,EAAwCC,KAAxC,EAA+C;AAC7C,SAAKH,OAAL,GAAeA,OAAf;AACA,SAAKI,SAAL,GAAiB,EAAjB;AACA,SAAKA,SAAL,CAAeD,KAAf,IAAwBD,QAAxB;AACA,SAAKG,UAAL,GAAkBF,KAAlB;AACA,SAAKG,QAAL,GAAgBH,KAAhB;AACD;AAED;AACF;AACA;AACA;AACA;;;AACE,WAASI,OAAT,GAAmB;AACjB,WAAO,CAACjB,OAAO,CAACkB,MAAhB;AACD;AAED;AACF;AACA;AACA;AACA;;;AACE,WAASA,MAAT,GAAkB;AAChB,WAAOlB,OAAO,CAACkB,MAAf;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE,WAASC,QAAT,CAAkBN,KAAlB,EAAyBH,OAAzB,EAAkC;AAChC,QAAIU,SAAS,GAAGC,WAAW,CAACR,KAAD,CAA3B;AACAO,IAAAA,SAAS,CAACV,OAAV,GAAoBA,OAApB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE,WAASY,kBAAT,CAA4BC,MAA5B,EAAoC;AAClC,WAAOtB,MAAM,CAACuB,cAAP,CAAsBD,MAAtB,IAAgCtB,MAAM,CAACsB,MAAD,CAAN,CAAeR,UAA/C,GAA4D,IAAnE;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE,WAASU,gBAAT,CAA0BF,MAA1B,EAAkC;AAChC,WAAOtB,MAAM,CAACuB,cAAP,CAAsBD,MAAtB,IAAgCtB,MAAM,CAACsB,MAAD,CAAN,CAAeP,QAA/C,GAA0D,IAAjE;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACE,WAASU,eAAT,CAAyBH,MAAzB,EAAiCV,KAAjC,EAAwC;AACtC,QAAIH,OAAO,GAAGT,MAAM,CAACsB,MAAD,CAApB;;AACA,QAAIb,OAAO,IAAI,IAAf,EAAqB;AACnB,UAAIG,KAAK,IAAI,IAAb,EAAmB;AACjB,eAAOH,OAAO,CAACI,SAAR,CAAkBD,KAAlB,CAAP;AACD,OAFD,MAEO;AACL,eAAOH,OAAO,CAACI,SAAR,CAAkBJ,OAAO,CAACK,UAA1B,CAAP;AACD;AACF;;AACD,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACE,WAASY,iBAAT,CAA2BC,UAA3B,EAAuChB,QAAvC,EAAiD;AAC/C,QAAIC,KAAK,GAAGb,OAAO,CAAC4B,UAAD,CAAnB;AAAA,QACEL,MAAM,GAAG,IADX;;AAEA,QAAIV,KAAK,IAAI,IAAb,EAAmB;AACjBU,MAAAA,MAAM,GAAGV,KAAK,CAACP,KAAN,CAAYM,QAAZ,CAAT;AACD;;AACD,WAAOW,MAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACE,WAASM,WAAT,CAAqBN,MAArB,EAA6BO,SAA7B,EAAwC;AACtC,QAAIC,MAAM,GAAG,IAAb;;AACA,QAAI9B,MAAM,CAACuB,cAAP,CAAsBD,MAAtB,CAAJ,EAAmC;AACjC,UAAIS,IAAI,GAAG/B,MAAM,CAACsB,MAAD,CAAjB;AACAO,MAAAA,SAAS,GAAGA,SAAS,IAAIE,IAAI,CAACjB,UAA9B;AACA,UAAIF,KAAK,GAAGb,OAAO,CAAC8B,SAAD,CAAnB;AACAC,MAAAA,MAAM,GAAGlB,KAAK,CAACP,KAAN,CAAY0B,IAAI,CAAClB,SAAL,CAAegB,SAAf,IAA4B,CAAxC,CAAT;AACD;;AACD,WAAOC,MAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACE,WAASE,WAAT,CAAqBV,MAArB,EAA6BO,SAA7B,EAAwC;AACtC,QAAIC,MAAM,GAAG,IAAb;;AACA,QAAI9B,MAAM,CAACuB,cAAP,CAAsBD,MAAtB,CAAJ,EAAmC;AACjC,UAAIS,IAAI,GAAG/B,MAAM,CAACsB,MAAD,CAAjB;AACAO,MAAAA,SAAS,GAAGA,SAAS,IAAIE,IAAI,CAACjB,UAA9B;AACA,UAAIF,KAAK,GAAGb,OAAO,CAAC8B,SAAD,CAAnB;AACAC,MAAAA,MAAM,GAAGlB,KAAK,CAACP,KAAN,CAAY0B,IAAI,CAAClB,SAAL,CAAegB,SAAf,IAA4B,CAAxC,CAAT;AACD;;AACD,WAAOC,MAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACE,WAASG,OAAT,CAAiBX,MAAjB,EAAyB;AACvB,WAAOtB,MAAM,CAACuB,cAAP,CAAsBD,MAAtB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACE,WAASY,QAAT,CAAkBP,UAAlB,EAA8B;AAC5B,WAAO5B,OAAO,CAAC4B,UAAD,CAAP,IAAuB,IAA9B;AACD;AAED;AACF;AACA;AACA;AACA;;;AACE,WAASQ,cAAT,CAAwBb,MAAxB,EAAgC;AAC9B,QAAIQ,MAAM,GAAG,IAAb;;AACA,QAAI9B,MAAM,CAACuB,cAAP,CAAsBD,MAAtB,CAAJ,EAAmC;AACjCQ,MAAAA,MAAM,GAAG9B,MAAM,CAACsB,MAAD,CAAN,CAAeb,OAAxB;AACD;;AACD,WAAOqB,MAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACE,WAASV,WAAT,CAAqBgB,KAArB,EAA4B;AAC1B,QAAIrC,OAAO,CAACqC,KAAD,CAAP,IAAkB,IAAtB,EAA4B;AAC1BrC,MAAAA,OAAO,CAACqC,KAAD,CAAP,GAAiB,IAAI5B,YAAJ,CAAiB,IAAjB,CAAjB;AAEAP,MAAAA,QAAQ,GAAGA,QAAQ,KAAK,IAAb,GAAoBmC,KAApB,GAA4BC,IAAI,CAACC,GAAL,CAASrC,QAAT,EAAmBmC,KAAnB,CAAvC;AACAlC,MAAAA,QAAQ,GAAGA,QAAQ,KAAK,IAAb,GAAoBkC,KAApB,GAA4BC,IAAI,CAACE,GAAL,CAASrC,QAAT,EAAmBkC,KAAnB,CAAvC;AACD;;AACD,WAAOrC,OAAO,CAACqC,KAAD,CAAd;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE,WAASI,OAAT,CAAiBb,UAAjB,EAA6BL,MAA7B,EAAqCb,OAArC,EAA8C;AAC5C,QAAIG,KAAJ,EAAW6B,WAAX;;AACA,QAAI,CAACzC,MAAM,CAACuB,cAAP,CAAsBD,MAAtB,CAAL,EAAoC;AAClCV,MAAAA,KAAK,GAAGQ,WAAW,CAACO,UAAD,CAAnB;AACAf,MAAAA,KAAK,CAACP,KAAN,CAAYqC,IAAZ,CAAiBpB,MAAjB;AACAtB,MAAAA,MAAM,CAACsB,MAAD,CAAN,GAAiB,IAAIZ,WAAJ,CAAgBD,OAAhB,EAAyBG,KAAK,CAACP,KAAN,CAAYY,MAAZ,GAAqB,CAA9C,EAAiDU,UAAjD,CAAjB;AACD,KAJD,MAIO;AACLf,MAAAA,KAAK,GAAGQ,WAAW,CAACO,UAAD,CAAnB;AACAf,MAAAA,KAAK,CAACP,KAAN,CAAYqC,IAAZ,CAAiBpB,MAAjB;AACAmB,MAAAA,WAAW,GAAGzC,MAAM,CAACsB,MAAD,CAApB;AACAmB,MAAAA,WAAW,CAAC5B,SAAZ,CAAsBc,UAAtB,IAAoCf,KAAK,CAACP,KAAN,CAAYY,MAAZ,GAAqB,CAAzD;AACAwB,MAAAA,WAAW,CAAC3B,UAAZ,GAAyBuB,IAAI,CAACC,GAAL,CAASG,WAAW,CAAC3B,UAArB,EAAiCa,UAAjC,CAAzB;AACAc,MAAAA,WAAW,CAAC1B,QAAZ,GAAuBsB,IAAI,CAACE,GAAL,CAASE,WAAW,CAAC1B,QAArB,EAA+BY,UAA/B,CAAvB;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;;;AACE,WAASgB,UAAT,CAAoBC,OAApB,EAA6BC,MAA7B,EAAqC;AACnC,QAAIT,KAAJ,EACExB,KADF;;AAEA,QAAIiC,MAAM,IAAI,IAAd,EAAoB;AAClB,WAAKT,KAAK,GAAGnC,QAAb,EAAuBmC,KAAK,IAAIlC,QAAhC,EAA0CkC,KAAK,IAAI,CAAnD,EAAsD;AACpDxB,QAAAA,KAAK,GAAGb,OAAO,CAACqC,KAAD,CAAf;;AACA,YAAIxB,KAAK,IAAI,IAAb,EAAmB;AACjB,cAAIiC,MAAM,CAACC,IAAP,CAAYF,OAAZ,EAAqBR,KAArB,EAA4BxB,KAAK,CAACH,OAAlC,CAAJ,EAAgD;AAC9C;AACD;AACF;AACF;AACF;AACF;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE,WAASsC,kBAAT,CAA4BH,OAA5B,EAAqCC,MAArC,EAA6C;AAC3C,QAAIT,KAAJ,EACExB,KADF;;AAEA,QAAIiC,MAAM,IAAI,IAAd,EAAoB;AAClB,WAAKT,KAAK,GAAGlC,QAAb,EAAuBkC,KAAK,IAAInC,QAAhC,EAA0CmC,KAAK,IAAI,CAAnD,EAAsD;AACpDxB,QAAAA,KAAK,GAAGb,OAAO,CAACqC,KAAD,CAAf;;AACA,YAAIxB,KAAK,IAAI,IAAb,EAAmB;AACjB,cAAIiC,MAAM,CAACC,IAAP,CAAYF,OAAZ,EAAqBR,KAArB,EAA4BxB,KAAK,CAACH,OAAlC,CAAJ,EAAgD;AAC9C;AACD;AACF;AACF;AACF;AACF;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE,WAASuC,cAAT,CAAwBrB,UAAxB,EAAoC;AAClC,QAAIG,MAAM,GAAG,CAAb;AAAA,QACElB,KAAK,GAAGb,OAAO,CAAC4B,UAAD,CADjB;;AAEA,QAAIf,KAAK,IAAI,IAAb,EAAmB;AACjBkB,MAAAA,MAAM,GAAGlB,KAAK,CAACP,KAAN,CAAYY,MAArB;AACD;;AACD,WAAOa,MAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;;;AACE,WAASmB,cAAT,CAAwBL,OAAxB,EAAiCjB,UAAjC,EAA6CkB,MAA7C,EAAqD;AACnD,QAAIT,KAAJ,EAAWc,GAAX,EACEtC,KADF,EAEEU,MAFF;;AAGA,QAAIuB,MAAM,IAAI,IAAd,EAAoB;AAClBjC,MAAAA,KAAK,GAAGb,OAAO,CAAC4B,UAAD,CAAf;;AACA,UAAIf,KAAK,IAAI,IAAb,EAAmB;AACjB,aAAKwB,KAAK,GAAG,CAAR,EAAWc,GAAG,GAAGtC,KAAK,CAACP,KAAN,CAAYY,MAAlC,EAA0CmB,KAAK,GAAGc,GAAlD,EAAuDd,KAAK,IAAI,CAAhE,EAAmE;AACjEd,UAAAA,MAAM,GAAGV,KAAK,CAACP,KAAN,CAAY+B,KAAZ,CAAT;;AACA,cAAIS,MAAM,CAACC,IAAP,CAAYF,OAAZ,EAAqBtB,MAArB,EAA6BtB,MAAM,CAACsB,MAAD,CAAN,CAAeb,OAA5C,EAAqD2B,KAArD,CAAJ,EAAiE;AAC/D;AACD;AACF;AACF;AACF;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;;;AACE,WAASe,SAAT,CAAmBP,OAAnB,EAA4BC,MAA5B,EAAoC;AAAE;AACpC,QAAIT,KAAJ;AAAA,QAAWc,GAAX;AAAA,QACEtC,KADF;AAAA,QACSe,UADT;AAAA,QAEEtB,KAFF;AAAA,QAGEiB,MAHF;AAAA,QAIE8B,SAAS,GAAG,EAJd;;AAKA,QAAIP,MAAM,IAAI,IAAd,EAAoB;AAClB,WAAKlB,UAAU,GAAG1B,QAAlB,EAA4B0B,UAAU,IAAIzB,QAA1C,EAAoDyB,UAAU,IAAI,CAAlE,EAAqE;AACnEf,QAAAA,KAAK,GAAGb,OAAO,CAAC4B,UAAD,CAAf;;AACA,YAAIf,KAAK,IAAI,IAAb,EAAmB;AACjBP,UAAAA,KAAK,GAAGO,KAAK,CAACP,KAAd;;AACA,eAAK+B,KAAK,GAAG,CAAR,EAAWc,GAAG,GAAG7C,KAAK,CAACY,MAA5B,EAAoCmB,KAAK,GAAGc,GAA5C,EAAiDd,KAAK,IAAI,CAA1D,EAA6D;AAC3Dd,YAAAA,MAAM,GAAGjB,KAAK,CAAC+B,KAAD,CAAd;;AACA,gBAAI,CAACgB,SAAS,CAAC7B,cAAV,CAAyBD,MAAzB,CAAL,EAAuC;AACrC8B,cAAAA,SAAS,CAAC9B,MAAD,CAAT,GAAoB,IAApB;;AACA,kBAAIuB,MAAM,CAACC,IAAP,CAAYF,OAAZ,EAAqBtB,MAArB,EAA6BtB,MAAM,CAACsB,MAAD,CAAN,CAAeb,OAA5C,EAAqD2B,KAArD,EAA4DT,UAA5D,EAAwEf,KAAK,CAACH,OAA9E,CAAJ,EAA4F;AAC1F;AACD;AACF;AACF;AACF;AACF;AACF;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;;;AACE,WAAS4C,YAAT,CAAsBT,OAAtB,EAA+BjB,UAA/B,EAA2C2B,aAA3C,EAA0D;AACxD,QAAIxB,MAAM,GAAG,IAAb;AAAA,QACElB,KADF;;AAEA,QAAI0C,aAAa,IAAI,IAArB,EAA2B;AACzB1C,MAAAA,KAAK,GAAGb,OAAO,CAAC4B,UAAD,CAAf;;AACA,UAAIf,KAAK,IAAI,IAAb,EAAmB;AACjBkB,QAAAA,MAAM,GAAGnC,kBAAkB,CAACiB,KAAK,CAACP,KAAP,EAAc,UAAUiB,MAAV,EAAkB;AACzD,iBAAOgC,aAAa,CAACR,IAAd,CAAmBF,OAAnB,EAA4BtB,MAA5B,EAAoCtB,MAAM,CAACsB,MAAD,CAAN,CAAeb,OAAnD,CAAP;AACD,SAF0B,CAA3B;AAGD;AACF;;AACD,WAAOqB,MAAM,CAACC,IAAd;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;;;AACE,WAASwB,UAAT,CAAoBX,OAApB,EAA6BY,aAA7B,EAA4CX,MAA5C,EAAoD;AAClD,QAAIT,KAAJ;AAAA,QAAWc,GAAX;AAAA,QACEtC,KADF;AAAA,QAEEU,MAFF;AAAA,QAGEmC,WAAW,GAAG,EAHhB;AAAA,QAIEC,WAJF;;AAMA,SAAKtB,KAAK,GAAG,CAAR,EAAWc,GAAG,GAAGnD,OAAO,CAACkB,MAA9B,EAAsCmB,KAAK,GAAGc,GAA9C,EAAmDd,KAAK,IAAI,CAA5D,EAA+D;AAC7DxB,MAAAA,KAAK,GAAGb,OAAO,CAACqC,KAAD,CAAf;;AACA,UAAIxB,KAAK,IAAI,IAAb,EAAmB;AACjB6C,QAAAA,WAAW,CAACf,IAAZ,CAAiB9B,KAAK,CAACP,KAAvB;AACD;AACF;;AAEDqD,IAAAA,WAAW,GAAG9D,eAAe,CAAC6D,WAAD,EAAcD,aAAd,EAA6B,IAA7B,CAA7B;;AAEA,QAAIX,MAAM,IAAI,IAAd,EAAoB;AAClB,WAAKT,KAAK,GAAG,CAAR,EAAWc,GAAG,GAAGQ,WAAW,CAACzC,MAAlC,EAA0CmB,KAAK,GAAGc,GAAlD,EAAuDd,KAAK,IAAI,CAAhE,EAAmE;AACjEd,QAAAA,MAAM,GAAGoC,WAAW,CAACtB,KAAD,CAApB;;AACA,YAAIS,MAAM,CAACC,IAAP,CAAYF,OAAZ,EAAqBtB,MAArB,EAA6BtB,MAAM,CAACsB,MAAD,CAAN,CAAeb,OAA5C,CAAJ,EAA0D;AACxD;AACD;AACF;AACF;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,WAASkD,YAAT,CAAsBf,OAAtB,EAA+BtB,MAA/B,EAAuCsC,MAAvC,EAA+Cf,MAA/C,EAAuDjC,KAAvD,EAA8D;AAC5D,QAAIH,OAAJ,EACE2B,KADF,EACSc,GADT,EAEE7C,KAFF,EAESwD,UAFT,EAGEhC,SAHF,EAGalB,QAHb;;AAIA,QAAIX,MAAM,CAACuB,cAAP,CAAsBD,MAAtB,CAAJ,EAAmC;AACjCb,MAAAA,OAAO,GAAGT,MAAM,CAACsB,MAAD,CAAhB;AACAO,MAAAA,SAAS,GAAGjB,KAAK,IAAIH,OAAO,CAACK,UAA7B;AACAT,MAAAA,KAAK,GAAGN,OAAO,CAAC8B,SAAD,CAAP,CAAmBxB,KAA3B;AACAM,MAAAA,QAAQ,GAAGF,OAAO,CAACI,SAAR,CAAkBgB,SAAlB,CAAX;;AACA,UAAIgB,MAAM,IAAI,IAAd,EAAoB;AAClB,YAAIe,MAAJ,EAAY;AACV,eAAKxB,KAAK,GAAGzB,QAAQ,GAAG,CAAxB,EAA2ByB,KAAK,IAAI,CAApC,EAAuCA,KAAK,IAAI,CAAhD,EAAmD;AACjDyB,YAAAA,UAAU,GAAGxD,KAAK,CAAC+B,KAAD,CAAlB;;AACA,gBAAIS,MAAM,CAACC,IAAP,CAAYF,OAAZ,EAAqBiB,UAArB,EAAiC7D,MAAM,CAAC6D,UAAD,CAAN,CAAmBpD,OAApD,CAAJ,EAAkE;AAChE;AACD;AACF;AACF,SAPD,MAOO;AACL,eAAK2B,KAAK,GAAGzB,QAAQ,GAAG,CAAnB,EAAsBuC,GAAG,GAAG7C,KAAK,CAACY,MAAvC,EAA+CmB,KAAK,GAAGc,GAAvD,EAA4Dd,KAAK,IAAI,CAArE,EAAwE;AACtEyB,YAAAA,UAAU,GAAGxD,KAAK,CAAC+B,KAAD,CAAlB;;AACA,gBAAIS,MAAM,CAACC,IAAP,CAAYF,OAAZ,EAAqBiB,UAArB,EAAiC7D,MAAM,CAAC6D,UAAD,CAAN,CAAmBpD,OAApD,CAAJ,EAAkE;AAChE;AACD;AACF;AACF;AACF;AACF;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,WAASqD,kBAAT,CAA4BlB,OAA5B,EAAqCtB,MAArC,EAA6CyC,OAA7C,EAAsDlB,MAAtD,EAA8D;AAAE;AAC9D,QAAIpC,OAAJ,EACE2B,KADF,EACSc,GADT,EAEE7C,KAFF,EAES0B,IAFT,EAEe8B,UAFf,EAGEG,UAHF,EAGcpD,KAHd;;AAIA,QAAIZ,MAAM,CAACuB,cAAP,CAAsBD,MAAtB,CAAJ,EAAmC;AACjCb,MAAAA,OAAO,GAAGT,MAAM,CAACsB,MAAD,CAAhB;;AACA,UAAIuB,MAAM,IAAI,IAAd,EAAoB;AAClB,YAAIkB,OAAJ,EAAa;AACX,eAAK3B,KAAK,GAAG3B,OAAO,CAACM,QAAR,GAAmB,CAAhC,EAAmCqB,KAAK,IAAIlC,QAA5C,EAAsDkC,KAAK,IAAI,CAA/D,EAAkE;AAChExB,YAAAA,KAAK,GAAGb,OAAO,CAACqC,KAAD,CAAf;;AACA,gBAAIS,MAAM,CAACC,IAAP,CAAYF,OAAZ,EAAqBR,KAArB,EAA4BxB,KAAK,IAAI,IAAT,GAAgBA,KAAK,CAACH,OAAtB,GAAgC,IAA5D,CAAJ,EAAuE;AACrE;AACD;AACF;AACF,SAPD,MAOO;AACL,eAAK2B,KAAK,GAAG3B,OAAO,CAACK,UAAR,GAAqB,CAAlC,EAAqCsB,KAAK,IAAInC,QAA9C,EAAwDmC,KAAK,IAAI,CAAjE,EAAoE;AAClExB,YAAAA,KAAK,GAAGb,OAAO,CAACqC,KAAD,CAAf;;AACA,gBAAIS,MAAM,CAACC,IAAP,CAAYF,OAAZ,EAAqBR,KAArB,EAA4BxB,KAAK,IAAI,IAAT,GAAgBA,KAAK,CAACH,OAAtB,GAAgC,IAA5D,CAAJ,EAAuE;AACrE;AACD;AACF;AACF;AACF;AACF;AACF;AAED;AACF;AACA;AACA;AACA;;;AACE,WAASwD,KAAT,GAAiB;AACf,WAAOpE,UAAU,CAAC;AAChBO,MAAAA,MAAM,EAAEL,OADQ;AAEhBM,MAAAA,KAAK,EAAEL,MAFS;AAGhBM,MAAAA,OAAO,EAAEL,QAHO;AAIhBM,MAAAA,OAAO,EAAEL;AAJO,KAAD,CAAjB;AAMD;;AAED,SAAO;AACLgE,IAAAA,QAAQ,EAAEhD,QADL;AAELgB,IAAAA,QAAQ,EAAEA,QAFL;AAGLD,IAAAA,OAAO,EAAEA,OAHJ;AAILO,IAAAA,OAAO,EAAEA,OAJJ;AAKLL,IAAAA,cAAc,EAAEA,cALX;AAMLgC,IAAAA,aAAa,EAAE9C,kBANV;AAOLG,IAAAA,gBAAgB,EAAEA,gBAPb;AAQLC,IAAAA,eAAe,EAAEA,eARZ;AASLC,IAAAA,iBAAiB,EAAEA,iBATd;AAULiB,IAAAA,UAAU,EAAEA,UAVP;AAWLI,IAAAA,kBAAkB,EAAEA,kBAXf;AAYLE,IAAAA,cAAc,EAAEA,cAZX;AAaLD,IAAAA,cAAc,EAAEA,cAbX;AAcLG,IAAAA,SAAS,EAAEA,SAdN;AAeLE,IAAAA,YAAY,EAAEA,YAfT;AAgBLE,IAAAA,UAAU,EAAEA,UAhBP;AAiBLI,IAAAA,YAAY,EAAEA,YAjBT;AAkBLG,IAAAA,kBAAkB,EAAEA,kBAlBf;AAmBLlC,IAAAA,WAAW,EAAEA,WAnBR;AAoBLI,IAAAA,WAAW,EAAEA,WApBR;AAqBLf,IAAAA,MAAM,EAAEA,MArBH;AAsBLD,IAAAA,OAAO,EAAEA,OAtBJ;AAwBLiD,IAAAA,KAAK,EAAEA;AAxBF,GAAP;AA0BD;AAAA","sourcesContent":["import { isObject, cloneObject } from '../common';\nimport commonBinarySearch from './binarySearch';\nimport commonMergeSort from './mergeSort';\n/**\n * Creates Tree Levels structure. It is diagraming specific auxiliary structure\n * that keeps tree nodes order level by level.\n * @class TreeLevels\n * \n * @param {TreeLevels} [source=undefined] Optional source object to clone content from into the new instance of the structure.\n * @returns {TreeLevels} Returns tree levels structure.\n */\nexport default function TreeLevels(source) {\n  var _levels = [],\n    _items = {},\n    _minimum = null,\n    _maximum = null;\n\n  _init(source);\n\n  function _init(source) {\n    if (isObject(source)) {\n      _levels = cloneObject(source.levels, true);\n      _items = cloneObject(source.items, true);\n      _minimum = cloneObject(source.minimum, true);\n      _maximum = cloneObject(source.maximum, true);\n    }\n  }\n\n  function LevelContext(context) {\n    this.context = context;\n    this.items = [];\n  }\n\n  function ItemContext(context, position, level) {\n    this.context = context;\n    this.positions = {};\n    this.positions[level] = position;\n    this.startLevel = level;\n    this.endLevel = level;\n  }\n\n  /**\n   * Checks if structure has elements.\n   * \n   * @returns {boolean} Returns true if structure has elements.\n   */\n  function isEmpty() {\n    return !_levels.length;\n  }\n\n  /**\n   * Number of levels\n   * \n   * @returns {number} Returns number of levels in structure.\n   */\n  function length() {\n    return _levels.length;\n  }\n\n  /**\n   * Adds new level. Structure keeps levels sorted by their indexes. The level index can be positive and negative as well.\n   * Structure auto expands collection of levels in both directions and keeps them ordered.\n   * @param {number} level New level index\n   * @param {object} context Context object\n   */\n  function addLevel(level, context) {\n    var treeLevel = createLevel(level);\n    treeLevel.context = context;\n  }\n\n  /**\n   * Returns element's start level index in the structure. Element may occupy multiple levels of the tree levels structure.\n   * \n   * @param {string} itemid The element id\n   * @returns {number} Returns start level index\n   */\n  function getStartLevelIndex(itemid) {\n    return _items.hasOwnProperty(itemid) ? _items[itemid].startLevel : null;\n  }\n\n  /**\n   * Returns element's end level index in the structure. Element may occupy multiple levels of the tree levels structure.\n   * \n   * @param {string} itemid Element id\n   * @returns {number} Returns end level index\n   */\n  function getEndLevelIndex(itemid) {\n    return _items.hasOwnProperty(itemid) ? _items[itemid].endLevel : null;\n  }\n\n  /**\n   * Gets element position at level\n   * \n   * @param {string} itemid Element id\n   * @param {number} level Level index\n   * @returns {number} Returns position of the element \n   */\n  function getItemPosition(itemid, level) {\n    var context = _items[itemid];\n    if (context != null) {\n      if (level != null) {\n        return context.positions[level];\n      } else {\n        return context.positions[context.startLevel];\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Gets element at position\n   * \n   * @param {number} levelIndex Level index\n   * @param {number} position Item position\n   * @returns {number} Returns element id\n   */\n  function getItemAtPosition(levelIndex, position) {\n    var level = _levels[levelIndex],\n      itemid = null;\n    if (level != null) {\n      itemid = level.items[position];\n    }\n    return itemid;\n  }\n\n  /**\n   * Gets previous element\n   * \n   * @param {string} itemid Element id\n   * @param {number} itemLevel Level index\n   * @returns {number} Returns previous element id\n   */\n  function getPrevItem(itemid, itemLevel) {\n    var result = null;\n    if (_items.hasOwnProperty(itemid)) {\n      var item = _items[itemid];\n      itemLevel = itemLevel || item.startLevel;\n      var level = _levels[itemLevel];\n      result = level.items[item.positions[itemLevel] - 1];\n    }\n    return result;\n  }\n\n  /**\n   * Gets next element\n   * \n   * @param {string} itemid Element id\n   * @param {number} itemLevel Level index\n   * @returns {number} Returns next element id\n   */\n  function getNextItem(itemid, itemLevel) {\n    var result = null;\n    if (_items.hasOwnProperty(itemid)) {\n      var item = _items[itemid];\n      itemLevel = itemLevel || item.startLevel;\n      var level = _levels[itemLevel];\n      result = level.items[item.positions[itemLevel] + 1];\n    }\n    return result;\n  }\n\n  /**\n   * Checks if structure contains element\n   * @param {string} itemid Element id\n   * @returns {boolean} Returns true if structure contains given element id\n   */\n  function hasItem(itemid) {\n    return _items.hasOwnProperty(itemid);\n  }\n\n  /**\n   * Checks if structure contains level\n   * @param {number} levelIndex Level index\n   * @returns {boolean} Returns true if structure contains given level index\n   */\n  function hasLevel(levelIndex) {\n    return _levels[levelIndex] != null;\n  }\n\n  /**\n   * Gets element context object\n   * @param {string} itemid Element id\n   * @returns {object} Returns context object of the element\n   */\n  function getItemContext(itemid) {\n    var result = null;\n    if (_items.hasOwnProperty(itemid)) {\n      result = _items[itemid].context;\n    }\n    return result;\n  }\n\n  /**\n   * Creates new level\n   * @param {index} index New level index\n   * @returns {object} Returns new level empty context object\n   */\n  function createLevel(index) {\n    if (_levels[index] == null) {\n      _levels[index] = new LevelContext(null);\n\n      _minimum = _minimum === null ? index : Math.min(_minimum, index);\n      _maximum = _maximum === null ? index : Math.max(_maximum, index);\n    }\n    return _levels[index];\n  }\n\n  /**\n   * Adds element\n   * @param {number} levelIndex Level index\n   * @param {string} itemid New element id\n   * @param {object} context Context object\n   */\n  function addItem(levelIndex, itemid, context) {\n    var level, itemContext;\n    if (!_items.hasOwnProperty(itemid)) {\n      level = createLevel(levelIndex);\n      level.items.push(itemid);\n      _items[itemid] = new ItemContext(context, level.items.length - 1, levelIndex);\n    } else {\n      level = createLevel(levelIndex);\n      level.items.push(itemid);\n      itemContext = _items[itemid];\n      itemContext.positions[levelIndex] = level.items.length - 1;\n      itemContext.startLevel = Math.min(itemContext.startLevel, levelIndex);\n      itemContext.endLevel = Math.max(itemContext.endLevel, levelIndex);\n    }\n  }\n\n  /**\n   * Callback function for iteration of levels\n   * \n   * @callback onTreeLevelCallback\n   * @param {number} levelIndex Level index\n   * @param {object} level Context object\n   * @returns {boolean} Returns true to break iteration process.\n   */\n\n  /**\n   * Loops levels\n   * \n   * @param {Object} thisArg The callback function invocation context\n   * @param {onTreeLevelCallback} onItem A callback function to call for every level\n   */\n  function loopLevels(thisArg, onItem) {\n    var index,\n      level;\n    if (onItem != null) {\n      for (index = _minimum; index <= _maximum; index += 1) {\n        level = _levels[index];\n        if (level != null) {\n          if (onItem.call(thisArg, index, level.context)) {\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Loops levels in reversed order\n   * \n   * @param {Object} thisArg The callback function invocation context\n   * @param {onTreeLevelCallback} onItem A callback function to call for every level\n   */\n  function loopLevelsReversed(thisArg, onItem) {\n    var index,\n      level;\n    if (onItem != null) {\n      for (index = _maximum; index >= _minimum; index -= 1) {\n        level = _levels[index];\n        if (level != null) {\n          if (onItem.call(thisArg, index, level.context)) {\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Gets number of elements at level\n   * \n   * @param {number} levelIndex Level index\n   * @returns {number} Returns number of elements at the level\n   */\n  function getLevelLength(levelIndex) {\n    var result = 0,\n      level = _levels[levelIndex];\n    if (level != null) {\n      result = level.items.length;\n    }\n    return result;\n  }\n\n  /**\n   * Callback function for iteration of level elements\n   * \n   * @callback onTreeLevelItemCallback\n   * @param {string} itemid Element id\n   * @param {object} item Context object of the element\n   * @param {number} position Position of the element at level\n   * @returns {boolean} Returns true to break iteration process.\n   */\n\n  /**\n   * Loops level elements\n   * \n   * @param {Object} thisArg The callback function invocation context\n   * @param {number} levelIndex Level index\n   * @param {onTreeLevelItemCallback} onItem A callback function to call for every item\n   */\n  function loopLevelItems(thisArg, levelIndex, onItem) {\n    var index, len,\n      level,\n      itemid;\n    if (onItem != null) {\n      level = _levels[levelIndex];\n      if (level != null) {\n        for (index = 0, len = level.items.length; index < len; index += 1) {\n          itemid = level.items[index];\n          if (onItem.call(thisArg, itemid, _items[itemid].context, index)) {\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Callback function for iteration of elements level by level\n   * \n   * @callback onTreeLevelsItemCallback\n   * @param {string} itemid Element id\n   * @param {object} item Element context object\n   * @param {number} position Position of the element at level\n   * @param {number} levelIndex Level index\n   * @param {object} level Level context object\n   * @returns {boolean} Returns true to break iteration process.\n   */\n\n  /**\n   * Loops elements level by level\n   * \n   * @param {Object} thisArg The callback function invocation context\n   * @param {onTreeLevelsItemCallback} onItem A callback function to call for every item\n   */\n  function loopItems(thisArg, onItem) { // function onItem(itemid, item, position, levelIndex, level)\n    var index, len,\n      level, levelIndex,\n      items,\n      itemid,\n      processed = {};\n    if (onItem != null) {\n      for (levelIndex = _minimum; levelIndex <= _maximum; levelIndex += 1) {\n        level = _levels[levelIndex];\n        if (level != null) {\n          items = level.items;\n          for (index = 0, len = items.length; index < len; index += 1) {\n            itemid = items[index];\n            if (!processed.hasOwnProperty(itemid)) {\n              processed[itemid] = true;\n              if (onItem.call(thisArg, itemid, _items[itemid].context, index, levelIndex, level.context)) {\n                return;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Callback for finding distance for element\n   *\n   * @callback onTreeLevelDistanceCallback\n   * @param {number} itemid Element id\n   * @param {object} item Context object\n   * @returns {number} Returns distance for the element\n   */\n\n  /**\n   * Searches element at level using binary search\n   * \n   * @param {Object} thisArg The callback function invocation context\n   * @param {number} levelIndex Level index to search element at\n   * @param {onTreeLevelDistanceCallback} onGetDistance A callback function to measure distance for element\n   */\n  function binarySearch(thisArg, levelIndex, onGetDistance) {\n    var result = null,\n      level;\n    if (onGetDistance != null) {\n      level = _levels[levelIndex];\n      if (level != null) {\n        result = commonBinarySearch(level.items, function (itemid) {\n          return onGetDistance.call(thisArg, itemid, _items[itemid].context);\n        });\n      }\n    }\n    return result.item;\n  }\n\n  /**\n   * Callback for finding weight of element\n   *\n   * @callback onTreeLevelItemWeightCallback\n   * @param {number} itemid Element id\n   * @param {object} item Context object\n   * @returns {number} Returns distance for the element\n   */\n\n  /**\n   * Callback for iterating items\n   *\n   * @callback onTreeLevelMergedItemCallback\n   * @param {number} itemid Element id\n   * @param {object} item Context object\n   * @returns {number} Returns true to break iteration process.\n   */\n\n  /**\n   * Loops merged elements of tree level structure by weight\n   * \n   * @param {Object} thisArg The callback function invocation context\n   * @param {onTreeLevelItemWeightCallback} getItemWeight Callback to measure weight of the element\n   * @param {onTreeLevelMergedItemCallback} onItem Callback to iterate merged elements\n   */\n  function loopMerged(thisArg, getItemWeight, onItem) {\n    var index, len,\n      level,\n      itemid,\n      levelsItems = [],\n      sortedItems;\n\n    for (index = 0, len = _levels.length; index < len; index += 1) {\n      level = _levels[index];\n      if (level != null) {\n        levelsItems.push(level.items);\n      }\n    }\n\n    sortedItems = commonMergeSort(levelsItems, getItemWeight, true);\n\n    if (onItem != null) {\n      for (index = 0, len = sortedItems.length; index < len; index += 1) {\n        itemid = sortedItems[index];\n        if (onItem.call(thisArg, itemid, _items[itemid].context)) {\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * Loops level elements starting with the given item\n   * \n   * @param {Object} thisArg The callback function invocation context\n   * @param {string} itemid Start element id\n   * @param {boolean} isLeft If true then method loops leftward\n   * @param {onTreeLevelMergedItemCallback} onItem Callback function to call for every item\n   * @param {number} level Level index\n   */\n  function loopFromItem(thisArg, itemid, isLeft, onItem, level) {\n    var context,\n      index, len,\n      items, nextItemId,\n      itemLevel, position;\n    if (_items.hasOwnProperty(itemid)) {\n      context = _items[itemid];\n      itemLevel = level || context.startLevel;\n      items = _levels[itemLevel].items;\n      position = context.positions[itemLevel];\n      if (onItem != null) {\n        if (isLeft) {\n          for (index = position - 1; index >= 0; index -= 1) {\n            nextItemId = items[index];\n            if (onItem.call(thisArg, nextItemId, _items[nextItemId].context)) {\n              break;\n            }\n          }\n        } else {\n          for (index = position + 1, len = items.length; index < len; index += 1) {\n            nextItemId = items[index];\n            if (onItem.call(thisArg, nextItemId, _items[nextItemId].context)) {\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Loops levels starting with the given element end level. Element may occupy multiple levels, \n   * so this method starts level iteration from next level after or before item levels.\n   * \n   * @param {Object} thisArg The callback function invocation context\n   * @param {string} itemid Element id\n   * @param {boolean} isBelow If true then method loops levels backward\n   * @param {onTreeLevelCallback} onItem Callback function to call for every level\n   */\n  function loopLevelsFromItem(thisArg, itemid, isBelow, onItem) { // function(levelIndex, level)\n    var context,\n      index, len,\n      items, item, nextItemId,\n      nextLevels, level;\n    if (_items.hasOwnProperty(itemid)) {\n      context = _items[itemid];\n      if (onItem != null) {\n        if (isBelow) {\n          for (index = context.endLevel + 1; index <= _maximum; index += 1) {\n            level = _levels[index];\n            if (onItem.call(thisArg, index, level != null ? level.context : null)) {\n              break;\n            }\n          }\n        } else {\n          for (index = context.startLevel - 1; index >= _minimum; index -= 1) {\n            level = _levels[index];\n            if (onItem.call(thisArg, index, level != null ? level.context : null)) {\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Clones tree levels structure.\n   * \n   * @returns {TreeLevels} Returns cloned copy of the structure\n   */\n  function clone() {\n    return TreeLevels({\n      levels: _levels,\n      items: _items,\n      minimum: _minimum,\n      maximum: _maximum\n    });\n  }\n\n  return {\n    addlevel: addLevel,\n    hasLevel: hasLevel,\n    hasItem: hasItem,\n    addItem: addItem,\n    getItemContext: getItemContext,\n    getLevelIndex: getStartLevelIndex,\n    getEndLevelIndex: getEndLevelIndex,\n    getItemPosition: getItemPosition,\n    getItemAtPosition: getItemAtPosition,\n    loopLevels: loopLevels,\n    loopLevelsReversed: loopLevelsReversed,\n    loopLevelItems: loopLevelItems,\n    getLevelLength: getLevelLength,\n    loopItems: loopItems,\n    binarySearch: binarySearch,\n    loopMerged: loopMerged,\n    loopFromItem: loopFromItem,\n    loopLevelsFromItem: loopLevelsFromItem,\n    getPrevItem: getPrevItem,\n    getNextItem: getNextItem,\n    length: length,\n    isEmpty: isEmpty,\n\n    clone: clone\n  };\n};"]},"metadata":{},"sourceType":"module"}