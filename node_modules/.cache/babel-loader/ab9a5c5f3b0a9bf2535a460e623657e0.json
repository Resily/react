{"ast":null,"code":"import Rect from '../../graphics/structs/Rect';\nimport { Layers, Visibility, Colors, ShapeType, LineType } from '../../enums';\nimport PolylinesBuffer from '../../graphics/structs/PolylinesBuffer';\nimport DotSegment from '../../graphics/structs/DotSegment';\nimport PaletteItem from '../../graphics/structs/PaletteItem';\nimport Marker from '../../graphics/shapes/Marker';\nexport default function DrawMinimizedItemsTask(getGraphics, createTransformTask, applyLayoutChangesTask, minimizedItemsOptionTask, itemTemplateParamsTask, alignDiagramTask) {\n  var _graphics,\n      _transform,\n      _debug = false,\n      _options,\n      _positions;\n\n  function process() {\n    _graphics = getGraphics();\n    _transform = createTransformTask.getTransform();\n    _options = minimizedItemsOptionTask.getOptions();\n    _positions = alignDiagramTask.getItemsPositions();\n\n    _graphics.reset(\"placeholder\", Layers.Marker);\n\n    drawMinimizedItems();\n    return false;\n  }\n\n  function drawMinimizedItems() {\n    var markers = new PolylinesBuffer(),\n        paletteItems = {},\n        polyline,\n        marker = new Marker(),\n        itemTitleColor,\n        itemFillColor,\n        minimizedItemShapeType,\n        minimizedItemCornerRadius,\n        treeItemPosition,\n        actualPosition,\n        minimizedItemsOptions,\n        templateParams,\n        templateConfig;\n\n    for (var treeItemId in _positions) {\n      if (_positions.hasOwnProperty(treeItemId)) {\n        treeItemPosition = _positions[treeItemId], actualPosition = treeItemPosition.actualPosition, minimizedItemsOptions = minimizedItemsOptionTask.getItemOptions(treeItemId);\n\n        _transform.transformRect(actualPosition.x, actualPosition.y, actualPosition.width, actualPosition.height, true, this, function (x, y, width, height) {\n          switch (treeItemPosition.actualVisibility) {\n            case Visibility.Dot:\n              templateParams = itemTemplateParamsTask.getTemplateParams(treeItemId);\n              templateConfig = templateParams.template.templateConfig;\n              itemTitleColor = null;\n              itemFillColor = null;\n              minimizedItemShapeType = null;\n              minimizedItemCornerRadius = 0;\n              /* use individual item options first */\n\n              if (minimizedItemsOptions != null) {\n                itemTitleColor = minimizedItemsOptions.itemTitleColor;\n                itemFillColor = minimizedItemsOptions.itemTitleColor;\n                minimizedItemShapeType = minimizedItemsOptions.minimizedItemShapeType;\n              }\n              /* use template config & control options next */\n\n\n              itemTitleColor = itemTitleColor || templateConfig.minimizedItemBorderColor || Colors.Navy;\n              itemFillColor = itemFillColor || templateConfig.minimizedItemFillColor || Colors.Navy;\n\n              if (minimizedItemShapeType == null) {\n                minimizedItemShapeType = templateConfig.minimizedItemShapeType !== null ? templateConfig.minimizedItemShapeType : _options.minimizedItemShapeType;\n              }\n\n              minimizedItemCornerRadius = templateConfig.minimizedItemCornerRadius === null ? templateConfig.minimizedItemSize.width : templateConfig.minimizedItemCornerRadius;\n\n              if (minimizedItemShapeType == null || minimizedItemShapeType == ShapeType.None) {\n                polyline = markers.getPolyline(new PaletteItem({\n                  'lineColor': itemTitleColor,\n                  'lineWidth': templateConfig.minimizedItemLineWidth,\n                  'lineType': templateConfig.minimizedItemLineType,\n                  'fillColor': itemFillColor,\n                  'opacity': templateConfig.minimizedItemOpacity\n                }));\n                polyline.addSegment(new DotSegment(x, y, width, height, minimizedItemCornerRadius));\n              } else {\n                marker.draw(markers, minimizedItemShapeType, new Rect(x, y, width, height), new PaletteItem({\n                  'lineColor': itemTitleColor,\n                  'lineWidth': templateConfig.minimizedItemLineWidth,\n                  'lineType': templateConfig.minimizedItemLineType,\n                  'fillColor': itemFillColor,\n                  'opacity': templateConfig.minimizedItemOpacity\n                }));\n              }\n\n              break;\n\n            default:\n              if (_debug) {\n                itemTitleColor = Colors.Red;\n\n                if (!paletteItems.hasOwnProperty(itemTitleColor)) {\n                  paletteItems[itemTitleColor] = new PaletteItem({\n                    'lineColor': itemTitleColor,\n                    'lineWidth': 1,\n                    'lineType': LineType.Solid,\n                    'fillColor': itemTitleColor,\n                    'opacity': 1\n                  });\n                }\n\n                polyline = markers.getPolyline(paletteItems[itemTitleColor]);\n                polyline.addSegment(new DotSegment(x - 1, y - 1, 2, 2, 1));\n              }\n\n              break;\n          }\n        }); //ignore jslint\n\n      }\n    }\n\n    _graphics.activate(\"placeholder\", Layers.Marker);\n\n    _graphics.polylinesBuffer(markers);\n  }\n\n  return {\n    process: process\n  };\n}\n;","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/tasks/renders/DrawMinimizedItemsTask.js"],"names":["Rect","Layers","Visibility","Colors","ShapeType","LineType","PolylinesBuffer","DotSegment","PaletteItem","Marker","DrawMinimizedItemsTask","getGraphics","createTransformTask","applyLayoutChangesTask","minimizedItemsOptionTask","itemTemplateParamsTask","alignDiagramTask","_graphics","_transform","_debug","_options","_positions","process","getTransform","getOptions","getItemsPositions","reset","drawMinimizedItems","markers","paletteItems","polyline","marker","itemTitleColor","itemFillColor","minimizedItemShapeType","minimizedItemCornerRadius","treeItemPosition","actualPosition","minimizedItemsOptions","templateParams","templateConfig","treeItemId","hasOwnProperty","getItemOptions","transformRect","x","y","width","height","actualVisibility","Dot","getTemplateParams","template","minimizedItemBorderColor","Navy","minimizedItemFillColor","minimizedItemSize","None","getPolyline","minimizedItemLineWidth","minimizedItemLineType","minimizedItemOpacity","addSegment","draw","Red","Solid","activate","polylinesBuffer"],"mappings":"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","sourcesContent":["import Rect from '../../graphics/structs/Rect';\nimport { Layers, Visibility, Colors, ShapeType, LineType } from '../../enums';\nimport PolylinesBuffer from '../../graphics/structs/PolylinesBuffer';\nimport DotSegment from '../../graphics/structs/DotSegment';\nimport PaletteItem from '../../graphics/structs/PaletteItem';\nimport Marker from '../../graphics/shapes/Marker';\n\nexport default function DrawMinimizedItemsTask(getGraphics, createTransformTask, applyLayoutChangesTask,\n  minimizedItemsOptionTask, itemTemplateParamsTask, alignDiagramTask) {\n  var _graphics,\n    _transform,\n    _debug = false,\n    _options,\n    _positions;\n\n  function process() {\n\n    _graphics = getGraphics();\n\n    _transform = createTransformTask.getTransform();\n    _options = minimizedItemsOptionTask.getOptions();\n    _positions = alignDiagramTask.getItemsPositions();\n\n    _graphics.reset(\"placeholder\", Layers.Marker);\n\n    drawMinimizedItems();\n\n    return false;\n  }\n\n  function drawMinimizedItems() {\n    var markers = new PolylinesBuffer(),\n      paletteItems = {},\n      polyline,\n      marker = new Marker(),\n      itemTitleColor,\n      itemFillColor,\n      minimizedItemShapeType,\n      minimizedItemCornerRadius,\n      treeItemPosition,\n      actualPosition,\n      minimizedItemsOptions,\n      templateParams,\n      templateConfig;\n\n    for (var treeItemId in _positions) {\n      if (_positions.hasOwnProperty(treeItemId)) {\n        treeItemPosition = _positions[treeItemId],\n          actualPosition = treeItemPosition.actualPosition,\n          minimizedItemsOptions = minimizedItemsOptionTask.getItemOptions(treeItemId);\n\n        _transform.transformRect(actualPosition.x, actualPosition.y, actualPosition.width, actualPosition.height, true,\n          this, function (x, y, width, height) {\n            switch (treeItemPosition.actualVisibility) {\n              case Visibility.Dot:\n                templateParams = itemTemplateParamsTask.getTemplateParams(treeItemId);\n                templateConfig = templateParams.template.templateConfig;\n\n                itemTitleColor = null;\n                itemFillColor = null;\n                minimizedItemShapeType = null;\n                minimizedItemCornerRadius = 0;\n\n                /* use individual item options first */\n                if (minimizedItemsOptions != null) {\n                  itemTitleColor = minimizedItemsOptions.itemTitleColor;\n                  itemFillColor = minimizedItemsOptions.itemTitleColor;\n                  minimizedItemShapeType = minimizedItemsOptions.minimizedItemShapeType;\n                }\n\n                /* use template config & control options next */\n                itemTitleColor = itemTitleColor || templateConfig.minimizedItemBorderColor || Colors.Navy;\n                itemFillColor = itemFillColor || templateConfig.minimizedItemFillColor || Colors.Navy;\n                if (minimizedItemShapeType == null) {\n                  minimizedItemShapeType = (templateConfig.minimizedItemShapeType !== null ? templateConfig.minimizedItemShapeType : _options.minimizedItemShapeType);\n                }\n                minimizedItemCornerRadius = templateConfig.minimizedItemCornerRadius === null ? templateConfig.minimizedItemSize.width : templateConfig.minimizedItemCornerRadius;\n\n                if (minimizedItemShapeType == null || minimizedItemShapeType == ShapeType.None) {\n                  polyline = markers.getPolyline(new PaletteItem({\n                    'lineColor': itemTitleColor,\n                    'lineWidth': templateConfig.minimizedItemLineWidth,\n                    'lineType': templateConfig.minimizedItemLineType,\n                    'fillColor': itemFillColor,\n                    'opacity': templateConfig.minimizedItemOpacity\n                  }));\n                  polyline.addSegment(new DotSegment(x, y, width, height, minimizedItemCornerRadius));\n                } else {\n                  marker.draw(markers, minimizedItemShapeType, new Rect(x, y, width, height),\n                    new PaletteItem({\n                      'lineColor': itemTitleColor,\n                      'lineWidth': templateConfig.minimizedItemLineWidth,\n                      'lineType': templateConfig.minimizedItemLineType,\n                      'fillColor': itemFillColor,\n                      'opacity': templateConfig.minimizedItemOpacity\n                    })\n                  );\n                }\n                break;\n              default:\n                if (_debug) {\n                  itemTitleColor = Colors.Red;\n                  if (!paletteItems.hasOwnProperty(itemTitleColor)) {\n                    paletteItems[itemTitleColor] = new PaletteItem({\n                      'lineColor': itemTitleColor,\n                      'lineWidth': 1,\n                      'lineType': LineType.Solid,\n                      'fillColor': itemTitleColor,\n                      'opacity': 1\n                    });\n                  }\n                  polyline = markers.getPolyline(paletteItems[itemTitleColor]);\n                  polyline.addSegment(new DotSegment(x - 1, y - 1, 2, 2, 1));\n                }\n                break;\n            }\n          });//ignore jslint\n      }\n    }\n\n\n    _graphics.activate(\"placeholder\", Layers.Marker);\n    _graphics.polylinesBuffer(markers);\n  }\n\n  return {\n    process: process\n  };\n};"]},"metadata":{},"sourceType":"module"}