{"ast":null,"code":"/**\n * @class Point\n * @classdesc Class represents pair of x and y coordinates that define a point in 2D plane.\n * \n * @param {Point} arg0 Point object to clone.\n * \n * @param {number} arg0 The x coordinate.\n * @param {number} arg1 The y coordinate.\n */\nexport default function Point(arg0, arg1) {\n  /**\n   * The x coordinate\n   * @type {number}\n   */\n  this.x = null;\n  /**\n   * The y coordinate\n   * @type {number}\n   */\n\n  this.y = null;\n  /**\n   * Reference to the context object associated with this point.\n   * @type {object}\n   */\n\n  this.context = null;\n\n  switch (arguments.length) {\n    case 1:\n      this.x = arg0.x;\n      this.y = arg0.y;\n      this.context = arg0.context;\n      break;\n\n    case 2:\n      this.x = arg0;\n      this.y = arg1;\n      break;\n\n    default:\n      break;\n  }\n}\n;\n/**\n * Scales the point location by the specified value\n * \n * @param {number} scale\n * @returns {Point} Returns reference to the current point.\n */\n\nPoint.prototype.scale = function (scale) {\n  this.x = this.x * scale;\n  this.y = this.y * scale;\n  return this;\n};\n/**\n * Calculates distance to the specified point\n * \n * @param {Point} arg0 Point\n * \n * @param {number} arg0 X coordinate\n * @param {number} arg1 Y coordinate\n * \n * @returns {number} Returns distance to the specified point\n */\n\n\nPoint.prototype.distanceTo = function (arg0, arg1) {\n  var x2 = 0,\n      y2 = 0,\n      a,\n      b;\n\n  switch (arguments.length) {\n    case 1:\n      x2 = arg0.x;\n      y2 = arg0.y;\n      break;\n\n    case 2:\n      x2 = arg0;\n      y2 = arg1;\n      break;\n\n    default:\n      break;\n  }\n\n  a = this.x - x2;\n  b = this.y - y2;\n  return Math.sqrt(a * a + b * b);\n};\n/**\n * Checks if points are equal\n * \n * @param {Point} point Point\n * @returns {boolean} Returns true if points are equal.\n */\n\n\nPoint.prototype.equalTo = function (point) {\n  return this.x == point.x && this.y == point.y;\n};\n/**\n * Swaps values of 2 points\n * \n * @param {Point} point The point to swap values with\n */\n\n\nPoint.prototype.swap = function (point) {\n  var x = point.x,\n      y = point.y;\n  point.x = this.x;\n  point.y = this.y;\n  this.x = x;\n  this.y = y;\n};\n/**\n * Clones the point\n * \n * @returns {Point} Returns copy of the point.\n */\n\n\nPoint.prototype.clone = function () {\n  return new Point(this);\n};\n/**\n * Returns point in form of CSS style string.\n * \n * @param {string} [units=\"px\"] The string name of units.\n * @returns {string} CSS style string.\n */\n\n\nPoint.prototype.toString = function (units) {\n  var result = \"\";\n  units = units !== undefined ? units : \"px\";\n  result += \"left:\" + this.x + units + \";\";\n  result += \"top:\" + this.y + units + \";\";\n  return result;\n};\n/**\n * Returns size in form of CSS style object.\n * \n * @param {string} [units=\"px\"] The string name of units.\n * @returns {object} CSS style object\n */\n\n\nPoint.prototype.getCSS = function (units) {\n  units = units !== undefined ? units : \"px\";\n  var result = {\n    left: this.x + units,\n    top: this.y + units\n  };\n  return result;\n};","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/graphics/structs/Point.js"],"names":["Point","arg0","arg1","x","y","context","arguments","length","prototype","scale","distanceTo","x2","y2","a","b","Math","sqrt","equalTo","point","swap","clone","toString","units","result","undefined","getCSS","left","top"],"mappings":"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","sourcesContent":["/**\n * @class Point\n * @classdesc Class represents pair of x and y coordinates that define a point in 2D plane.\n * \n * @param {Point} arg0 Point object to clone.\n * \n * @param {number} arg0 The x coordinate.\n * @param {number} arg1 The y coordinate.\n */\nexport default function Point(arg0, arg1) {\n  /**\n   * The x coordinate\n   * @type {number}\n   */\n  this.x = null;\n  /**\n   * The y coordinate\n   * @type {number}\n   */\n  this.y = null;\n\n  /**\n   * Reference to the context object associated with this point.\n   * @type {object}\n   */\n  this.context = null;\n\n  switch (arguments.length) {\n    case 1:\n      this.x = arg0.x;\n      this.y = arg0.y;\n      this.context = arg0.context;\n      break;\n    case 2:\n      this.x = arg0;\n      this.y = arg1;\n      break;\n    default:\n      break;\n  }\n};\n\n/**\n * Scales the point location by the specified value\n * \n * @param {number} scale\n * @returns {Point} Returns reference to the current point.\n */\nPoint.prototype.scale = function (scale) {\n  this.x = this.x * scale;\n  this.y = this.y * scale;\n  return this;\n};\n\n/**\n * Calculates distance to the specified point\n * \n * @param {Point} arg0 Point\n * \n * @param {number} arg0 X coordinate\n * @param {number} arg1 Y coordinate\n * \n * @returns {number} Returns distance to the specified point\n */\nPoint.prototype.distanceTo = function (arg0, arg1) {\n  var x2 = 0,\n    y2 = 0,\n    a,\n    b;\n  switch (arguments.length) {\n    case 1:\n      x2 = arg0.x;\n      y2 = arg0.y;\n      break;\n    case 2:\n      x2 = arg0;\n      y2 = arg1;\n      break;\n    default:\n      break;\n  }\n  a = this.x - x2;\n  b = this.y - y2;\n  return Math.sqrt(a * a + b * b);\n};\n\n/**\n * Checks if points are equal\n * \n * @param {Point} point Point\n * @returns {boolean} Returns true if points are equal.\n */\nPoint.prototype.equalTo = function (point) {\n  return this.x == point.x && this.y == point.y;\n};\n\n/**\n * Swaps values of 2 points\n * \n * @param {Point} point The point to swap values with\n */\nPoint.prototype.swap = function (point) {\n  var x = point.x,\n    y = point.y;\n\n  point.x = this.x;\n  point.y = this.y;\n\n  this.x = x;\n  this.y = y;\n};\n\n/**\n * Clones the point\n * \n * @returns {Point} Returns copy of the point.\n */\nPoint.prototype.clone = function () {\n  return new Point(this);\n};\n\n/**\n * Returns point in form of CSS style string.\n * \n * @param {string} [units=\"px\"] The string name of units.\n * @returns {string} CSS style string.\n */\nPoint.prototype.toString = function (units) {\n  var result = \"\";\n\n  units = (units !== undefined) ? units : \"px\";\n\n  result += \"left:\" + this.x + units + \";\";\n  result += \"top:\" + this.y + units + \";\";\n\n  return result;\n};\n\n/**\n * Returns size in form of CSS style object.\n * \n * @param {string} [units=\"px\"] The string name of units.\n * @returns {object} CSS style object\n */\nPoint.prototype.getCSS = function (units) {\n  units = (units !== undefined) ? units : \"px\";\n\n  var result = {\n    left: this.x + units,\n    top: this.y + units\n  };\n  return result;\n};"]},"metadata":{},"sourceType":"module"}