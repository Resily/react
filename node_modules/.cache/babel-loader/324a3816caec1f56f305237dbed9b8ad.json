{"ast":null,"code":"import { AnnotationType, Colors } from '../enums';\n/**\n * @class LabelAnnotationConfig\n * @classdesc In-layout label annotation. Label annotations are placed in layout between nodes, they preserve\n * space between nodes, so they don't overlap neighboring nodes. Label annotations are designed \n * for auto placement and bundling of connection lines between nodes when needed.\n *\n * @param {object} arg0 Object properties.\n */\n\nexport default function LabelAnnotationConfig(arg0, arg1) {\n  var property;\n  /**\n   * Annotation type. All types of annotations objects are added to `annotations` collection property of the control.\n   * This property is needed to distinguish them when they are defined as JSON objects.\n   * \n   * @type {AnnotationType}\n   */\n\n  this.annotationType = AnnotationType.Label;\n  /**\n   * This is the item id you are creating annotation for.\n   * @type {string}\n   */\n\n  this.fromItem = null;\n  /**\n   * This collection should contain only child or parent items of the annotated item. It cannot contain children and parents at the same time.\n   * If it contain sub set of children then annotation label bundles children into subset and annotations form cascades \n   * of labels over connection lines in the diagram.\n   * \n   * @type {string[]}\n   */\n\n  this.toItems = [];\n  /**\n   * Title. Annotation label text, it is styled with css class name \"bp-connector-label\".\n   * \n   * @type {string}\n   */\n\n  this.title = null;\n  /**\n   * Default template title background color.\n   * \n   * @type {string}\n   */\n\n  this.itemTitleColor = Colors.RoyalBlue;\n  /**\n   * Template name used to render this label.\n   * \n   * @type {string}\n   */\n\n  this.templateName = null;\n\n  switch (arguments.length) {\n    case 1:\n      for (property in arg0) {\n        if (arg0.hasOwnProperty(property)) {\n          this[property] = arg0[property];\n        }\n      }\n\n      break;\n\n    case 2:\n      this.fromItem = arg0;\n      this.toItem = arg1;\n      break;\n  }\n}\n;","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/configs/LabelAnnotationConfig.js"],"names":["AnnotationType","Colors","LabelAnnotationConfig","arg0","arg1","property","annotationType","Label","fromItem","toItems","title","itemTitleColor","RoyalBlue","templateName","arguments","length","hasOwnProperty","toItem"],"mappings":"AAAA,SAAQA,cAAR,EAAwBC,MAAxB,QAAsC,UAAtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,qBAAT,CAA+BC,IAA/B,EAAqCC,IAArC,EAA2C;AACxD,MAAIC,QAAJ;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,cAAL,GAAsBN,cAAc,CAACO,KAArC;AAEA;AACF;AACA;AACA;;AACE,OAAKC,QAAL,GAAgB,IAAhB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,OAAL,GAAe,EAAf;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKC,KAAL,GAAa,IAAb;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKC,cAAL,GAAsBV,MAAM,CAACW,SAA7B;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKC,YAAL,GAAoB,IAApB;;AAEA,UAAQC,SAAS,CAACC,MAAlB;AACE,SAAK,CAAL;AACE,WAAKV,QAAL,IAAiBF,IAAjB,EAAuB;AACrB,YAAIA,IAAI,CAACa,cAAL,CAAoBX,QAApB,CAAJ,EAAmC;AACjC,eAAKA,QAAL,IAAiBF,IAAI,CAACE,QAAD,CAArB;AACD;AACF;;AACD;;AACF,SAAK,CAAL;AACE,WAAKG,QAAL,GAAgBL,IAAhB;AACA,WAAKc,MAAL,GAAcb,IAAd;AACA;AAXJ;AAaD;AAAA","sourcesContent":["import {AnnotationType, Colors } from '../enums';\n/**\n * @class LabelAnnotationConfig\n * @classdesc In-layout label annotation. Label annotations are placed in layout between nodes, they preserve\n * space between nodes, so they don't overlap neighboring nodes. Label annotations are designed \n * for auto placement and bundling of connection lines between nodes when needed.\n *\n * @param {object} arg0 Object properties.\n */\nexport default function LabelAnnotationConfig(arg0, arg1) {\n  var property;\n\n  /**\n   * Annotation type. All types of annotations objects are added to `annotations` collection property of the control.\n   * This property is needed to distinguish them when they are defined as JSON objects.\n   * \n   * @type {AnnotationType}\n   */\n  this.annotationType = AnnotationType.Label;\n\n  /**\n   * This is the item id you are creating annotation for.\n   * @type {string}\n   */\n  this.fromItem = null;\n\n  /**\n   * This collection should contain only child or parent items of the annotated item. It cannot contain children and parents at the same time.\n   * If it contain sub set of children then annotation label bundles children into subset and annotations form cascades \n   * of labels over connection lines in the diagram.\n   * \n   * @type {string[]}\n   */\n  this.toItems = [];\n\n  /**\n   * Title. Annotation label text, it is styled with css class name \"bp-connector-label\".\n   * \n   * @type {string}\n   */\n  this.title = null;\n\n  /**\n   * Default template title background color.\n   * \n   * @type {string}\n   */\n  this.itemTitleColor = Colors.RoyalBlue;\n\n  /**\n   * Template name used to render this label.\n   * \n   * @type {string}\n   */\n  this.templateName = null;\n\n  switch (arguments.length) {\n    case 1:\n      for (property in arg0) {\n        if (arg0.hasOwnProperty(property)) {\n          this[property] = arg0[property];\n        }\n      }\n      break;\n    case 2:\n      this.fromItem = arg0;\n      this.toItem = arg1;\n      break;\n  }\n};"]},"metadata":{},"sourceType":"module"}