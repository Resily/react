{"ast":null,"code":"import FamilyLayout from './layouts/FamilyLayout';\nimport MatrixLayout from './layouts/MatrixLayout';\nimport Rect from '../../graphics/structs/Rect';\nimport Size from '../../graphics/structs/Size';\nexport default function FamItemsPositionsTask(currentControlSizeTask, scaleOptionTask, orientationOptionTask, itemsSizesOptionTask, connectorsOptionTask, normalizeOptionTask, normalizeLogicalFamilyTask, itemTemplateParamsTask, cursorItemTask, combinedNormalVisibilityItemsTask) {\n  var _data = {\n    treeItemsPositions: {},\n    // TreeItemPosition();\n    panelSize: null // Rect();\n\n  };\n\n  function process() {\n    var itemsSizesOptions = itemsSizesOptionTask.getOptions();\n    var connectorsOptions = connectorsOptionTask.getOptions();\n    var normalizationOptions = normalizeOptionTask.getOptions();\n    var params = {\n      logicalFamily: normalizeLogicalFamilyTask.getLogicalFamily(),\n      treeLevels: normalizeLogicalFamilyTask.getTreeLevels(),\n      getConnectorsStacksSizes: normalizeLogicalFamilyTask.getConnectorsStacksSizes,\n      isItemSelected: combinedNormalVisibilityItemsTask.isItemSelected,\n      cursorItemId: cursorItemTask.getCursorTreeItem(),\n      getTemplateParams: itemTemplateParamsTask.getTemplateParams\n    };\n    var options = {\n      verticalAlignment: itemsSizesOptions.verticalAlignment,\n      pageFitMode: itemsSizesOptions.pageFitMode,\n      minimalVisibility: itemsSizesOptions.minimalVisibility,\n      normalLevelShift: itemsSizesOptions.normalLevelShift,\n      dotLevelShift: itemsSizesOptions.dotLevelShift,\n      lineLevelShift: itemsSizesOptions.lineLevelShift,\n      normalItemsInterval: itemsSizesOptions.normalItemsInterval,\n      dotItemsInterval: itemsSizesOptions.dotItemsInterval,\n      lineItemsInterval: itemsSizesOptions.lineItemsInterval,\n      orientationType: orientationOptionTask.getOptions().orientationType,\n      arrowsDirection: connectorsOptions.arrowsDirection,\n      linesWidth: connectorsOptions.linesWidth,\n      checkBoxPanelSize: itemsSizesOptions.checkBoxPanelSize,\n      buttonsPanelSize: itemsSizesOptions.buttonsPanelSize,\n      groupTitlePanelSize: itemsSizesOptions.groupTitlePanelSize,\n      groupTitlePlacementType: itemsSizesOptions.groupTitlePlacementType,\n      maximumColumnsInMatrix: normalizationOptions.maximumColumnsInMatrix\n    };\n    /* calculate panel size */\n\n    var _currentControlSizeTa = currentControlSizeTask.getOptions(),\n        optimalPanelSize = _currentControlSizeTa.optimalPanelSize;\n\n    var panelSize = new Size(optimalPanelSize);\n\n    var _scaleOptionTask$getO = scaleOptionTask.getOptions(),\n        scale = _scaleOptionTask$getO.scale;\n\n    panelSize.scale(1.0 / scale);\n    var panelRect = new Rect(0, 0, panelSize.width, panelSize.height);\n    var layout = new FamilyLayout(params, options);\n    var matrixes = normalizeLogicalFamilyTask.getMatrixes();\n\n    for (var key in matrixes) {\n      if (matrixes.hasOwnProperty(key)) {\n        var layoutItem = params.logicalFamily.node(key);\n        layout.add(key, new MatrixLayout({\n          items: matrixes[key],\n          isItemSelected: params.isItemSelected,\n          cursorItemId: params.cursorItemId,\n          getTemplateParams: params.getTemplateParams,\n          hideParentConnection: layoutItem.hideParentConnection,\n          hideChildrenConnection: layoutItem.hideChildrenConnection\n        }, options));\n      }\n    }\n    /* calculate items placement */\n\n\n    _data.panelSize = layout.measure(panelRect);\n    _data.treeItemsPositions = {};\n    layout.arrange(this, function (treeItemId, treeItemPosition) {\n      _data.treeItemsPositions[treeItemId] = treeItemPosition;\n    });\n    return true;\n  }\n\n  function addMatrixLayouts(parent, matrixes, options) {}\n\n  function getItemPosition(itemid) {\n    return _data.treeItemsPositions[itemid];\n  }\n\n  function getItemsPositions() {\n    return _data.treeItemsPositions;\n  }\n\n  function getContentSize() {\n    return _data.panelSize;\n  }\n\n  return {\n    process: process,\n    getItemsPositions: getItemsPositions,\n    getItemPosition: getItemPosition,\n    getContentSize: getContentSize\n  };\n}\n;","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/tasks/transformations/FamItemsPositionsTask.js"],"names":["FamilyLayout","MatrixLayout","Rect","Size","FamItemsPositionsTask","currentControlSizeTask","scaleOptionTask","orientationOptionTask","itemsSizesOptionTask","connectorsOptionTask","normalizeOptionTask","normalizeLogicalFamilyTask","itemTemplateParamsTask","cursorItemTask","combinedNormalVisibilityItemsTask","_data","treeItemsPositions","panelSize","process","itemsSizesOptions","getOptions","connectorsOptions","normalizationOptions","params","logicalFamily","getLogicalFamily","treeLevels","getTreeLevels","getConnectorsStacksSizes","isItemSelected","cursorItemId","getCursorTreeItem","getTemplateParams","options","verticalAlignment","pageFitMode","minimalVisibility","normalLevelShift","dotLevelShift","lineLevelShift","normalItemsInterval","dotItemsInterval","lineItemsInterval","orientationType","arrowsDirection","linesWidth","checkBoxPanelSize","buttonsPanelSize","groupTitlePanelSize","groupTitlePlacementType","maximumColumnsInMatrix","optimalPanelSize","scale","panelRect","width","height","layout","matrixes","getMatrixes","key","hasOwnProperty","layoutItem","node","add","items","hideParentConnection","hideChildrenConnection","measure","arrange","treeItemId","treeItemPosition","addMatrixLayouts","parent","getItemPosition","itemid","getItemsPositions","getContentSize"],"mappings":"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","sourcesContent":["import FamilyLayout from './layouts/FamilyLayout';\nimport MatrixLayout from './layouts/MatrixLayout';\nimport Rect from '../../graphics/structs/Rect';\nimport Size from '../../graphics/structs/Size';\n\nexport default function FamItemsPositionsTask(currentControlSizeTask, scaleOptionTask, orientationOptionTask, itemsSizesOptionTask, connectorsOptionTask,\n  normalizeOptionTask, normalizeLogicalFamilyTask,\n  itemTemplateParamsTask,\n  cursorItemTask, combinedNormalVisibilityItemsTask) {\n\n  var _data = {\n    treeItemsPositions: {}, // TreeItemPosition();\n    panelSize: null // Rect();\n  };\n\n  function process() {\n    var itemsSizesOptions = itemsSizesOptionTask.getOptions();\n    var connectorsOptions = connectorsOptionTask.getOptions();\n    var normalizationOptions = normalizeOptionTask.getOptions();\n\n    var params = {\n      logicalFamily: normalizeLogicalFamilyTask.getLogicalFamily(),\n      treeLevels: normalizeLogicalFamilyTask.getTreeLevels(),\n      getConnectorsStacksSizes: normalizeLogicalFamilyTask.getConnectorsStacksSizes,\n      isItemSelected: combinedNormalVisibilityItemsTask.isItemSelected,\n      cursorItemId: cursorItemTask.getCursorTreeItem(),\n      getTemplateParams: itemTemplateParamsTask.getTemplateParams\n    };\n\n    var options = {\n      verticalAlignment: itemsSizesOptions.verticalAlignment,\n      pageFitMode: itemsSizesOptions.pageFitMode,\n      minimalVisibility: itemsSizesOptions.minimalVisibility,\n      normalLevelShift: itemsSizesOptions.normalLevelShift,\n      dotLevelShift: itemsSizesOptions.dotLevelShift,\n      lineLevelShift: itemsSizesOptions.lineLevelShift,\n      normalItemsInterval: itemsSizesOptions.normalItemsInterval,\n      dotItemsInterval: itemsSizesOptions.dotItemsInterval,\n      lineItemsInterval: itemsSizesOptions.lineItemsInterval,\n      orientationType: orientationOptionTask.getOptions().orientationType,\n      arrowsDirection: connectorsOptions.arrowsDirection,\n      linesWidth: connectorsOptions.linesWidth,\n      checkBoxPanelSize: itemsSizesOptions.checkBoxPanelSize,\n      buttonsPanelSize: itemsSizesOptions.buttonsPanelSize,\n      groupTitlePanelSize: itemsSizesOptions.groupTitlePanelSize,\n      groupTitlePlacementType: itemsSizesOptions.groupTitlePlacementType,\n      maximumColumnsInMatrix: normalizationOptions.maximumColumnsInMatrix\n    };\n\n    /* calculate panel size */\n    var { optimalPanelSize } = currentControlSizeTask.getOptions();\n    var panelSize = new Size(optimalPanelSize);\n    var { scale } = scaleOptionTask.getOptions();\n    panelSize.scale(1.0 / scale);\n    var panelRect = new Rect(0, 0, panelSize.width, panelSize.height);\n\n    var layout = new FamilyLayout(params, options);\n    var matrixes = normalizeLogicalFamilyTask.getMatrixes();\n    for (var key in matrixes) {\n      if (matrixes.hasOwnProperty(key)) {\n        var layoutItem = params.logicalFamily.node(key);\n        layout.add(key, new MatrixLayout({\n          items: matrixes[key],\n          isItemSelected: params.isItemSelected,\n          cursorItemId: params.cursorItemId,\n          getTemplateParams: params.getTemplateParams,\n          hideParentConnection: layoutItem.hideParentConnection,\n          hideChildrenConnection: layoutItem.hideChildrenConnection\n        }, options));\n      }\n    }\n    /* calculate items placement */\n    _data.panelSize = layout.measure(panelRect);\n    _data.treeItemsPositions = {};\n    layout.arrange(this, function (treeItemId, treeItemPosition) {\n      _data.treeItemsPositions[treeItemId] = treeItemPosition;\n    });\n    return true;\n  }\n\n  function addMatrixLayouts(parent, matrixes, options) {\n\n  }\n\n  function getItemPosition(itemid) {\n    return _data.treeItemsPositions[itemid];\n  }\n\n  function getItemsPositions() {\n    return _data.treeItemsPositions;\n  }\n\n  function getContentSize() {\n    return _data.panelSize;\n  }\n\n  return {\n    process: process,\n    getItemsPositions: getItemsPositions,\n    getItemPosition: getItemPosition,\n    getContentSize: getContentSize\n  };\n};"]},"metadata":{},"sourceType":"module"}