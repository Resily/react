{"ast":null,"code":"/*  1. Topologically sort _logicalFamily items and assign levels.\n    2. Optimize references. Transform M:N relations to M:1:N where it is possible.\n    3. Eliminate Many to Many relations. Logical family consists of 1:M and M:1 relations only.\n    4. Resort items, so original visible items stay at the same level.\n    5. Fill in missed items between levels. So that way we have invisible items between parent/child family items if they have gap between levels.\n      Such invisible family items have isVisible option set to false.\n*/\nimport FamilyNormalizer from './familyTransformations/FamilyNormalizer';\nexport default function NormalizeLogicalFamilyTask(normalizeOptionTask, hideGrandParentsConnectorsTask) {\n  var _data = {\n    maximumId: null,\n\n    /* maximum of OrgItem.id */\n    logicalFamily: null\n  },\n      _familyNormalizer = new FamilyNormalizer(false);\n\n  function process(debug) {\n    var logicalFamily = hideGrandParentsConnectorsTask.getLogicalFamily(),\n        maximumId = hideGrandParentsConnectorsTask.getMaximumId(),\n        normalizeOptions = normalizeOptionTask.getOptions();\n    var options = {\n      groupByType: normalizeOptions.groupByType,\n      alignBylevels: normalizeOptions.alignBylevels\n    };\n    logicalFamily = logicalFamily.clone();\n    maximumId = _familyNormalizer.normalize(options, logicalFamily, maximumId);\n    _data.logicalFamily = logicalFamily;\n    _data.maximumId = maximumId;\n    return true;\n  }\n\n  function getLogicalFamily() {\n    return _data.logicalFamily;\n  }\n\n  function getMaximumId() {\n    return _data.maximumId;\n  }\n\n  return {\n    process: process,\n    getLogicalFamily: getLogicalFamily,\n    getMaximumId: getMaximumId\n  };\n}\n;","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/tasks/transformations/NormalizeLogicalFamilyTask.js"],"names":["FamilyNormalizer","NormalizeLogicalFamilyTask","normalizeOptionTask","hideGrandParentsConnectorsTask","_data","maximumId","logicalFamily","_familyNormalizer","process","debug","getLogicalFamily","getMaximumId","normalizeOptions","getOptions","options","groupByType","alignBylevels","clone","normalize"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,gBAAP,MAA6B,0CAA7B;AAEA,eAAe,SAASC,0BAAT,CAAoCC,mBAApC,EAAyDC,8BAAzD,EAAyF;AACtG,MAAIC,KAAK,GAAG;AACVC,IAAAA,SAAS,EAAE,IADD;;AACO;AACjBC,IAAAA,aAAa,EAAE;AAFL,GAAZ;AAAA,MAIEC,iBAAiB,GAAG,IAAIP,gBAAJ,CAAqB,KAArB,CAJtB;;AAMA,WAASQ,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,QAAIH,aAAa,GAAGH,8BAA8B,CAACO,gBAA/B,EAApB;AAAA,QACEL,SAAS,GAAGF,8BAA8B,CAACQ,YAA/B,EADd;AAAA,QAEEC,gBAAgB,GAAGV,mBAAmB,CAACW,UAApB,EAFrB;AAIA,QAAIC,OAAO,GAAG;AACZC,MAAAA,WAAW,EAAEH,gBAAgB,CAACG,WADlB;AAEZC,MAAAA,aAAa,EAAEJ,gBAAgB,CAACI;AAFpB,KAAd;AAIAV,IAAAA,aAAa,GAAGA,aAAa,CAACW,KAAd,EAAhB;AACAZ,IAAAA,SAAS,GAAGE,iBAAiB,CAACW,SAAlB,CAA4BJ,OAA5B,EAAqCR,aAArC,EAAoDD,SAApD,CAAZ;AAEAD,IAAAA,KAAK,CAACE,aAAN,GAAsBA,aAAtB;AACAF,IAAAA,KAAK,CAACC,SAAN,GAAkBA,SAAlB;AAEA,WAAO,IAAP;AACD;;AAED,WAASK,gBAAT,GAA4B;AAC1B,WAAON,KAAK,CAACE,aAAb;AACD;;AAED,WAASK,YAAT,GAAwB;AACtB,WAAOP,KAAK,CAACC,SAAb;AACD;;AAED,SAAO;AACLG,IAAAA,OAAO,EAAEA,OADJ;AAELE,IAAAA,gBAAgB,EAAEA,gBAFb;AAGLC,IAAAA,YAAY,EAAEA;AAHT,GAAP;AAKD;AAAA","sourcesContent":["/*  1. Topologically sort _logicalFamily items and assign levels.\n    2. Optimize references. Transform M:N relations to M:1:N where it is possible.\n    3. Eliminate Many to Many relations. Logical family consists of 1:M and M:1 relations only.\n    4. Resort items, so original visible items stay at the same level.\n    5. Fill in missed items between levels. So that way we have invisible items between parent/child family items if they have gap between levels.\n      Such invisible family items have isVisible option set to false.\n*/\n\nimport FamilyNormalizer from './familyTransformations/FamilyNormalizer';\n\nexport default function NormalizeLogicalFamilyTask(normalizeOptionTask, hideGrandParentsConnectorsTask) {\n  var _data = {\n    maximumId: null, /* maximum of OrgItem.id */\n    logicalFamily: null\n  },\n    _familyNormalizer = new FamilyNormalizer(false);\n\n  function process(debug) {\n    var logicalFamily = hideGrandParentsConnectorsTask.getLogicalFamily(),\n      maximumId = hideGrandParentsConnectorsTask.getMaximumId(),\n      normalizeOptions = normalizeOptionTask.getOptions();\n\n    var options = {\n      groupByType: normalizeOptions.groupByType,\n      alignBylevels: normalizeOptions.alignBylevels\n    };\n    logicalFamily = logicalFamily.clone();\n    maximumId = _familyNormalizer.normalize(options, logicalFamily, maximumId);\n\n    _data.logicalFamily = logicalFamily;\n    _data.maximumId = maximumId;\n\n    return true;\n  }\n\n  function getLogicalFamily() {\n    return _data.logicalFamily;\n  }\n\n  function getMaximumId() {\n    return _data.maximumId;\n  }\n\n  return {\n    process: process,\n    getLogicalFamily: getLogicalFamily,\n    getMaximumId: getMaximumId\n  };\n};\n"]},"metadata":{},"sourceType":"module"}