{"ast":null,"code":"export default function Slot(itemid) {\n  this.itemId = itemid;\n  /* if itemId is null then this slot is empty */\n\n  this.position = null;\n  this.balance = 0;\n  this.left = {};\n  /* total number of children at the level on the left side of this slot */\n\n  this.right = {};\n  /* total number of children at the level on the right side of this slot */\n\n  this.crossings = {};\n  /* number of connections crossing this slot from side to side at the level */\n}\n;\n\nSlot.prototype.clone = function (itemid) {\n  var result = new Slot(itemid),\n      level;\n\n  for (level in this.left) {\n    if (this.left.hasOwnProperty(level)) {\n      result.left[level] = this.left[level];\n    }\n  }\n\n  for (level in this.right) {\n    if (this.right.hasOwnProperty(level)) {\n      result.right[level] = this.right[level];\n    }\n  }\n\n  for (level in this.crossings) {\n    if (this.crossings.hasOwnProperty(level)) {\n      result.crossings[level] = this.crossings[level];\n    }\n  }\n\n  result.itemid = itemid;\n  return result;\n};","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/models/Slot.js"],"names":["Slot","itemid","itemId","position","balance","left","right","crossings","prototype","clone","result","level","hasOwnProperty"],"mappings":"AAAA,eAAe,SAASA,IAAT,CAAcC,MAAd,EAAsB;AACnC,OAAKC,MAAL,GAAcD,MAAd;AAAsB;;AACtB,OAAKE,QAAL,GAAgB,IAAhB;AACA,OAAKC,OAAL,GAAe,CAAf;AAEA,OAAKC,IAAL,GAAY,EAAZ;AAAgB;;AAChB,OAAKC,KAAL,GAAa,EAAb;AAAiB;;AACjB,OAAKC,SAAL,GAAiB,EAAjB;AAAqB;AACtB;AAAA;;AAEDP,IAAI,CAACQ,SAAL,CAAeC,KAAf,GAAuB,UAAUR,MAAV,EAAkB;AACvC,MAAIS,MAAM,GAAG,IAAIV,IAAJ,CAASC,MAAT,CAAb;AAAA,MACEU,KADF;;AAGA,OAAKA,KAAL,IAAc,KAAKN,IAAnB,EAAyB;AACvB,QAAI,KAAKA,IAAL,CAAUO,cAAV,CAAyBD,KAAzB,CAAJ,EAAqC;AACnCD,MAAAA,MAAM,CAACL,IAAP,CAAYM,KAAZ,IAAqB,KAAKN,IAAL,CAAUM,KAAV,CAArB;AACD;AACF;;AACD,OAAKA,KAAL,IAAc,KAAKL,KAAnB,EAA0B;AACxB,QAAI,KAAKA,KAAL,CAAWM,cAAX,CAA0BD,KAA1B,CAAJ,EAAsC;AACpCD,MAAAA,MAAM,CAACJ,KAAP,CAAaK,KAAb,IAAsB,KAAKL,KAAL,CAAWK,KAAX,CAAtB;AACD;AACF;;AACD,OAAKA,KAAL,IAAc,KAAKJ,SAAnB,EAA8B;AAC5B,QAAI,KAAKA,SAAL,CAAeK,cAAf,CAA8BD,KAA9B,CAAJ,EAA0C;AACxCD,MAAAA,MAAM,CAACH,SAAP,CAAiBI,KAAjB,IAA0B,KAAKJ,SAAL,CAAeI,KAAf,CAA1B;AACD;AACF;;AAEDD,EAAAA,MAAM,CAACT,MAAP,GAAgBA,MAAhB;AACA,SAAOS,MAAP;AACD,CAtBD","sourcesContent":["export default function Slot(itemid) {\n  this.itemId = itemid; /* if itemId is null then this slot is empty */\n  this.position = null;\n  this.balance = 0;\n\n  this.left = {}; /* total number of children at the level on the left side of this slot */\n  this.right = {}; /* total number of children at the level on the right side of this slot */\n  this.crossings = {}; /* number of connections crossing this slot from side to side at the level */\n};\n\nSlot.prototype.clone = function (itemid) {\n  var result = new Slot(itemid),\n    level;\n\n  for (level in this.left) {\n    if (this.left.hasOwnProperty(level)) {\n      result.left[level] = this.left[level];\n    }\n  }\n  for (level in this.right) {\n    if (this.right.hasOwnProperty(level)) {\n      result.right[level] = this.right[level];\n    }\n  }\n  for (level in this.crossings) {\n    if (this.crossings.hasOwnProperty(level)) {\n      result.crossings[level] = this.crossings[level];\n    }\n  }\n\n  result.itemid = itemid;\n  return result;\n};"]},"metadata":{},"sourceType":"module"}