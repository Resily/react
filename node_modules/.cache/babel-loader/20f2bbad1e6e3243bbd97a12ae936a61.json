{"ast":null,"code":"import { AnnotationType, ZOrderType, Colors, LineType } from '../enums';\n/**\n * @class HighlightPathAnnotationConfig\n * @classdesc  Highlight path annotation configuration object. Highlight path annotation traces path between given sequence of nodes \n * over existing connector lines in the diagram.\n *\n * @param {object} arg0 Object properties.\n */\n\nexport default function HighlightPathAnnotationConfig(arg0) {\n  var property;\n  /**\n   * Annotation type. All types of annotations objects are added to `annotations` collection property of the control.\n   * This property is needed to distinguish them when they are defined as JSON objects.\n   * \n   * @type {AnnotationType}\n   */\n\n  this.annotationType = AnnotationType.HighlightPath;\n  /**\n   * Sets annotation Z order placement relative to the diagram items. Diagram visual elements are drawn in layers on top of each other.\n   * If you place annotations over diagram nodes then you block mouse events of UI elements in their templates.\n   * Browsers don't support mouse events transparency consistently yet. So in order to avoid mouse events blocking of UI elements in item\n   * templates you have to place annotation items under them or explicitly define maximum zindex for controls and make them rendered on top\n   * of other visual elements. The control takes this into account and renders buttons panel on top of everything,\n   * so they are never blocked by annotations drawn in front of diagram nodes.\n   * \n   * @type {ZOrderType}\n   */\n\n  this.zOrderType = ZOrderType.Foreground;\n  /**\n   * Collection of nodes ids this annotation is drawn for. Please, pay attention that this is array of nodes ids. So if diagram finds\n   * wrong path from start to end node you have possibility to define every intermediate node in the sequence yourself.\n   * \n   * @type {string[]}\n   */\n\n  this.items = [];\n  /**\n   * Border line width\n   * \n   * @type {number}\n   */\n\n  this.lineWidth = 2;\n  /**\n   * Line color\n   * \n   * @type {string}\n   */\n\n  this.color = Colors.Red;\n  /**\n   * Line type\n   * \n   * @type {LineType}\n   */\n\n  this.lineType = LineType.Solid;\n  /**\n   * Opacity.\n   * \n   * @type {number}\n   */\n\n  this.opacity = 1;\n  /**\n   * If true then annotation has arrows along the highlight path line.\n   * \n   * @type {boolean}\n   */\n\n  this.showArrows = true;\n  /**\n   * If true then annotated nodes are shown full size regardless of controls auto fit mode and available screen space.\n   * @type {boolean}\n   */\n\n  this.selectItems = false;\n\n  switch (arguments.length) {\n    case 1:\n      if (arg0 !== null) {\n        if (arg0 instanceof Array) {\n          this.items = arg0;\n        } else if (typeof arg0 == \"object\") {\n          for (property in arg0) {\n            if (arg0.hasOwnProperty(property)) {\n              this[property] = arg0[property];\n            }\n          }\n        }\n      }\n\n      break;\n  }\n}\n;","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/configs/HighlightPathAnnotationConfig.js"],"names":["AnnotationType","ZOrderType","Colors","LineType","HighlightPathAnnotationConfig","arg0","property","annotationType","HighlightPath","zOrderType","Foreground","items","lineWidth","color","Red","lineType","Solid","opacity","showArrows","selectItems","arguments","length","Array","hasOwnProperty"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,UAAzB,EAAqCC,MAArC,EAA6CC,QAA7C,QAA6D,UAA7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,6BAAT,CAAuCC,IAAvC,EAA6C;AAC1D,MAAIC,QAAJ;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,cAAL,GAAsBP,cAAc,CAACQ,aAArC;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,UAAL,GAAkBR,UAAU,CAACS,UAA7B;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,KAAL,GAAa,EAAb;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKC,SAAL,GAAiB,CAAjB;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKC,KAAL,GAAaX,MAAM,CAACY,GAApB;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKC,QAAL,GAAgBZ,QAAQ,CAACa,KAAzB;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKC,OAAL,GAAe,CAAf;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKC,UAAL,GAAkB,IAAlB;AAEA;AACF;AACA;AACA;;AACE,OAAKC,WAAL,GAAmB,KAAnB;;AAEA,UAAQC,SAAS,CAACC,MAAlB;AACE,SAAK,CAAL;AACE,UAAIhB,IAAI,KAAK,IAAb,EAAmB;AACjB,YAAIA,IAAI,YAAYiB,KAApB,EAA2B;AACzB,eAAKX,KAAL,GAAaN,IAAb;AACD,SAFD,MAEO,IAAI,OAAOA,IAAP,IAAe,QAAnB,EAA6B;AAClC,eAAKC,QAAL,IAAiBD,IAAjB,EAAuB;AACrB,gBAAIA,IAAI,CAACkB,cAAL,CAAoBjB,QAApB,CAAJ,EAAmC;AACjC,mBAAKA,QAAL,IAAiBD,IAAI,CAACC,QAAD,CAArB;AACD;AACF;AACF;AACF;;AACD;AAbJ;AAeD;AAAA","sourcesContent":["import { AnnotationType, ZOrderType, Colors, LineType } from '../enums';\n/**\n * @class HighlightPathAnnotationConfig\n * @classdesc  Highlight path annotation configuration object. Highlight path annotation traces path between given sequence of nodes \n * over existing connector lines in the diagram.\n *\n * @param {object} arg0 Object properties.\n */\nexport default function HighlightPathAnnotationConfig(arg0) {\n  var property;\n\n  /**\n   * Annotation type. All types of annotations objects are added to `annotations` collection property of the control.\n   * This property is needed to distinguish them when they are defined as JSON objects.\n   * \n   * @type {AnnotationType}\n   */\n  this.annotationType = AnnotationType.HighlightPath;\n\n  /**\n   * Sets annotation Z order placement relative to the diagram items. Diagram visual elements are drawn in layers on top of each other.\n   * If you place annotations over diagram nodes then you block mouse events of UI elements in their templates.\n   * Browsers don't support mouse events transparency consistently yet. So in order to avoid mouse events blocking of UI elements in item\n   * templates you have to place annotation items under them or explicitly define maximum zindex for controls and make them rendered on top\n   * of other visual elements. The control takes this into account and renders buttons panel on top of everything,\n   * so they are never blocked by annotations drawn in front of diagram nodes.\n   * \n   * @type {ZOrderType}\n   */\n  this.zOrderType = ZOrderType.Foreground;\n\n  /**\n   * Collection of nodes ids this annotation is drawn for. Please, pay attention that this is array of nodes ids. So if diagram finds\n   * wrong path from start to end node you have possibility to define every intermediate node in the sequence yourself.\n   * \n   * @type {string[]}\n   */\n  this.items = [];\n\n  /**\n   * Border line width\n   * \n   * @type {number}\n   */\n  this.lineWidth = 2;\n\n  /**\n   * Line color\n   * \n   * @type {string}\n   */\n  this.color = Colors.Red;\n\n  /**\n   * Line type\n   * \n   * @type {LineType}\n   */\n  this.lineType = LineType.Solid;\n\n  /**\n   * Opacity.\n   * \n   * @type {number}\n   */\n  this.opacity = 1;\n\n  /**\n   * If true then annotation has arrows along the highlight path line.\n   * \n   * @type {boolean}\n   */\n  this.showArrows = true;\n\n  /**\n   * If true then annotated nodes are shown full size regardless of controls auto fit mode and available screen space.\n   * @type {boolean}\n   */\n  this.selectItems = false;\n\n  switch (arguments.length) {\n    case 1:\n      if (arg0 !== null) {\n        if (arg0 instanceof Array) {\n          this.items = arg0;\n        } else if (typeof arg0 == \"object\") {\n          for (property in arg0) {\n            if (arg0.hasOwnProperty(property)) {\n              this[property] = arg0[property];\n            }\n          }\n        }\n      }\n      break;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}