{"ast":null,"code":"import { TextOrientationType, OrientationType } from '../../enums';\nimport { renderRotatedText } from './RotatedText';\nexport default function LevelTitleTemplate(options, orientation) {\n  var levelTitleFontSize = options.levelTitleFontSize,\n      fontFamily = options.levelTitleFontFamily,\n      fontWeight = options.levelTitleFontWeight,\n      fontStyle = options.levelTitleFontStyle,\n      levelTitleFontColor = options.levelTitleFontColor,\n      textOrientation = options.levelTitleOrientation,\n      horizontalAlignment = options.levelTitleHorizontalAlignment,\n      verticalAlignment = options.levelTitleVerticalAlignment,\n      levelTitleColor = options.levelTitleColor;\n\n  function template() {\n    return {};\n  }\n\n  function getHashCode() {\n    return 0;\n  }\n\n  function render(doc, position, data) {\n    var config = data.context,\n        titleColor = config.titleColor || levelTitleColor,\n        label = config.title,\n        fontColor = config.titleFontColor || levelTitleFontColor;\n\n    if (textOrientation == TextOrientationType.Auto) {\n      switch (orientation) {\n        case OrientationType.Top:\n          textOrientation = TextOrientationType.RotateRight;\n          break;\n\n        case OrientationType.Bottom:\n          textOrientation = TextOrientationType.RotateLeft;\n          break;\n\n        case OrientationType.Left:\n        case OrientationType.Right:\n          break;\n      }\n    }\n\n    var fontSize = parseInt(levelTitleFontSize, 10);\n    renderRotatedText({\n      doc: doc,\n      textOrientation: textOrientation,\n      label: label,\n      fontSize: fontSize,\n      fontColor: fontColor,\n      position: position,\n      titleColor: titleColor,\n      horizontalAlignment: horizontalAlignment,\n      verticalAlignment: verticalAlignment\n    });\n  }\n\n  return {\n    template: template,\n    getHashCode: getHashCode,\n    render: render\n  };\n}\n;","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/templates/pdf/LevelTitleTemplate.js"],"names":["TextOrientationType","OrientationType","renderRotatedText","LevelTitleTemplate","options","orientation","levelTitleFontSize","fontFamily","levelTitleFontFamily","fontWeight","levelTitleFontWeight","fontStyle","levelTitleFontStyle","levelTitleFontColor","textOrientation","levelTitleOrientation","horizontalAlignment","levelTitleHorizontalAlignment","verticalAlignment","levelTitleVerticalAlignment","levelTitleColor","template","getHashCode","render","doc","position","data","config","context","titleColor","label","title","fontColor","titleFontColor","Auto","Top","RotateRight","Bottom","RotateLeft","Left","Right","fontSize","parseInt"],"mappings":"AAAA,SAASA,mBAAT,EAA8BC,eAA9B,QAAqD,aAArD;AACA,SAASC,iBAAT,QAAkC,eAAlC;AAEA,eAAe,SAASC,kBAAT,CAA4BC,OAA5B,EAAqCC,WAArC,EAAkD;AAAA,MAC1DC,kBAD0D,GAU3DF,OAV2D,CAC1DE,kBAD0D;AAAA,MAEvCC,UAFuC,GAU3DH,OAV2D,CAE7DI,oBAF6D;AAAA,MAGvCC,UAHuC,GAU3DL,OAV2D,CAG7DM,oBAH6D;AAAA,MAIxCC,SAJwC,GAU3DP,OAV2D,CAI7DQ,mBAJ6D;AAAA,MAK7DC,mBAL6D,GAU3DT,OAV2D,CAK7DS,mBAL6D;AAAA,MAMtCC,eANsC,GAU3DV,OAV2D,CAM7DW,qBAN6D;AAAA,MAO9BC,mBAP8B,GAU3DZ,OAV2D,CAO7Da,6BAP6D;AAAA,MAQhCC,iBARgC,GAU3Dd,OAV2D,CAQ7De,2BAR6D;AAAA,MAS7DC,eAT6D,GAU3DhB,OAV2D,CAS7DgB,eAT6D;;AAY/D,WAASC,QAAT,GAAoB;AAClB,WAAO,EAAP;AACD;;AAED,WAASC,WAAT,GAAuB;AACrB,WAAO,CAAP;AACD;;AAED,WAASC,MAAT,CAAgBC,GAAhB,EAAqBC,QAArB,EAA+BC,IAA/B,EAAqC;AACnC,QAAIC,MAAM,GAAGD,IAAI,CAACE,OAAlB;AAAA,QACEC,UAAU,GAAGF,MAAM,CAACE,UAAP,IAAqBT,eADpC;AAAA,QAEEU,KAAK,GAAGH,MAAM,CAACI,KAFjB;AAAA,QAGEC,SAAS,GAAGL,MAAM,CAACM,cAAP,IAAyBpB,mBAHvC;;AAKA,QAAGC,eAAe,IAAId,mBAAmB,CAACkC,IAA1C,EAAgD;AAC9C,cAAQ7B,WAAR;AACE,aAAKJ,eAAe,CAACkC,GAArB;AACErB,UAAAA,eAAe,GAAGd,mBAAmB,CAACoC,WAAtC;AACA;;AACF,aAAKnC,eAAe,CAACoC,MAArB;AACEvB,UAAAA,eAAe,GAAGd,mBAAmB,CAACsC,UAAtC;AACA;;AACF,aAAKrC,eAAe,CAACsC,IAArB;AACA,aAAKtC,eAAe,CAACuC,KAArB;AACE;AATJ;AAWD;;AAED,QAAIC,QAAQ,GAAGC,QAAQ,CAACpC,kBAAD,EAAqB,EAArB,CAAvB;AAEAJ,IAAAA,iBAAiB,CAAC;AAACsB,MAAAA,GAAG,EAAHA,GAAD;AAAMV,MAAAA,eAAe,EAAfA,eAAN;AAAuBgB,MAAAA,KAAK,EAALA,KAAvB;AAA8BW,MAAAA,QAAQ,EAARA,QAA9B;AAAwCT,MAAAA,SAAS,EAATA,SAAxC;AAAmDP,MAAAA,QAAQ,EAARA,QAAnD;AAA6DI,MAAAA,UAAU,EAAVA,UAA7D;AAAyEb,MAAAA,mBAAmB,EAAnBA,mBAAzE;AAA8FE,MAAAA,iBAAiB,EAAjBA;AAA9F,KAAD,CAAjB;AACD;;AAED,SAAO;AACLG,IAAAA,QAAQ,EAAEA,QADL;AAELC,IAAAA,WAAW,EAAEA,WAFR;AAGLC,IAAAA,MAAM,EAAEA;AAHH,GAAP;AAKD;AAAA","sourcesContent":["import { TextOrientationType, OrientationType } from '../../enums';\nimport { renderRotatedText } from './RotatedText';\n\nexport default function LevelTitleTemplate(options, orientation) {\n  var {levelTitleFontSize, \n    levelTitleFontFamily: fontFamily,\n    levelTitleFontWeight: fontWeight,\n    levelTitleFontStyle: fontStyle,\n    levelTitleFontColor,\n    levelTitleOrientation: textOrientation,\n    levelTitleHorizontalAlignment: horizontalAlignment,\n    levelTitleVerticalAlignment: verticalAlignment,\n    levelTitleColor    \n  } = options;\n\n  function template() {\n    return {};\n  }\n\n  function getHashCode() {\n    return 0;\n  }\n\n  function render(doc, position, data) {\n    var config = data.context,\n      titleColor = config.titleColor || levelTitleColor,\n      label = config.title,\n      fontColor = config.titleFontColor || levelTitleFontColor;\n\n    if(textOrientation == TextOrientationType.Auto) {\n      switch (orientation) {\n        case OrientationType.Top:\n          textOrientation = TextOrientationType.RotateRight;\n          break;\n        case OrientationType.Bottom:\n          textOrientation = TextOrientationType.RotateLeft;\n          break;\n        case OrientationType.Left:\n        case OrientationType.Right:\n          break;\n      }\n    }\n\n    var fontSize = parseInt(levelTitleFontSize, 10);\n\n    renderRotatedText({doc, textOrientation, label, fontSize, fontColor, position, titleColor, horizontalAlignment, verticalAlignment });\n  }\n\n  return {\n    template: template,\n    getHashCode: getHashCode,\n    render: render\n  };\n};\n\n"]},"metadata":{},"sourceType":"module"}