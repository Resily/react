{"ast":null,"code":"import Size from '../../graphics/structs/Size';\nimport Rect from '../../graphics/structs/Rect';\nimport RenderEventArgs from '../../events/RenderEventArgs';\nimport { Layers, ZOrderType, ConnectorPlacementType } from '../../enums';\nimport PolylinesBuffer from '../../graphics/structs/PolylinesBuffer';\nimport PaletteItem from '../../graphics/structs/PaletteItem';\nimport ConnectorAnnotationOffsetResolver from './offsetResolver/ConnectorAnnotationOffsetResolver';\nimport ConnectorStraight from '../../graphics/shapes/ConnectorStraight';\nimport ConnectorOffbeat from '../../graphics/shapes/ConnectorOffbeat';\nimport { isNullOrEmpty } from '../../common';\nexport default function DrawConnectorAnnotationTask(getGraphics, createTransformTask, applyLayoutChangesTask, orientationOptionTask, connectorAnnotationOptionTask, alignDiagramTask, annotationLabelTemplateTask, zOrderType) {\n  var _graphics, _transform, _orientationOptions, _annotationLabelTemplate, _panelSize;\n\n  function process() {\n    _graphics = getGraphics();\n    _transform = createTransformTask.getTransform();\n    _orientationOptions = orientationOptionTask.getOptions();\n    _annotationLabelTemplate = annotationLabelTemplateTask.getTemplate();\n    _panelSize = new Size(alignDiagramTask.getContentSize());\n\n    switch (zOrderType) {\n      case ZOrderType.Background:\n        //ignore jslint\n        _graphics.reset(\"placeholder\", Layers.BackgroundConnectorAnnotation);\n\n        break;\n\n      case ZOrderType.Foreground:\n        //ignore jslint\n        _graphics.reset(\"placeholder\", Layers.ForegroundConnectorAnnotation);\n\n        break;\n    }\n\n    drawAnnotations(connectorAnnotationOptionTask.getAnnotations(), alignDiagramTask.getItemPosition);\n    return false;\n  }\n\n  function drawAnnotations(annotations, getItemPosition) {\n    var panel,\n        index,\n        len,\n        layer = Layers.ForegroundConnectorAnnotation,\n        fromItemPosition,\n        fromActualPosition,\n        toItemPosition,\n        toActualPosition,\n        shape,\n        annotationConfig,\n        uiHash,\n        buffer = new PolylinesBuffer(),\n        labelPlacement,\n        connectorAnnotationOffsetResolver = ConnectorAnnotationOffsetResolver(),\n        maximumLineWidth = 0;\n\n    switch (zOrderType) {\n      case ZOrderType.Background:\n        //ignore jslint\n        panel = _graphics.activate(\"placeholder\", Layers.BackgroundConnectorAnnotation);\n        break;\n\n      case ZOrderType.Foreground:\n        //ignore jslint\n        panel = _graphics.activate(\"placeholder\", Layers.ForegroundConnectorAnnotation);\n        break;\n    }\n\n    for (index = 0, len = annotations.length; index < len; index += 1) {\n      annotationConfig = annotations[index];\n      maximumLineWidth = Math.max(maximumLineWidth, annotationConfig.lineWidth);\n    }\n\n    for (index = 0, len = annotations.length; index < len; index += 1) {\n      annotationConfig = annotations[index];\n\n      if (annotationConfig.fromItem != null && annotationConfig.toItem != null) {\n        fromItemPosition = getItemPosition(annotationConfig.fromItem);\n        toItemPosition = getItemPosition(annotationConfig.toItem);\n\n        if (fromItemPosition != null && toItemPosition != null) {\n          fromActualPosition = fromItemPosition.actualPosition;\n          toActualPosition = toItemPosition.actualPosition;\n\n          switch (annotationConfig.connectorPlacementType) {\n            case ConnectorPlacementType.Offbeat:\n              shape = new ConnectorOffbeat();\n              break;\n\n            case ConnectorPlacementType.Straight:\n              shape = new ConnectorStraight();\n              break;\n          }\n          /* rotate label size to user orientation */\n\n\n          var labelSize;\n\n          _transform.transformRect(0, 0, annotationConfig.labelSize.width, annotationConfig.labelSize.height, false, this, function (x, y, width, height) {\n            labelSize = new Size(width, height);\n          });\n          /* rotate panel size to user orientation */\n\n\n          var panelSize = null;\n\n          _transform.transformRect(0, 0, _panelSize.width, _panelSize.height, false, this, function (x, y, width, height) {\n            panelSize = new Size(width, height);\n          });\n\n          var linePaletteItem = new PaletteItem({\n            lineColor: annotationConfig.color,\n            lineWidth: annotationConfig.lineWidth,\n            lineType: annotationConfig.lineType\n          });\n          var hasLabel = !isNullOrEmpty(annotationConfig.label);\n          /* offset rectangles */\n\n          var fromRect = new Rect(fromActualPosition).offset(annotationConfig.offset);\n          var toRect = new Rect(toActualPosition).offset(annotationConfig.offset);\n          var linesOffset = annotationConfig.lineWidth * 3;\n          var bundleOffset = maximumLineWidth * 6;\n          /* create connection lines */\n\n          shape.draw(buffer, linePaletteItem, fromRect, toRect, linesOffset, bundleOffset, labelSize, panelSize, annotationConfig.connectorShapeType, 4\n          /*labelOffset*/\n          , annotationConfig.labelPlacementType, hasLabel, connectorAnnotationOffsetResolver, function (labelPlacement, labelConfig) {\n            var hasLabel = !isNullOrEmpty(labelConfig.label);\n\n            if (hasLabel && labelPlacement != null) {\n              /* translate result label placement back to users orientation */\n              _transform.transformRect(labelPlacement.x, labelPlacement.y, labelPlacement.width, labelPlacement.height, true, this, function (x, y, width, height) {\n                labelPlacement = new Rect(x, y, width, height);\n              });\n\n              uiHash = new RenderEventArgs();\n              uiHash.context = labelConfig;\n              /* draw label */\n\n              _graphics.template(labelPlacement.x, labelPlacement.y, 0, 0, 0, 0, labelPlacement.width, labelPlacement.height, _annotationLabelTemplate.template(), _annotationLabelTemplate.getHashCode(), _annotationLabelTemplate.render, uiHash, null);\n            }\n          }, annotationConfig);\n        }\n      }\n    }\n\n    connectorAnnotationOffsetResolver.resolve();\n    /* translate result polylines back to users orientation */\n\n    buffer.transform(_transform, true);\n    /* draw background polylines */\n\n    _graphics.polylinesBuffer(buffer);\n  }\n\n  return {\n    process: process\n  };\n}\n;","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/tasks/renders/DrawConnectorAnnotationTask.js"],"names":["Size","Rect","RenderEventArgs","Layers","ZOrderType","ConnectorPlacementType","PolylinesBuffer","PaletteItem","ConnectorAnnotationOffsetResolver","ConnectorStraight","ConnectorOffbeat","isNullOrEmpty","DrawConnectorAnnotationTask","getGraphics","createTransformTask","applyLayoutChangesTask","orientationOptionTask","connectorAnnotationOptionTask","alignDiagramTask","annotationLabelTemplateTask","zOrderType","_graphics","_transform","_orientationOptions","_annotationLabelTemplate","_panelSize","process","getTransform","getOptions","getTemplate","getContentSize","Background","reset","BackgroundConnectorAnnotation","Foreground","ForegroundConnectorAnnotation","drawAnnotations","getAnnotations","getItemPosition","annotations","panel","index","len","layer","fromItemPosition","fromActualPosition","toItemPosition","toActualPosition","shape","annotationConfig","uiHash","buffer","labelPlacement","connectorAnnotationOffsetResolver","maximumLineWidth","activate","length","Math","max","lineWidth","fromItem","toItem","actualPosition","connectorPlacementType","Offbeat","Straight","labelSize","transformRect","width","height","x","y","panelSize","linePaletteItem","lineColor","color","lineType","hasLabel","label","fromRect","offset","toRect","linesOffset","bundleOffset","draw","connectorShapeType","labelPlacementType","labelConfig","context","template","getHashCode","render","resolve","transform","polylinesBuffer"],"mappings":"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","sourcesContent":["import Size from '../../graphics/structs/Size';\nimport Rect from '../../graphics/structs/Rect';\nimport RenderEventArgs from '../../events/RenderEventArgs';\nimport { Layers, ZOrderType, ConnectorPlacementType } from '../../enums';\nimport PolylinesBuffer from '../../graphics/structs/PolylinesBuffer';\nimport PaletteItem from '../../graphics/structs/PaletteItem';\nimport ConnectorAnnotationOffsetResolver from './offsetResolver/ConnectorAnnotationOffsetResolver';\nimport ConnectorStraight from '../../graphics/shapes/ConnectorStraight';\nimport ConnectorOffbeat from '../../graphics/shapes/ConnectorOffbeat';\nimport { isNullOrEmpty } from '../../common';\n\n\nexport default function DrawConnectorAnnotationTask(getGraphics, createTransformTask, applyLayoutChangesTask,\n  orientationOptionTask, connectorAnnotationOptionTask, alignDiagramTask, annotationLabelTemplateTask, zOrderType) {\n  var _graphics,\n    _transform,\n    _orientationOptions,\n    _annotationLabelTemplate,\n    _panelSize;\n\n  function process() {\n\n    _graphics = getGraphics();\n\n    _transform = createTransformTask.getTransform();\n    _orientationOptions = orientationOptionTask.getOptions();\n\n    _annotationLabelTemplate = annotationLabelTemplateTask.getTemplate();\n\n    _panelSize = new Size(alignDiagramTask.getContentSize());\n\n    switch (zOrderType) {\n      case ZOrderType.Background://ignore jslint\n        _graphics.reset(\"placeholder\", Layers.BackgroundConnectorAnnotation);\n        break;\n      case ZOrderType.Foreground://ignore jslint\n        _graphics.reset(\"placeholder\", Layers.ForegroundConnectorAnnotation);\n        break;\n    }\n\n    drawAnnotations(connectorAnnotationOptionTask.getAnnotations(), alignDiagramTask.getItemPosition);\n\n    return false;\n  }\n\n  function drawAnnotations(annotations, getItemPosition) {\n    var panel,\n      index, len,\n      layer = Layers.ForegroundConnectorAnnotation,\n      fromItemPosition, fromActualPosition,\n      toItemPosition, toActualPosition,\n      shape,\n      annotationConfig,\n      uiHash,\n      buffer = new PolylinesBuffer(),\n      labelPlacement,\n      connectorAnnotationOffsetResolver = ConnectorAnnotationOffsetResolver(),\n      maximumLineWidth = 0;\n\n    switch (zOrderType) {\n      case ZOrderType.Background://ignore jslint\n        panel = _graphics.activate(\"placeholder\", Layers.BackgroundConnectorAnnotation);\n        break;\n      case ZOrderType.Foreground://ignore jslint\n        panel = _graphics.activate(\"placeholder\", Layers.ForegroundConnectorAnnotation);\n        break;\n    }\n\n    for (index = 0, len = annotations.length; index < len; index += 1) {\n      annotationConfig = annotations[index];\n      maximumLineWidth = Math.max(maximumLineWidth, annotationConfig.lineWidth);\n    }\n\n    for (index = 0, len = annotations.length; index < len; index += 1) {\n      annotationConfig = annotations[index];\n\n      if (annotationConfig.fromItem != null && annotationConfig.toItem != null) {\n        fromItemPosition = getItemPosition(annotationConfig.fromItem);\n        toItemPosition = getItemPosition(annotationConfig.toItem);\n        if (fromItemPosition != null && toItemPosition != null) {\n          fromActualPosition = fromItemPosition.actualPosition;\n          toActualPosition = toItemPosition.actualPosition;\n\n          switch (annotationConfig.connectorPlacementType) {\n            case ConnectorPlacementType.Offbeat:\n              shape = new ConnectorOffbeat();\n              break;\n            case ConnectorPlacementType.Straight:\n              shape = new ConnectorStraight();\n              break;\n          }\n\n          /* rotate label size to user orientation */\n          var labelSize;\n          _transform.transformRect(0, 0, annotationConfig.labelSize.width, annotationConfig.labelSize.height, false,\n            this, function (x, y, width, height) {\n              labelSize = new Size(width, height);\n            });\n\n          /* rotate panel size to user orientation */\n          var panelSize = null;\n          _transform.transformRect(0, 0, _panelSize.width, _panelSize.height, false,\n            this, function (x, y, width, height) {\n              panelSize = new Size(width, height);\n            });\n\n          var linePaletteItem = new PaletteItem({\n            lineColor: annotationConfig.color,\n            lineWidth: annotationConfig.lineWidth,\n            lineType: annotationConfig.lineType\n          });\n\n          var hasLabel = !isNullOrEmpty(annotationConfig.label);\n\n          /* offset rectangles */\n          var fromRect = new Rect(fromActualPosition).offset(annotationConfig.offset);\n          var toRect = new Rect(toActualPosition).offset(annotationConfig.offset);\n\n          var linesOffset = annotationConfig.lineWidth * 3;\n          var bundleOffset = maximumLineWidth * 6;\n\n          /* create connection lines */\n          shape.draw(buffer, linePaletteItem, fromRect, toRect, linesOffset, bundleOffset, labelSize, panelSize,\n            annotationConfig.connectorShapeType, 4 /*labelOffset*/, annotationConfig.labelPlacementType, hasLabel,\n            connectorAnnotationOffsetResolver, function (labelPlacement, labelConfig) {\n              var hasLabel = !isNullOrEmpty(labelConfig.label);\n              if (hasLabel && labelPlacement != null) {\n                /* translate result label placement back to users orientation */\n                _transform.transformRect(labelPlacement.x, labelPlacement.y, labelPlacement.width, labelPlacement.height, true,\n                  this, function (x, y, width, height) {\n                    labelPlacement = new Rect(x, y, width, height);\n                  });\n\n                uiHash = new RenderEventArgs();\n                uiHash.context = labelConfig;\n\n                /* draw label */\n                _graphics.template(\n                  labelPlacement.x\n                  , labelPlacement.y\n                  , 0\n                  , 0\n                  , 0\n                  , 0\n                  , labelPlacement.width\n                  , labelPlacement.height\n                  , _annotationLabelTemplate.template()\n                  , _annotationLabelTemplate.getHashCode()\n                  , _annotationLabelTemplate.render\n                  , uiHash\n                  , null\n                );\n              }\n            }, annotationConfig);\n        }\n      }\n    }\n\n    connectorAnnotationOffsetResolver.resolve();\n\n\n    /* translate result polylines back to users orientation */\n    buffer.transform(_transform, true);\n    /* draw background polylines */\n    _graphics.polylinesBuffer(buffer);\n  }\n\n  return {\n    process: process\n  };\n};"]},"metadata":{},"sourceType":"module"}