{"ast":null,"code":"import Graph from '../../algorithms/Graph';\nimport EdgeItem from '../../models/EdgeItem';\nimport FamilyItem from '../../models/FamilyItem';\nimport { GroupByType } from '../../enums';\nexport default function AddLabelAnnotationsTask(labelAnnotationPlacementOptionTask, removeLoopsTask) {\n  var _data = {\n    logicalFamily: null,\n    maximumId: null\n  };\n\n  function process(debug) {\n    var logicalFamily = removeLoopsTask.getLogicalFamily(),\n        annotations = labelAnnotationPlacementOptionTask.getAnnotations();\n    logicalFamily = logicalFamily.clone();\n    addLabelAnnotations(logicalFamily, annotations);\n    _data.logicalFamily = logicalFamily;\n    _data.maximumId = labelAnnotationPlacementOptionTask.getMaximumId();\n\n    if (debug && !logicalFamily.validate()) {\n      throw \"References are broken in family structure!\";\n    }\n\n    return true;\n  }\n\n  function addLabelAnnotations(logicalFamily, annotations) {\n    var edges = Graph(),\n\n    /* edge item is new EdgeItem(fromItem, toItem); */\n    configsHash = {},\n        configs,\n        config,\n        fromItem,\n        index,\n        len;\n\n    if (annotations.length > 0) {\n      /* group annotations by from item */\n      for (index = 0, len = annotations.length; index < len; index += 1) {\n        config = annotations[index];\n\n        if (!configsHash.hasOwnProperty(config.fromItem)) {\n          configsHash[config.fromItem] = [config];\n          /* create edges hash for item */\n\n          logicalFamily.loopChildren(this, config.fromItem, function (childid, child, level) {\n            edges.addEdge(config.fromItem, childid, new EdgeItem(config.fromItem, config.fromItem, childid, childid));\n            return logicalFamily.SKIP;\n          }); //ignore jslint\n\n          logicalFamily.loopParents(this, config.fromItem, function (parentid, parent, level) {\n            edges.addEdge(parentid, config.fromItem, new EdgeItem(parentid, parentid, config.fromItem, config.fromItem));\n            return logicalFamily.SKIP;\n          }); //ignore jslint\n        } else {\n          configsHash[config.fromItem].push(config);\n        }\n      }\n\n      for (fromItem in configsHash) {\n        if (configsHash.hasOwnProperty(fromItem)) {\n          configs = configsHash[fromItem];\n          /* process annotations having greater number of references first */\n\n          configs.sort(function (a, b) {\n            return b.toItems.length - a.toItems.length;\n          }); //ignore jslint\n\n          for (index = 0; index < configs.length; index += 1) {\n            config = configs[index];\n            addLabelAnnotation(logicalFamily, edges, config.fromItem, config.toItems, function () {\n              /* add label annotation as new diagram family item */\n              return new FamilyItem({\n                id: config.id,\n                isVisible: true,\n                isLevelNeutral: true,\n                isActive: false,\n                itemConfig: config\n              });\n            }); //ignore jslint\n          }\n        }\n      }\n    }\n  }\n\n  function addLabelAnnotation(logicalFamily, edges, fromItem, toItems, onCreate) {\n    var edge,\n        isValid = true,\n        commonParentId = null,\n        toItem,\n        index,\n        len,\n        bundleItem,\n        bundleItems = [];\n\n    for (index = 0, len = toItems.length; index < len; index += 1) {\n      toItem = toItems[index];\n      edge = edges.edge(fromItem, toItem);\n\n      if (edge != null) {\n        if (commonParentId == null) {\n          commonParentId = edge.getFar(toItem);\n        } else {\n          if (commonParentId != edge.getFar(toItem)) {\n            isValid = false;\n            break;\n          }\n        }\n\n        bundleItems.push(edge.getNear(toItem));\n      } else {\n        isValid = false;\n        break;\n      }\n    }\n\n    if (isValid) {\n      bundleItem = onCreate();\n\n      if (logicalFamily.bundleParents(commonParentId, bundleItems, bundleItem.id, bundleItem)) {\n        bundleItem.levelGravity = GroupByType.Children;\n        isValid = true;\n      } else if (logicalFamily.bundleChildren(commonParentId, bundleItems, bundleItem.id, bundleItem)) {\n        bundleItem.levelGravity = GroupByType.Parents;\n        isValid = true;\n      } else if (logicalFamily.bundleParents(commonParentId, toItems, bundleItem.id, bundleItem)) {\n        bundleItem.levelGravity = GroupByType.Children;\n        isValid = true;\n      } else if (logicalFamily.bundleParents(commonParentId, toItems, bundleItem.id, bundleItem)) {\n        bundleItem.levelGravity = GroupByType.Parents;\n        isValid = true;\n      }\n\n      if (isValid) {\n        for (index = 0, len = toItems.length; index < len; index += 1) {\n          toItem = toItems[index];\n          edge = edges.edge(fromItem, toItem);\n          edge.setFar(toItem, bundleItem.id);\n        }\n      }\n    }\n  }\n\n  function getLogicalFamily() {\n    return _data.logicalFamily;\n  }\n\n  function getMaximumId() {\n    return _data.maximumId;\n  }\n\n  return {\n    process: process,\n    getLogicalFamily: getLogicalFamily,\n    getMaximumId: getMaximumId\n  };\n}\n;","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/tasks/transformations/AddLabelAnnotationsTask.js"],"names":["Graph","EdgeItem","FamilyItem","GroupByType","AddLabelAnnotationsTask","labelAnnotationPlacementOptionTask","removeLoopsTask","_data","logicalFamily","maximumId","process","debug","getLogicalFamily","annotations","getAnnotations","clone","addLabelAnnotations","getMaximumId","validate","edges","configsHash","configs","config","fromItem","index","len","length","hasOwnProperty","loopChildren","childid","child","level","addEdge","SKIP","loopParents","parentid","parent","push","sort","a","b","toItems","addLabelAnnotation","id","isVisible","isLevelNeutral","isActive","itemConfig","onCreate","edge","isValid","commonParentId","toItem","bundleItem","bundleItems","getFar","getNear","bundleParents","levelGravity","Children","bundleChildren","Parents","setFar"],"mappings":"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","sourcesContent":["import Graph from '../../algorithms/Graph';\nimport EdgeItem from '../../models/EdgeItem';\nimport FamilyItem from '../../models/FamilyItem';\nimport { GroupByType } from '../../enums';\n\nexport default function AddLabelAnnotationsTask(labelAnnotationPlacementOptionTask, removeLoopsTask) {\n  var _data = {\n    logicalFamily: null,\n    maximumId: null\n  };\n\n  function process(debug) {\n    var logicalFamily = removeLoopsTask.getLogicalFamily(),\n      annotations = labelAnnotationPlacementOptionTask.getAnnotations();\n\n    logicalFamily = logicalFamily.clone();\n\n    addLabelAnnotations(logicalFamily, annotations);\n\n    _data.logicalFamily = logicalFamily;\n\n    _data.maximumId = labelAnnotationPlacementOptionTask.getMaximumId();\n\n    if (debug && !logicalFamily.validate()) {\n      throw \"References are broken in family structure!\";\n    }\n\n    return true;\n  }\n\n  function addLabelAnnotations(logicalFamily, annotations) {\n    var edges = Graph(), /* edge item is new EdgeItem(fromItem, toItem); */\n      configsHash = {},\n      configs, config,\n      fromItem,\n      index, len;\n\n    if (annotations.length > 0) {\n      /* group annotations by from item */\n      for (index = 0, len = annotations.length; index < len; index += 1) {\n        config = annotations[index];\n        if (!configsHash.hasOwnProperty(config.fromItem)) {\n          configsHash[config.fromItem] = [config];\n\n          /* create edges hash for item */\n          logicalFamily.loopChildren(this, config.fromItem, function (childid, child, level) {\n            edges.addEdge(config.fromItem, childid, new EdgeItem(config.fromItem, config.fromItem, childid, childid));\n            return logicalFamily.SKIP;\n          });//ignore jslint\n          logicalFamily.loopParents(this, config.fromItem, function (parentid, parent, level) {\n            edges.addEdge(parentid, config.fromItem, new EdgeItem(parentid, parentid, config.fromItem, config.fromItem));\n            return logicalFamily.SKIP;\n          });//ignore jslint\n\n        } else {\n          configsHash[config.fromItem].push(config);\n        }\n      }\n\n      for (fromItem in configsHash) {\n        if (configsHash.hasOwnProperty(fromItem)) {\n          configs = configsHash[fromItem];\n\n          /* process annotations having greater number of references first */\n          configs.sort(function (a, b) {\n            return b.toItems.length - a.toItems.length;\n          }); //ignore jslint\n\n\n          for (index = 0; index < configs.length; index += 1) {\n            config = configs[index];\n\n            addLabelAnnotation(logicalFamily, edges, config.fromItem, config.toItems, function () {\n              /* add label annotation as new diagram family item */\n              return new FamilyItem({\n                id: config.id,\n                isVisible: true,\n                isLevelNeutral: true,\n                isActive: false,\n                itemConfig: config\n              });\n            }); //ignore jslint\n          }\n        }\n      }\n    }\n  }\n\n  function addLabelAnnotation(logicalFamily, edges, fromItem, toItems, onCreate) {\n    var edge,\n      isValid = true,\n      commonParentId = null,\n      toItem,\n      index, len,\n      bundleItem,\n      bundleItems = [];\n\n    for (index = 0, len = toItems.length; index < len; index += 1) {\n      toItem = toItems[index];\n\n      edge = edges.edge(fromItem, toItem);\n      if (edge != null) {\n        if (commonParentId == null) {\n          commonParentId = edge.getFar(toItem);\n        } else {\n          if (commonParentId != edge.getFar(toItem)) {\n            isValid = false;\n            break;\n          }\n        }\n        bundleItems.push(edge.getNear(toItem));\n      } else {\n        isValid = false;\n        break;\n      }\n    }\n\n    if (isValid) {\n      bundleItem = onCreate();\n      if (logicalFamily.bundleParents(commonParentId, bundleItems, bundleItem.id, bundleItem)) {\n        bundleItem.levelGravity = GroupByType.Children;\n        isValid = true;\n      } else if (logicalFamily.bundleChildren(commonParentId, bundleItems, bundleItem.id, bundleItem)) {\n        bundleItem.levelGravity = GroupByType.Parents;\n        isValid = true;\n      } else if (logicalFamily.bundleParents(commonParentId, toItems, bundleItem.id, bundleItem)) {\n        bundleItem.levelGravity = GroupByType.Children;\n        isValid = true;\n      } else if (logicalFamily.bundleParents(commonParentId, toItems, bundleItem.id, bundleItem)) {\n        bundleItem.levelGravity = GroupByType.Parents;\n        isValid = true;\n      }\n\n      if (isValid) {\n        for (index = 0, len = toItems.length; index < len; index += 1) {\n          toItem = toItems[index];\n\n          edge = edges.edge(fromItem, toItem);\n          edge.setFar(toItem, bundleItem.id);\n        }\n      }\n    }\n  }\n\n  function getLogicalFamily() {\n    return _data.logicalFamily;\n  }\n\n  function getMaximumId() {\n    return _data.maximumId;\n  }\n\n  return {\n    process: process,\n    getLogicalFamily: getLogicalFamily,\n    getMaximumId: getMaximumId\n  };\n};"]},"metadata":{},"sourceType":"module"}