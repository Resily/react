{"ast":null,"code":"import { Visibility, AdviserPlacementType, OrientationType } from '../../../enums';\nimport Size from '../../../graphics/structs/Size';\nimport Rect from '../../../graphics/structs/Rect';\nexport default function BaseLayout(params, options) {\n  this._children = {};\n\n  if (this.params != null) {\n    for (var key in this.params) {\n      if (this.params.hasOwnProperty(key) && params.hasOwnProperty(key)) {\n        this.params[key] = params[key];\n      }\n    }\n  }\n\n  if (this.options != null) {\n    for (key in this.options) {\n      if (this.options.hasOwnProperty(key) && options.hasOwnProperty(key)) {\n        this.options[key] = options[key];\n      }\n    }\n\n    this.options.shifts = this.getShifts(this.options);\n    this.options.intervals = this.getIntervals(this.options);\n  }\n}\n;\n\nBaseLayout.prototype.add = function (treeItemId, layout) {\n  this._children[treeItemId] = layout;\n};\n\nBaseLayout.prototype.getLayout = function (treeItemId) {\n  return this._children[treeItemId] || null;\n};\n\nBaseLayout.prototype.getShifts = function (options) {\n  var result = [];\n  result[Visibility.Normal] = options.normalLevelShift;\n  result[Visibility.Dot] = options.dotLevelShift;\n  result[Visibility.Line] = options.lineLevelShift;\n  result[Visibility.Invisible] = options.lineLevelShift;\n  return result;\n};\n\nBaseLayout.prototype.getIntervals = function (options) {\n  var result = [];\n  result[Visibility.Normal] = options.normalItemsInterval;\n  result[Visibility.Dot] = options.dotItemsInterval;\n  result[Visibility.Line] = options.lineItemsInterval;\n  result[Visibility.Invisible] = options.lineItemsInterval;\n  return result;\n};\n\nBaseLayout.prototype.getItemSize = function (visibility, isCursor, treeItemTemplate, options) {\n  var templateConfig, size, contentPosition;\n\n  switch (visibility) {\n    case Visibility.Normal:\n      templateConfig = treeItemTemplate.template.templateConfig;\n      size = new Size(templateConfig.itemSize);\n      contentPosition = new Rect(0, 0, size.width, size.height);\n\n      if (isCursor) {\n        size.height += templateConfig.cursorPadding.top + templateConfig.cursorPadding.bottom;\n        size.width += templateConfig.cursorPadding.left + templateConfig.cursorPadding.right;\n        contentPosition.x = templateConfig.cursorPadding.left;\n        contentPosition.y = templateConfig.cursorPadding.top;\n      }\n\n      if (treeItemTemplate.hasSelectorCheckbox) {\n        size.height += options.checkBoxPanelSize;\n      }\n\n      if (treeItemTemplate.hasButtons) {\n        size.width += options.buttonsPanelSize;\n\n        switch (options.groupTitlePlacementType) {\n          case AdviserPlacementType.Right:\n            contentPosition.x += options.buttonsPanelSize;\n            break;\n        }\n      }\n\n      if (treeItemTemplate.hasGroupTitle) {\n        size.width += options.groupTitlePanelSize;\n\n        switch (options.groupTitlePlacementType) {\n          case AdviserPlacementType.Right:\n            break;\n\n          default:\n            contentPosition.x += options.groupTitlePanelSize;\n            break;\n        }\n      }\n\n      break;\n\n    case Visibility.Dot:\n      templateConfig = treeItemTemplate.template.templateConfig;\n      size = new Size(templateConfig.minimizedItemSize);\n      break;\n\n    case Visibility.Line:\n    case Visibility.Invisible:\n      size = new Size();\n      break;\n  }\n\n  switch (options.orientationType) {\n    case OrientationType.Left:\n    case OrientationType.Right:\n      size.invert();\n      break;\n  }\n\n  return {\n    actualSize: size,\n    contentPosition: contentPosition\n  };\n};","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/tasks/transformations/layouts/BaseLayout.js"],"names":["Visibility","AdviserPlacementType","OrientationType","Size","Rect","BaseLayout","params","options","_children","key","hasOwnProperty","shifts","getShifts","intervals","getIntervals","prototype","add","treeItemId","layout","getLayout","result","Normal","normalLevelShift","Dot","dotLevelShift","Line","lineLevelShift","Invisible","normalItemsInterval","dotItemsInterval","lineItemsInterval","getItemSize","visibility","isCursor","treeItemTemplate","templateConfig","size","contentPosition","template","itemSize","width","height","cursorPadding","top","bottom","left","right","x","y","hasSelectorCheckbox","checkBoxPanelSize","hasButtons","buttonsPanelSize","groupTitlePlacementType","Right","hasGroupTitle","groupTitlePanelSize","minimizedItemSize","orientationType","Left","invert","actualSize"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,oBAArB,EAA2CC,eAA3C,QAAkE,gBAAlE;AACA,OAAOC,IAAP,MAAiB,gCAAjB;AACA,OAAOC,IAAP,MAAiB,gCAAjB;AAEA,eAAe,SAASC,UAAT,CAAoBC,MAApB,EAA4BC,OAA5B,EAAqC;AAClD,OAAKC,SAAL,GAAiB,EAAjB;;AAEA,MAAI,KAAKF,MAAL,IAAe,IAAnB,EAAyB;AACvB,SAAK,IAAIG,GAAT,IAAgB,KAAKH,MAArB,EAA6B;AAC3B,UAAI,KAAKA,MAAL,CAAYI,cAAZ,CAA2BD,GAA3B,KAAmCH,MAAM,CAACI,cAAP,CAAsBD,GAAtB,CAAvC,EAAmE;AACjE,aAAKH,MAAL,CAAYG,GAAZ,IAAmBH,MAAM,CAACG,GAAD,CAAzB;AACD;AACF;AACF;;AAED,MAAI,KAAKF,OAAL,IAAgB,IAApB,EAA0B;AACxB,SAAKE,GAAL,IAAY,KAAKF,OAAjB,EAA0B;AACxB,UAAI,KAAKA,OAAL,CAAaG,cAAb,CAA4BD,GAA5B,KAAoCF,OAAO,CAACG,cAAR,CAAuBD,GAAvB,CAAxC,EAAqE;AACnE,aAAKF,OAAL,CAAaE,GAAb,IAAoBF,OAAO,CAACE,GAAD,CAA3B;AACD;AACF;;AAED,SAAKF,OAAL,CAAaI,MAAb,GAAsB,KAAKC,SAAL,CAAe,KAAKL,OAApB,CAAtB;AACA,SAAKA,OAAL,CAAaM,SAAb,GAAyB,KAAKC,YAAL,CAAkB,KAAKP,OAAvB,CAAzB;AACD;AACF;AAAA;;AAEDF,UAAU,CAACU,SAAX,CAAqBC,GAArB,GAA2B,UAAUC,UAAV,EAAsBC,MAAtB,EAA8B;AACvD,OAAKV,SAAL,CAAeS,UAAf,IAA6BC,MAA7B;AACD,CAFD;;AAIAb,UAAU,CAACU,SAAX,CAAqBI,SAArB,GAAiC,UAAUF,UAAV,EAAsB;AACrD,SAAO,KAAKT,SAAL,CAAeS,UAAf,KAA8B,IAArC;AACD,CAFD;;AAIAZ,UAAU,CAACU,SAAX,CAAqBH,SAArB,GAAiC,UAAUL,OAAV,EAAmB;AAClD,MAAIa,MAAM,GAAG,EAAb;AACAA,EAAAA,MAAM,CAACpB,UAAU,CAACqB,MAAZ,CAAN,GAA4Bd,OAAO,CAACe,gBAApC;AACAF,EAAAA,MAAM,CAACpB,UAAU,CAACuB,GAAZ,CAAN,GAAyBhB,OAAO,CAACiB,aAAjC;AACAJ,EAAAA,MAAM,CAACpB,UAAU,CAACyB,IAAZ,CAAN,GAA0BlB,OAAO,CAACmB,cAAlC;AACAN,EAAAA,MAAM,CAACpB,UAAU,CAAC2B,SAAZ,CAAN,GAA+BpB,OAAO,CAACmB,cAAvC;AACA,SAAON,MAAP;AACD,CAPD;;AASAf,UAAU,CAACU,SAAX,CAAqBD,YAArB,GAAoC,UAAUP,OAAV,EAAmB;AACrD,MAAIa,MAAM,GAAG,EAAb;AACAA,EAAAA,MAAM,CAACpB,UAAU,CAACqB,MAAZ,CAAN,GAA4Bd,OAAO,CAACqB,mBAApC;AACAR,EAAAA,MAAM,CAACpB,UAAU,CAACuB,GAAZ,CAAN,GAAyBhB,OAAO,CAACsB,gBAAjC;AACAT,EAAAA,MAAM,CAACpB,UAAU,CAACyB,IAAZ,CAAN,GAA0BlB,OAAO,CAACuB,iBAAlC;AACAV,EAAAA,MAAM,CAACpB,UAAU,CAAC2B,SAAZ,CAAN,GAA+BpB,OAAO,CAACuB,iBAAvC;AACA,SAAOV,MAAP;AACD,CAPD;;AASAf,UAAU,CAACU,SAAX,CAAqBgB,WAArB,GAAmC,UAAUC,UAAV,EAAsBC,QAAtB,EAAgCC,gBAAhC,EAAkD3B,OAAlD,EAA2D;AAC5F,MAAI4B,cAAJ,EACEC,IADF,EAEEC,eAFF;;AAIA,UAAQL,UAAR;AACE,SAAKhC,UAAU,CAACqB,MAAhB;AACEc,MAAAA,cAAc,GAAGD,gBAAgB,CAACI,QAAjB,CAA0BH,cAA3C;AACAC,MAAAA,IAAI,GAAG,IAAIjC,IAAJ,CAASgC,cAAc,CAACI,QAAxB,CAAP;AACAF,MAAAA,eAAe,GAAG,IAAIjC,IAAJ,CAAS,CAAT,EAAY,CAAZ,EAAegC,IAAI,CAACI,KAApB,EAA2BJ,IAAI,CAACK,MAAhC,CAAlB;;AACA,UAAIR,QAAJ,EAAc;AACZG,QAAAA,IAAI,CAACK,MAAL,IAAeN,cAAc,CAACO,aAAf,CAA6BC,GAA7B,GAAmCR,cAAc,CAACO,aAAf,CAA6BE,MAA/E;AACAR,QAAAA,IAAI,CAACI,KAAL,IAAcL,cAAc,CAACO,aAAf,CAA6BG,IAA7B,GAAoCV,cAAc,CAACO,aAAf,CAA6BI,KAA/E;AACAT,QAAAA,eAAe,CAACU,CAAhB,GAAoBZ,cAAc,CAACO,aAAf,CAA6BG,IAAjD;AACAR,QAAAA,eAAe,CAACW,CAAhB,GAAoBb,cAAc,CAACO,aAAf,CAA6BC,GAAjD;AACD;;AACD,UAAIT,gBAAgB,CAACe,mBAArB,EAA0C;AACxCb,QAAAA,IAAI,CAACK,MAAL,IAAelC,OAAO,CAAC2C,iBAAvB;AACD;;AACD,UAAIhB,gBAAgB,CAACiB,UAArB,EAAiC;AAC/Bf,QAAAA,IAAI,CAACI,KAAL,IAAcjC,OAAO,CAAC6C,gBAAtB;;AACA,gBAAQ7C,OAAO,CAAC8C,uBAAhB;AACE,eAAKpD,oBAAoB,CAACqD,KAA1B;AACEjB,YAAAA,eAAe,CAACU,CAAhB,IAAqBxC,OAAO,CAAC6C,gBAA7B;AACA;AAHJ;AAKD;;AACD,UAAIlB,gBAAgB,CAACqB,aAArB,EAAoC;AAClCnB,QAAAA,IAAI,CAACI,KAAL,IAAcjC,OAAO,CAACiD,mBAAtB;;AACA,gBAAQjD,OAAO,CAAC8C,uBAAhB;AACE,eAAKpD,oBAAoB,CAACqD,KAA1B;AACE;;AACF;AACEjB,YAAAA,eAAe,CAACU,CAAhB,IAAqBxC,OAAO,CAACiD,mBAA7B;AACA;AALJ;AAOD;;AACD;;AACF,SAAKxD,UAAU,CAACuB,GAAhB;AACEY,MAAAA,cAAc,GAAGD,gBAAgB,CAACI,QAAjB,CAA0BH,cAA3C;AACAC,MAAAA,IAAI,GAAG,IAAIjC,IAAJ,CAASgC,cAAc,CAACsB,iBAAxB,CAAP;AACA;;AACF,SAAKzD,UAAU,CAACyB,IAAhB;AACA,SAAKzB,UAAU,CAAC2B,SAAhB;AACES,MAAAA,IAAI,GAAG,IAAIjC,IAAJ,EAAP;AACA;AAxCJ;;AA2CA,UAAQI,OAAO,CAACmD,eAAhB;AACE,SAAKxD,eAAe,CAACyD,IAArB;AACA,SAAKzD,eAAe,CAACoD,KAArB;AACElB,MAAAA,IAAI,CAACwB,MAAL;AACA;AAJJ;;AAOA,SAAO;AACLC,IAAAA,UAAU,EAAEzB,IADP;AAELC,IAAAA,eAAe,EAAEA;AAFZ,GAAP;AAID,CA3DD","sourcesContent":["import { Visibility, AdviserPlacementType, OrientationType } from '../../../enums';\nimport Size from '../../../graphics/structs/Size';\nimport Rect from '../../../graphics/structs/Rect';\n\nexport default function BaseLayout(params, options) {\n  this._children = {};\n\n  if (this.params != null) {\n    for (var key in this.params) {\n      if (this.params.hasOwnProperty(key) && params.hasOwnProperty(key)) {\n        this.params[key] = params[key];\n      }\n    }\n  }\n\n  if (this.options != null) {\n    for (key in this.options) {\n      if (this.options.hasOwnProperty(key) && options.hasOwnProperty(key)) {\n        this.options[key] = options[key];\n      }\n    }\n\n    this.options.shifts = this.getShifts(this.options);\n    this.options.intervals = this.getIntervals(this.options);\n  }\n};\n\nBaseLayout.prototype.add = function (treeItemId, layout) {\n  this._children[treeItemId] = layout;\n};\n\nBaseLayout.prototype.getLayout = function (treeItemId) {\n  return this._children[treeItemId] || null;\n};\n\nBaseLayout.prototype.getShifts = function (options) {\n  var result = [];\n  result[Visibility.Normal] = options.normalLevelShift;\n  result[Visibility.Dot] = options.dotLevelShift;\n  result[Visibility.Line] = options.lineLevelShift;\n  result[Visibility.Invisible] = options.lineLevelShift;\n  return result;\n};\n\nBaseLayout.prototype.getIntervals = function (options) {\n  var result = [];\n  result[Visibility.Normal] = options.normalItemsInterval;\n  result[Visibility.Dot] = options.dotItemsInterval;\n  result[Visibility.Line] = options.lineItemsInterval;\n  result[Visibility.Invisible] = options.lineItemsInterval;\n  return result;\n};\n\nBaseLayout.prototype.getItemSize = function (visibility, isCursor, treeItemTemplate, options) {\n  var templateConfig,\n    size,\n    contentPosition;\n\n  switch (visibility) {\n    case Visibility.Normal:\n      templateConfig = treeItemTemplate.template.templateConfig;\n      size = new Size(templateConfig.itemSize);\n      contentPosition = new Rect(0, 0, size.width, size.height);\n      if (isCursor) {\n        size.height += templateConfig.cursorPadding.top + templateConfig.cursorPadding.bottom;\n        size.width += templateConfig.cursorPadding.left + templateConfig.cursorPadding.right;\n        contentPosition.x = templateConfig.cursorPadding.left;\n        contentPosition.y = templateConfig.cursorPadding.top;\n      }\n      if (treeItemTemplate.hasSelectorCheckbox) {\n        size.height += options.checkBoxPanelSize;\n      }\n      if (treeItemTemplate.hasButtons) {\n        size.width += options.buttonsPanelSize;\n        switch (options.groupTitlePlacementType) {\n          case AdviserPlacementType.Right:\n            contentPosition.x += options.buttonsPanelSize;\n            break;\n        }\n      }\n      if (treeItemTemplate.hasGroupTitle) {\n        size.width += options.groupTitlePanelSize;\n        switch (options.groupTitlePlacementType) {\n          case AdviserPlacementType.Right:\n            break;\n          default:\n            contentPosition.x += options.groupTitlePanelSize;\n            break;\n        }\n      }\n      break;\n    case Visibility.Dot:\n      templateConfig = treeItemTemplate.template.templateConfig;\n      size = new Size(templateConfig.minimizedItemSize);\n      break;\n    case Visibility.Line:\n    case Visibility.Invisible:\n      size = new Size();\n      break;\n  }\n\n  switch (options.orientationType) {\n    case OrientationType.Left:\n    case OrientationType.Right:\n      size.invert();\n      break;\n  }\n\n  return {\n    actualSize: size,\n    contentPosition: contentPosition\n  };\n};"]},"metadata":{},"sourceType":"module"}