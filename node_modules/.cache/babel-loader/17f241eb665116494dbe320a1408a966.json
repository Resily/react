{"ast":null,"code":"/**\n * @class Size\n * @classdesc Size object defines width and height.\n * \n * @param {Size} arg0 Size object to clone.\n * \n * @param {number} arg0 Width.\n * @param {number} arg1 Height.\n */\nexport default function Size(arg0, arg1) {\n  /**\n   * The width\n   * @type {number}\n   */\n  this.width = 0;\n  /**\n   * The height\n   * @type {number}\n   */\n\n  this.height = 0;\n\n  switch (arguments.length) {\n    case 1:\n      this.width = arg0.width;\n      this.height = arg0.height;\n      break;\n\n    case 2:\n      this.width = arg0;\n      this.height = arg1;\n      break;\n\n    default:\n      break;\n  }\n}\n;\n/**\n * Inverts size dimensions\n * \n * @returns {Size} Returns reference to the current size.\n */\n\nSize.prototype.invert = function () {\n  var width = this.width;\n  this.width = this.height;\n  this.height = width;\n  return this;\n};\n/**\n * Scales the size by the specified value\n * \n * @param {number} scale\n * @returns {Size} Returns reference to the current size.\n */\n\n\nSize.prototype.scale = function (scale) {\n  this.width = this.width * scale;\n  this.height = this.height * scale;\n  return this;\n};\n/**\n * Returns square size\n * \n * @returns {number} Returns square size.\n */\n\n\nSize.prototype.space = function () {\n  return this.width * this.height;\n};\n/**\n * Returns size in form of CSS style object.\n * \n * @param {string} [units=\"px\"] The string name of units.\n * @returns {object} CSS style object\n */\n\n\nSize.prototype.getCSS = function (units) {\n  units = units !== undefined ? units : \"px\";\n  var result = {\n    width: this.width + units,\n    height: this.height + units\n  };\n  return result;\n};\n/**\n * Crops the size by the other size object.\n * \n * @param {Size} size The size to use as the crop boundaries.\n * @returns {Size} Returns reference to the current size object\n */\n\n\nSize.prototype.cropBySize = function (size) {\n  this.width = Math.min(this.width, size.width);\n  this.height = Math.min(this.height, size.height);\n  return this;\n};\n/**\n * Extends the current size by the other size.\n * \n * @param {Size} size The size to use as extension.\n * @returns {Size} Returns reference to the current size object\n */\n\n\nSize.prototype.maxSize = function (size) {\n  this.width = Math.max(this.width, size.width);\n  this.height = Math.max(this.height, size.height);\n  return this;\n};\n/**\n * Expands the current size by the thickness object.\n * \n * @param {Thickness} thickness The thickness to use for expansion.\n * @returns {Size} Returns reference to the current size object\n */\n\n\nSize.prototype.addThickness = function (thickness) {\n  this.width = Math.max(0, this.width + thickness.left + thickness.right);\n  this.height = Math.max(0, this.height + thickness.top + thickness.bottom);\n  return this;\n};\n/**\n * Shrinks the current size by the thickness object.\n * \n * @param {Thickness} thickness The thickness to use for contraction.\n * @returns {Size} Returns reference to the current size object\n */\n\n\nSize.prototype.removeThickness = function (thickness) {\n  this.width = Math.max(0, this.width - thickness.left - thickness.right);\n  this.height = Math.max(0, this.height - thickness.top - thickness.bottom);\n  return this;\n};\n/**\n * Validates size properties\n * \n * @returns {boolean} Returns true if size properties are valid.\n */\n\n\nSize.prototype.validate = function () {\n  if (isNaN(this.width) || isNaN(this.height)) {\n    throw \"Invalid size.\";\n  }\n};","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/graphics/structs/Size.js"],"names":["Size","arg0","arg1","width","height","arguments","length","prototype","invert","scale","space","getCSS","units","undefined","result","cropBySize","size","Math","min","maxSize","max","addThickness","thickness","left","right","top","bottom","removeThickness","validate","isNaN"],"mappings":"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","sourcesContent":["/**\n * @class Size\n * @classdesc Size object defines width and height.\n * \n * @param {Size} arg0 Size object to clone.\n * \n * @param {number} arg0 Width.\n * @param {number} arg1 Height.\n */\nexport default function Size(arg0, arg1) {\n  /**\n   * The width\n   * @type {number}\n   */\n  this.width = 0;\n\n  /**\n   * The height\n   * @type {number}\n   */\n  this.height = 0;\n\n  switch (arguments.length) {\n    case 1:\n      this.width = arg0.width;\n      this.height = arg0.height;\n      break;\n    case 2:\n      this.width = arg0;\n      this.height = arg1;\n      break;\n    default:\n      break;\n  }\n};\n\n/**\n * Inverts size dimensions\n * \n * @returns {Size} Returns reference to the current size.\n */\nSize.prototype.invert = function () {\n  var width = this.width;\n  this.width = this.height;\n  this.height = width;\n  return this;\n};\n\n/**\n * Scales the size by the specified value\n * \n * @param {number} scale\n * @returns {Size} Returns reference to the current size.\n */\nSize.prototype.scale = function (scale) {\n  this.width = this.width * scale;\n  this.height = this.height * scale;\n  return this;\n};\n\n/**\n * Returns square size\n * \n * @returns {number} Returns square size.\n */\nSize.prototype.space = function () {\n  return this.width * this.height;\n};\n\n\n/**\n * Returns size in form of CSS style object.\n * \n * @param {string} [units=\"px\"] The string name of units.\n * @returns {object} CSS style object\n */\nSize.prototype.getCSS = function (units) {\n  units = (units !== undefined) ? units : \"px\";\n\n  var result = {\n    width: this.width + units,\n    height: this.height + units\n  };\n  return result;\n};\n\n/**\n * Crops the size by the other size object.\n * \n * @param {Size} size The size to use as the crop boundaries.\n * @returns {Size} Returns reference to the current size object\n */\nSize.prototype.cropBySize = function (size) {\n  this.width = Math.min(this.width, size.width);\n  this.height = Math.min(this.height, size.height);\n\n  return this;\n};\n\n/**\n * Extends the current size by the other size.\n * \n * @param {Size} size The size to use as extension.\n * @returns {Size} Returns reference to the current size object\n */\nSize.prototype.maxSize = function (size) {\n  this.width = Math.max(this.width, size.width);\n  this.height = Math.max(this.height, size.height);\n\n  return this;\n};\n\n/**\n * Expands the current size by the thickness object.\n * \n * @param {Thickness} thickness The thickness to use for expansion.\n * @returns {Size} Returns reference to the current size object\n */\nSize.prototype.addThickness = function (thickness) {\n  this.width = Math.max(0, this.width + thickness.left + thickness.right);\n  this.height = Math.max(0, this.height + thickness.top + thickness.bottom);\n\n  return this;\n};\n\n/**\n * Shrinks the current size by the thickness object.\n * \n * @param {Thickness} thickness The thickness to use for contraction.\n * @returns {Size} Returns reference to the current size object\n */\nSize.prototype.removeThickness = function (thickness) {\n  this.width = Math.max(0, this.width - thickness.left - thickness.right);\n  this.height = Math.max(0, this.height - thickness.top - thickness.bottom);\n\n  return this;\n};\n\n/**\n * Validates size properties\n * \n * @returns {boolean} Returns true if size properties are valid.\n */\nSize.prototype.validate = function () {\n  if (isNaN(this.width) || isNaN(this.height)) {\n    throw \"Invalid size.\";\n  }\n};"]},"metadata":{},"sourceType":"module"}