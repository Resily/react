{"ast":null,"code":"import Placeholder from './Placeholder';\nimport { SegmentType, LineType } from '../enums';\nimport Rect from './structs/Rect';\nimport Size from './structs/Size';\nimport RenderEventArgs from '../events/RenderEventArgs';\nexport default function PdfGraphics(doc) {\n  this._doc = doc, this._context = this._doc;\n  this.m_placeholders = {};\n  this.m_activePlaceholder = null;\n  this.saveCounter = 0;\n}\n;\n\nPdfGraphics.prototype.clean = function () {\n  while (this.saveCounter) {\n    this.saveCounter--;\n\n    this._doc.restore();\n  }\n};\n\nPdfGraphics.prototype.resize = function (name, width, height) {\n  var placeholder = this.m_placeholders[name];\n\n  if (!placeholder) {\n    placeholder = new Placeholder(name);\n    ;\n    placeholder.size = new Size(0, 0);\n    placeholder.rect = new Rect(0, 0, 0, 0);\n    this.m_placeholders[name] = placeholder;\n  }\n\n  placeholder.size = new Size(width, height);\n  placeholder.rect = new Rect(placeholder.rect.x, placeholder.rect.y, width, height);\n};\n\nPdfGraphics.prototype.position = function (name, left, top, width, height) {\n  this.resize(name, width, height);\n  var placeholder = this.m_placeholders[name];\n  placeholder.rect.x = left;\n  placeholder.rect.y = top;\n};\n\nPdfGraphics.prototype.begin = function () {};\n\nPdfGraphics.prototype.end = function () {};\n\nPdfGraphics.prototype.reset = function (arg0, arg1) {};\n\nPdfGraphics.prototype.activate = function (name, layer) {\n  if (!this.m_placeholders[name]) {\n    this.resize(name, 0, 0);\n  }\n\n  this.m_activePlaceholder = this.m_placeholders[name];\n  var _this$m_activePlaceho = this.m_activePlaceholder.rect,\n      x = _this$m_activePlaceho.x,\n      y = _this$m_activePlaceho.y;\n\n  while (this.saveCounter) {\n    this.saveCounter--;\n\n    this._doc.restore();\n  }\n\n  this._doc.save();\n\n  this.saveCounter++;\n\n  this._doc.translate(x, y);\n\n  return this.m_activePlaceholder;\n};\n\nPdfGraphics.prototype.text = function (x, y, width, height, label, orientation, horizontalAlignment, verticalAlignment, attr) {};\n\nPdfGraphics.prototype.polylinesBuffer = function (buffer) {\n  buffer.loop(this, function (polyline) {\n    if (polyline.length() > 0) {\n      this.polyline(polyline);\n    }\n  });\n};\n\nPdfGraphics.prototype.polyline = function (polylineData) {\n  var placeholder = this.m_activePlaceholder,\n      attr = polylineData.paletteItem.toAttr(),\n      step,\n      cornerRadius,\n      doc = this._doc;\n  doc.save();\n  polylineData.loop(this, function (segment) {\n    switch (segment.segmentType) {\n      case SegmentType.Move:\n        doc.moveTo(Math.round(segment.x) + 0.5, Math.round(segment.y) + 0.5);\n        break;\n\n      case SegmentType.Line:\n        doc.lineTo(Math.round(segment.x) + 0.5, Math.round(segment.y) + 0.5);\n        break;\n\n      case SegmentType.Dot:\n        if (segment.width == segment.height && segment.width / 2.0 <= segment.cornerRadius) {\n          // circle dot\n          doc.roundedRect(Math.round(segment.x) + 0.5, Math.round(segment.y) + 0.5, segment.width, segment.height, Math.min(segment.width, segment.height) / 2.0);\n        } else if (segment.cornerRadius === 0) {\n          // square\n          doc.moveTo(Math.round(segment.x) + 0.5, Math.round(segment.y) + 0.5);\n          doc.lineTo(Math.round(segment.x + segment.width) + 0.5, Math.round(segment.y) + 0.5);\n          doc.lineTo(Math.round(segment.x + segment.width) + 0.5, Math.round(segment.y + segment.height) + 0.5);\n          doc.lineTo(Math.round(segment.x) + 0.5, Math.round(segment.y + segment.height) + 0.5);\n          doc.lineTo(Math.round(segment.x) + 0.5, Math.round(segment.y) + 0.5);\n        } else {\n          // rounded corners rectangle\n          cornerRadius = Math.min(segment.cornerRadius, Math.min(segment.width / 2.0, segment.height / 2.0));\n          doc.roundedRect(Math.round(segment.x) + 0.5, Math.round(segment.y) + 0.5, segment.width, segment.height, cornerRadius);\n        }\n\n        break;\n\n      case SegmentType.QuadraticArc:\n        doc.quadraticCurveTo(Math.round(segment.cpX) + 0.5, Math.round(segment.cpY) + 0.5, Math.round(segment.x) + 0.5, Math.round(segment.y) + 0.5);\n        break;\n\n      case SegmentType.CubicArc:\n        doc.bezierCurveTo(Math.round(segment.cpX1) + 0.5, Math.round(segment.cpY1) + 0.5, Math.round(segment.cpX2) + 0.5, Math.round(segment.cpY2) + 0.5, Math.round(segment.x) + 0.5, Math.round(segment.y) + 0.5);\n        break;\n    }\n  });\n  doc.lineJoin('round');\n\n  if (attr.lineType != null) {\n    step = Math.round(attr.lineWidth) || 1;\n\n    switch (attr.lineType) {\n      case LineType.Solid:\n        break;\n\n      case LineType.Dotted:\n        doc.dash(step, step * 2);\n        break;\n\n      case LineType.Dashed:\n        doc.dash(step * 5, step * 3);\n        break;\n    }\n  }\n\n  if (attr.lineWidth !== undefined && attr.fillColor !== undefined) {\n    doc.lineWidth(attr.lineWidth).fillColor(attr.fillColor, attr.opacity).strokeColor(attr.borderColor).fillAndStroke();\n  } else if (attr.lineWidth !== undefined) {\n    doc.lineWidth(attr.lineWidth).stroke(attr.borderColor);\n  } else if (attr.fillColor !== undefined) {\n    doc.fillColor(attr.fillColor, attr.opacity);\n  }\n\n  doc.restore();\n};\n\nPdfGraphics.prototype.rightAngleLine = function (fromX, fromY, toX, toY, attr) {};\n\nPdfGraphics.prototype.template = function (x, y, width, height, contentx, contenty, contentWidth, contentHeight, template, hashCode, onRenderTemplate, uiHash, attr) {\n  //ignore jslint\n  var gap = 0;\n\n  if (attr !== null) {\n    if (attr.borderWidth !== undefined) {\n      gap = this.getPxSize(attr.borderWidth);\n    }\n  }\n\n  var position = new Rect(x + contentx, y + contenty, contentWidth - gap, contentHeight - gap);\n\n  if (uiHash == null) {\n    uiHash = new RenderEventArgs();\n  }\n\n  if (onRenderTemplate !== null) {\n    onRenderTemplate(this._doc, position, uiHash);\n  }\n};\n\nPdfGraphics.prototype.getPxSize = function (value, base) {\n  var result = value;\n\n  if (typeof value === \"string\") {\n    if (value.indexOf(\"pt\") > 0) {\n      result = parseInt(value, 10) * 96 / 72;\n    } else if (value.indexOf(\"%\") > 0) {\n      result = parseFloat(value) / 100.0 * base;\n    } else {\n      result = parseInt(value, 10);\n    }\n  }\n\n  return result;\n};","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/graphics/PdfGraphics.js"],"names":["Placeholder","SegmentType","LineType","Rect","Size","RenderEventArgs","PdfGraphics","doc","_doc","_context","m_placeholders","m_activePlaceholder","saveCounter","prototype","clean","restore","resize","name","width","height","placeholder","size","rect","x","y","position","left","top","begin","end","reset","arg0","arg1","activate","layer","save","translate","text","label","orientation","horizontalAlignment","verticalAlignment","attr","polylinesBuffer","buffer","loop","polyline","length","polylineData","paletteItem","toAttr","step","cornerRadius","segment","segmentType","Move","moveTo","Math","round","Line","lineTo","Dot","roundedRect","min","QuadraticArc","quadraticCurveTo","cpX","cpY","CubicArc","bezierCurveTo","cpX1","cpY1","cpX2","cpY2","lineJoin","lineType","lineWidth","Solid","Dotted","dash","Dashed","undefined","fillColor","opacity","strokeColor","borderColor","fillAndStroke","stroke","rightAngleLine","fromX","fromY","toX","toY","template","contentx","contenty","contentWidth","contentHeight","hashCode","onRenderTemplate","uiHash","gap","borderWidth","getPxSize","value","base","result","indexOf","parseInt","parseFloat"],"mappings":"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","sourcesContent":["import Placeholder from './Placeholder';\nimport { SegmentType, LineType } from '../enums';\nimport Rect from './structs/Rect';\nimport Size from './structs/Size';\nimport RenderEventArgs from '../events/RenderEventArgs';\n\nexport default function PdfGraphics(doc) {\n  this._doc = doc,\n  this._context = this._doc;\n  this.m_placeholders = {};\n  this.m_activePlaceholder = null;\n  this.saveCounter = 0;\n};\n\nPdfGraphics.prototype.clean = function () {\n  while(this.saveCounter) {\n    this.saveCounter--;\n    this._doc.restore();\n  }\n};\n\nPdfGraphics.prototype.resize = function (name, width, height) {\n  var placeholder = this.m_placeholders[name];\n  if(!placeholder) {\n    placeholder = new Placeholder(name);;\n    placeholder.size = new Size(0, 0);\n    placeholder.rect = new Rect(0, 0, 0, 0);\n    this.m_placeholders[name] = placeholder;\n  }\n  placeholder.size = new Size(width, height);\n  placeholder.rect = new Rect(placeholder.rect.x, placeholder.rect.y, width, height);\n};\n\nPdfGraphics.prototype.position = function (name, left, top, width, height) {\n  this.resize(name, width, height);\n\n  var placeholder = this.m_placeholders[name];\n  placeholder.rect.x = left;\n  placeholder.rect.y = top;\n};\n\nPdfGraphics.prototype.begin = function () {\n\n};\n\nPdfGraphics.prototype.end = function () {\n\n};\n\nPdfGraphics.prototype.reset = function (arg0, arg1) {\n\n};\n\nPdfGraphics.prototype.activate = function (name, layer) {\n  if(!this.m_placeholders[name]) {\n    this.resize(name, 0, 0);\n  }\n  this.m_activePlaceholder = this.m_placeholders[name];\n\n  var { x, y } = this.m_activePlaceholder.rect;\n  while(this.saveCounter) {\n    this.saveCounter--;\n    this._doc.restore();\n  }\n  this._doc.save();\n  this.saveCounter++;\n  this._doc.translate(x, y);\n\n  return this.m_activePlaceholder;\n};\n\nPdfGraphics.prototype.text = function (x, y, width, height, label, orientation, horizontalAlignment, verticalAlignment, attr) {\n\n};\n\nPdfGraphics.prototype.polylinesBuffer = function (buffer) {\n  buffer.loop(this, function (polyline) {\n    if (polyline.length() > 0) {\n      this.polyline(polyline);\n    }\n  });\n};\n\nPdfGraphics.prototype.polyline = function (polylineData) {\n  var placeholder = this.m_activePlaceholder,\n    attr = polylineData.paletteItem.toAttr(),\n    step,\n    cornerRadius,\n    doc = this._doc;\n\n  doc.save();\n  polylineData.loop(this, function (segment) {\n    switch (segment.segmentType) {\n      case SegmentType.Move:\n        doc.moveTo(Math.round(segment.x) + 0.5, Math.round(segment.y) + 0.5);\n        break;\n      case SegmentType.Line:\n        doc.lineTo(Math.round(segment.x) + 0.5, Math.round(segment.y) + 0.5);\n        break;\n      case SegmentType.Dot:\n        if (segment.width == segment.height && segment.width / 2.0 <= segment.cornerRadius) {\n          // circle dot\n          doc.roundedRect(Math.round(segment.x) + 0.5, Math.round(segment.y) + 0.5, segment.width, segment.height, Math.min(segment.width, segment.height) / 2.0);\n        } else if (segment.cornerRadius === 0) {\n          // square\n          doc.moveTo(Math.round(segment.x) + 0.5, Math.round(segment.y) + 0.5);\n          doc.lineTo(Math.round(segment.x + segment.width) + 0.5, Math.round(segment.y) + 0.5);\n          doc.lineTo(Math.round(segment.x + segment.width) + 0.5, Math.round(segment.y + segment.height) + 0.5);\n          doc.lineTo(Math.round(segment.x) + 0.5, Math.round(segment.y + segment.height) + 0.5);\n          doc.lineTo(Math.round(segment.x) + 0.5, Math.round(segment.y) + 0.5);\n        } else {\n          // rounded corners rectangle\n          cornerRadius = Math.min(segment.cornerRadius, Math.min(segment.width / 2.0, segment.height / 2.0));\n          doc.roundedRect(Math.round(segment.x) + 0.5, Math.round(segment.y) + 0.5, segment.width, segment.height, cornerRadius);\n        }\n        break;\n      case SegmentType.QuadraticArc:\n        doc.quadraticCurveTo(Math.round(segment.cpX) + 0.5, Math.round(segment.cpY) + 0.5, Math.round(segment.x) + 0.5, Math.round(segment.y) + 0.5);\n        break;\n      case SegmentType.CubicArc:\n        doc.bezierCurveTo(Math.round(segment.cpX1) + 0.5,\n          Math.round(segment.cpY1) + 0.5,\n          Math.round(segment.cpX2) + 0.5,\n          Math.round(segment.cpY2) + 0.5,\n          Math.round(segment.x) + 0.5,\n          Math.round(segment.y) + 0.5);\n        break;\n    }\n  });\n\n  doc.lineJoin('round');\n\n  if (attr.lineType != null) {\n    step = Math.round(attr.lineWidth) || 1;\n    switch (attr.lineType) {\n      case LineType.Solid:\n        break;\n      case LineType.Dotted:\n        doc.dash(step, step * 2);\n        break;\n      case LineType.Dashed:\n        doc.dash(step * 5, step * 3);\n        break;\n    }\n  }\n\n  if (attr.lineWidth !== undefined && attr.fillColor !== undefined) {\n    doc\n      .lineWidth(attr.lineWidth)\n      .fillColor(attr.fillColor, attr.opacity)\n      .strokeColor(attr.borderColor)\n      .fillAndStroke();\n  }\n  else if (attr.lineWidth !== undefined) {\n    doc\n      .lineWidth(attr.lineWidth)\n      .stroke(attr.borderColor);\n  }\n  else if (attr.fillColor !== undefined) {\n    doc.fillColor(attr.fillColor, attr.opacity);\n  }\n  doc.restore();\n};\n\n\nPdfGraphics.prototype.rightAngleLine = function (fromX, fromY, toX, toY, attr) {\n\n};\n\nPdfGraphics.prototype.template = function (x, y, width, height, contentx, contenty, contentWidth, contentHeight, template, hashCode, onRenderTemplate, uiHash, attr) { //ignore jslint\n  var gap = 0;\n\n  if (attr !== null) {\n    if (attr.borderWidth !== undefined) {\n      gap = this.getPxSize(attr.borderWidth);\n    }\n  }\n\n  var position = new Rect(x + contentx, y + contenty, contentWidth - gap, contentHeight - gap);\n\n  if (uiHash == null) {\n    uiHash = new RenderEventArgs();\n  }\n\n  if (onRenderTemplate !== null) {\n    onRenderTemplate(this._doc, position, uiHash);\n  }\n};\n\nPdfGraphics.prototype.getPxSize = function (value, base) {\n  var result = value;\n  if (typeof value === \"string\") {\n    if (value.indexOf(\"pt\") > 0) {\n      result = parseInt(value, 10) * 96 / 72;\n    }\n    else if (value.indexOf(\"%\") > 0) {\n      result = parseFloat(value) / 100.0 * base;\n    }\n    else {\n      result = parseInt(value, 10);\n    }\n  }\n  return result;\n};"]},"metadata":{},"sourceType":"module"}