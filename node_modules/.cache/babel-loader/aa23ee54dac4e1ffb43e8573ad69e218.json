{"ast":null,"code":"import Point from './Point';\nimport Vector from './Vector';\nimport Interval from './Interval';\nimport { PlacementType } from '../../enums';\n/**\n * @class Rect\n * @classdesc Class describes the width, height and location of rectangle.\n * \n * @param {Rect} arg0 Rectangle to clone.\n * \n * @param {Point} arg0 The top left point.\n * @param {Point} arg1 The bottom right point.\n * \n * @param {number} arg0 The x coordinate of top left corner.\n * @param {number} arg1 The y coordinate of top left corner.\n * @param {number} arg2 Rect width.\n * @param {number} arg3 Rect height.\n */\n\nexport default function Rect(arg0, arg1, arg2, arg3) {\n  /**\n   * The location x coordinate\n   * @type {number}\n   */\n  this.x = null;\n  /**\n   * The location y coordinate\n   * @type {number}\n   */\n\n  this.y = null;\n  /**\n   * The width of rectangle.\n   * @type {number}\n   */\n\n  this.width = null;\n  /**\n   * The height of rectangle.\n   * @type {number}\n   */\n\n  this.height = null;\n  /**\n   * Reference to context object associated with this rectangle.\n   * @type {object}\n   */\n\n  this.context = null;\n\n  switch (arguments.length) {\n    case 1:\n      this.x = arg0.x;\n      this.y = arg0.y;\n      this.width = arg0.width;\n      this.height = arg0.height;\n      break;\n\n    case 2:\n      this.x = Math.min(arg0.x, arg1.x);\n      this.y = Math.min(arg0.y, arg1.y);\n      this.width = Math.abs(arg1.x - arg0.x);\n      this.height = Math.abs(arg1.y - arg0.y);\n      break;\n\n    case 4:\n      this.x = arg0;\n      this.y = arg1;\n      this.width = arg2;\n      this.height = arg3;\n      break;\n\n    default:\n      break;\n  }\n}\n;\n/**\n * Left\n * \n * @returns {number} Returns x coordinate of the rectangle\n */\n\nRect.prototype.left = function () {\n  return this.x;\n};\n/**\n * Top\n * \n * @returns {number} Returns y coordinate of the rectangle\n */\n\n\nRect.prototype.top = function () {\n  return this.y;\n};\n/**\n * Right\n * \n * @returns {number} Returns x-axis coordinate of the right side of the rectangle\n */\n\n\nRect.prototype.right = function () {\n  return this.x + this.width;\n};\n/**\n * Bottom\n * \n * @returns {number} Returns y-axis coordinate of the bottom side of the rectangle\n */\n\n\nRect.prototype.bottom = function () {\n  return this.y + this.height;\n};\n/**\n * Vertical center\n * \n * @returns {number} Returns y-axis coordinate of the center point of the rectangle.\n */\n\n\nRect.prototype.verticalCenter = function () {\n  return this.y + this.height / 2.0;\n};\n/**\n * Horizontal center\n * \n * @returns {number} Returns x-axis coordinate of the center point of the rectangle.\n */\n\n\nRect.prototype.horizontalCenter = function () {\n  return this.x + this.width / 2.0;\n};\n/**\n * Center point\n * \n * @returns {Point} Returns center point of the rectangle.\n */\n\n\nRect.prototype.centerPoint = function () {\n  return new Point(this.horizontalCenter(), this.verticalCenter());\n};\n/**\n * Checks if rectangle is empty. Rectangle is empty if one of its sizes is undefined or less than zero.\n * \n * @returns {boolean} Returns true if rectangle is empty.\n */\n\n\nRect.prototype.isEmpty = function () {\n  return this.x === null || this.y === null || this.width === null || this.height === null || this.width < 0 || this.height < 0;\n};\n/**\n * Expands rectangle boundaries by using specified value in all directions. Value can be negative.\n * \n * @param {number} arg0 The amount by which to expand or shrink the sides of the rectangle.\n * @param {number} arg0 Left side\n * @param {number} arg1 Top side\n * @param {number} arg2 Right side\n * @param {number} arg3 Bottom side\n */\n\n\nRect.prototype.offset = function (arg0, arg1, arg2, arg3) {\n  switch (arguments.length) {\n    case 1:\n      if (arg0 !== null && typeof arg0 == \"object\") {\n        this.x = this.x - arg0.left;\n        this.y = this.y - arg0.top;\n        this.width = this.width + arg0.left + arg0.right;\n        this.height = this.height + arg0.top + arg0.bottom;\n      } else {\n        this.x = this.x - arg0;\n        this.y = this.y - arg0;\n        this.width = this.width + arg0 * 2.0;\n        this.height = this.height + arg0 * 2.0;\n      }\n\n      break;\n\n    case 4:\n      this.x = this.x - arg0;\n      this.y = this.y - arg1;\n      this.width = this.width + arg0 + arg2;\n      this.height = this.height + arg1 + arg3;\n      break;\n  }\n\n  return this;\n};\n/**\n * Scales the rectangle by the specified value\n * \n * @param {number} scale\n * @returns {Rect} Returns reference to the current rectangle.\n */\n\n\nRect.prototype.scale = function (scale) {\n  this.x = this.x * scale;\n  this.y = this.y * scale;\n  this.width = this.width * scale;\n  this.height = this.height * scale;\n  return this;\n};\n/**\n * Moves the rectangle by the specified horizontal and vertical offsets.\n * \n * @param {number} x Horizontal offset\n * @param {number} y Vertical offset\n * \n * @returns {Rect} Returns reference to the current rectangle.\n */\n\n\nRect.prototype.translate = function (x, y) {\n  this.x = this.x + x;\n  this.y = this.y + y;\n  return this;\n};\n/**\n * Inverts rectangle coordinates\n * \n * @returns {Rect} Returns reference to the current rectangle.\n */\n\n\nRect.prototype.invert = function () {\n  var width = this.width,\n      x = this.x;\n  this.width = this.height;\n  this.height = width;\n  this.x = this.y;\n  this.y = x;\n  return this;\n};\n/**\n * Callback for iterating rectangle's sides\n *\n * @callback loopRectEdgesCallback\n * @param {Vector} vector Vector connecting two corners of the rectangle's side\n * @param {PlacementType} placementType The current side\n * @returns {boolean} Returns true to break iteration process\n */\n\n/**\n * Loops edges of the rectangle in the clockwise order: Top, Right, Bottom, Left\n *\n * @param {loopRectEdgesCallback} callback A callback function to iterate over sides of the rectangle. \n * @returns {Rect} Returns reference to the current rectangle.\n*/\n\n\nRect.prototype.loopEdges = function (callback) {\n  // function(vector, placementType) {}\n  var vertexes = [new Point(this.left(), this.top()), new Point(this.right(), this.top()), new Point(this.right(), this.bottom()), new Point(this.left(), this.bottom())],\n      placements = [PlacementType.Top, PlacementType.Right, PlacementType.Bottom, PlacementType.Left];\n  vertexes.push(vertexes[0]);\n\n  if (callback != null) {\n    for (var index = 1, len = vertexes.length; index < len; index += 1) {\n      if (callback(new Vector(vertexes[index - 1], vertexes[index]), placements[index - 1])) {\n        break;\n      }\n    }\n  }\n\n  return this;\n};\n/**\n * Checks if the rectangle contains given point\n * \n * @param {Point} arg0 The point to check.\n * \n * @param {number} arg0  The x coordinate of the point to check.\n * @param {number} arg1  The y coordinate of the point to check.\n * @returns {boolean} Returns true if the rectangle contains the specified point; otherwise, false.\n */\n\n\nRect.prototype.contains = function (arg0, arg1) {\n  switch (arguments.length) {\n    case 1:\n      return this.x <= arg0.x && arg0.x <= this.x + this.width && this.y <= arg0.y && arg0.y <= this.y + this.height;\n\n    case 2:\n      return this.x <= arg0 && arg0 <= this.x + this.width && this.y <= arg1 && arg1 <= this.y + this.height;\n\n    default:\n      return false;\n  }\n};\n/**\n * Crops the rectangle by the boundaries of the specified rectangle.\n * \n * @param {Rect} rect The rectangle that is used to crop boundaries by\n * @returns {Rect} Returns reference to the current rectangle.\n */\n\n\nRect.prototype.cropByRect = function (rect) {\n  if (this.x < rect.x) {\n    this.width -= rect.x - this.x;\n    this.x = rect.x;\n  }\n\n  if (this.right() > rect.right()) {\n    this.width -= this.right() - rect.right();\n  }\n\n  if (this.y < rect.y) {\n    this.height -= rect.y - this.y;\n    this.y = rect.y;\n  }\n\n  if (this.bottom() > rect.bottom()) {\n    this.height -= this.bottom() - rect.bottom();\n  }\n\n  if (this.isEmpty()) {\n    this.x = null;\n    this.y = null;\n    this.width = null;\n    this.height = null;\n  }\n\n  return this;\n};\n/**\n * Checks if the rectangle overlaps the specified rectangle\n * \n * @param {Rect} rect The rectangle to check overlapping for.\n * @returns {boolean} Returns true if two rectangles overlap each other.\n */\n\n\nRect.prototype.overlaps = function (rect) {\n  var result = true;\n\n  if (this.x + this.width < rect.x || rect.x + rect.width < this.x || this.y + this.height < rect.y || rect.y + rect.height < this.y) {\n    result = false;\n  }\n\n  return result;\n};\n/**\n * Expands the rectangle boundaries to contain the specified rectangle.\n * \n * @param {Rect} arg0 The rectangle to contain.\n * \n * @param {number} arg0 The x coordinate of top left corner.\n * @param {number} arg1 The y coordinate of top left corner.\n * @param {number} [arg2=undefined] Width.\n * @param {number} [arg3=undefined] Height.\n * @returns {Rect} Returns reference to the current rectangle.\n */\n\n\nRect.prototype.addRect = function (arg0, arg1, arg2, arg3) {\n  var right, bottom;\n\n  switch (arguments.length) {\n    case 1:\n      if (!arg0.isEmpty()) {\n        if (this.isEmpty()) {\n          this.x = arg0.x;\n          this.y = arg0.y;\n          this.width = arg0.width;\n          this.height = arg0.height;\n        } else {\n          right = Math.max(this.right(), arg0.right());\n          bottom = Math.max(this.bottom(), arg0.bottom());\n          this.x = Math.min(this.x, arg0.x);\n          this.y = Math.min(this.y, arg0.y);\n          this.width = right - this.x;\n          this.height = bottom - this.y;\n        }\n      }\n\n      break;\n\n    case 2:\n      if (this.isEmpty()) {\n        this.x = arg0;\n        this.y = arg1;\n        this.width = 0;\n        this.height = 0;\n      } else {\n        right = Math.max(this.right(), arg0);\n        bottom = Math.max(this.bottom(), arg1);\n        this.x = Math.min(this.x, arg0);\n        this.y = Math.min(this.y, arg1);\n        this.width = right - this.x;\n        this.height = bottom - this.y;\n      }\n\n      break;\n\n    case 4:\n      if (this.isEmpty()) {\n        this.x = arg0;\n        this.y = arg1;\n        this.width = arg2;\n        this.height = arg3;\n      } else {\n        right = Math.max(this.right(), arg0 + arg2);\n        bottom = Math.max(this.bottom(), arg1 + arg3);\n        this.x = Math.min(this.x, arg0);\n        this.y = Math.min(this.y, arg1);\n        this.width = right - this.x;\n        this.height = bottom - this.y;\n      }\n\n      break;\n  }\n\n  return this;\n};\n/**\n * Returns rectangle location and size in form of CSS style object.\n * \n * @param {string} [units=\"px\"] The string name of units.\n * @returns {object} CSS style object\n */\n\n\nRect.prototype.getCSS = function (units) {\n  units = units !== undefined ? units : \"px\";\n  var result = {\n    left: this.x + units,\n    top: this.y + units,\n    width: this.width + units,\n    height: this.height + units\n  };\n  return result;\n};\n/**\n * Returns rectangle location and size in form of CSS style string.\n * \n * @param {string} [units=\"px\"] The string name of units.\n * @returns {string} CSS style string.\n */\n\n\nRect.prototype.toString = function (units) {\n  var result = \"\";\n  units = units !== undefined ? units : \"px\";\n  result += \"left:\" + this.x + units + \";\";\n  result += \"top:\" + this.y + units + \";\";\n  result += \"width:\" + this.width + units + \";\";\n  result += \"height:\" + this.height + units + \";\";\n  return result;\n};\n/**\n * Validates rectangle properties\n * \n * @returns {boolean} Returns true if rectangle properties are valid.\n */\n\n\nRect.prototype.validate = function () {\n  if (isNaN(this.x) || isNaN(this.y) || isNaN(this.width) || isNaN(this.height)) {\n    throw \"Invalid rect position.\";\n  }\n};\n/**\n * Checks if rectangles are equal\n * \n * @param {Rect} rect Rectangle\n * @returns {boolean} Returns true if rectangles are equal.\n */\n\n\nRect.prototype.equalTo = function (rect) {\n  return this.x == rect.x && this.y == rect.y && this.width == rect.width && this.height == rect.height;\n};\n/**\n * Find intersection point between rectangle's perimeter and line connecting the given point and center of the rectangle\n * \n * @param {Point} point Point to project\n * @returns {Point} Returns point or null if point is inside rectangle.\n */\n\n\nRect.prototype.getProjectionPoint = function (point) {\n  var result = null;\n\n  if (!this.contains(point)) {\n    var vector = new Vector(this.centerPoint(), point);\n    this.loopEdges(function (edge) {\n      result = vector.getIntersectionPoint(edge, true, 1.0);\n      return result != null;\n    });\n  }\n\n  return result;\n};\n/**\n * Vertical Interval\n * \n * @returns {Interval} Returns vertical interval of the rectangle\n */\n\n\nRect.prototype.verticalInterval = function () {\n  return new Interval(this.y, this.bottom());\n};","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/graphics/structs/Rect.js"],"names":["Point","Vector","Interval","PlacementType","Rect","arg0","arg1","arg2","arg3","x","y","width","height","context","arguments","length","Math","min","abs","prototype","left","top","right","bottom","verticalCenter","horizontalCenter","centerPoint","isEmpty","offset","scale","translate","invert","loopEdges","callback","vertexes","placements","Top","Right","Bottom","Left","push","index","len","contains","cropByRect","rect","overlaps","result","addRect","max","getCSS","units","undefined","toString","validate","isNaN","equalTo","getProjectionPoint","point","vector","edge","getIntersectionPoint","verticalInterval"],"mappings":"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","sourcesContent":["import Point from './Point';\nimport Vector from './Vector';\nimport Interval from './Interval';\nimport { PlacementType } from '../../enums'\n\n/**\n * @class Rect\n * @classdesc Class describes the width, height and location of rectangle.\n * \n * @param {Rect} arg0 Rectangle to clone.\n * \n * @param {Point} arg0 The top left point.\n * @param {Point} arg1 The bottom right point.\n * \n * @param {number} arg0 The x coordinate of top left corner.\n * @param {number} arg1 The y coordinate of top left corner.\n * @param {number} arg2 Rect width.\n * @param {number} arg3 Rect height.\n */\nexport default function Rect(arg0, arg1, arg2, arg3) {\n  /**\n   * The location x coordinate\n   * @type {number}\n   */\n  this.x = null;\n  /**\n   * The location y coordinate\n   * @type {number}\n   */\n  this.y = null;\n  /**\n   * The width of rectangle.\n   * @type {number}\n   */\n  this.width = null;\n  /**\n   * The height of rectangle.\n   * @type {number}\n   */\n  this.height = null;\n  /**\n   * Reference to context object associated with this rectangle.\n   * @type {object}\n   */\n  this.context = null;\n\n  switch (arguments.length) {\n    case 1:\n      this.x = arg0.x;\n      this.y = arg0.y;\n      this.width = arg0.width;\n      this.height = arg0.height;\n      break;\n    case 2:\n      this.x = Math.min(arg0.x, arg1.x);\n      this.y = Math.min(arg0.y, arg1.y);\n      this.width = Math.abs(arg1.x - arg0.x);\n      this.height = Math.abs(arg1.y - arg0.y);\n      break;\n    case 4:\n      this.x = arg0;\n      this.y = arg1;\n      this.width = arg2;\n      this.height = arg3;\n      break;\n    default:\n      break;\n  }\n};\n\n/**\n * Left\n * \n * @returns {number} Returns x coordinate of the rectangle\n */\nRect.prototype.left = function () {\n  return this.x;\n};\n\n/**\n * Top\n * \n * @returns {number} Returns y coordinate of the rectangle\n */\nRect.prototype.top = function () {\n  return this.y;\n};\n\n/**\n * Right\n * \n * @returns {number} Returns x-axis coordinate of the right side of the rectangle\n */\nRect.prototype.right = function () {\n  return this.x + this.width;\n};\n\n/**\n * Bottom\n * \n * @returns {number} Returns y-axis coordinate of the bottom side of the rectangle\n */\nRect.prototype.bottom = function () {\n  return this.y + this.height;\n};\n\n/**\n * Vertical center\n * \n * @returns {number} Returns y-axis coordinate of the center point of the rectangle.\n */\nRect.prototype.verticalCenter = function () {\n  return this.y + this.height / 2.0;\n};\n\n/**\n * Horizontal center\n * \n * @returns {number} Returns x-axis coordinate of the center point of the rectangle.\n */\nRect.prototype.horizontalCenter = function () {\n  return this.x + this.width / 2.0;\n};\n\n/**\n * Center point\n * \n * @returns {Point} Returns center point of the rectangle.\n */\nRect.prototype.centerPoint = function () {\n  return new Point(this.horizontalCenter(), this.verticalCenter());\n};\n\n/**\n * Checks if rectangle is empty. Rectangle is empty if one of its sizes is undefined or less than zero.\n * \n * @returns {boolean} Returns true if rectangle is empty.\n */\nRect.prototype.isEmpty = function () {\n  return this.x === null || this.y === null || this.width === null || this.height === null || this.width < 0 || this.height < 0;\n};\n\n/**\n * Expands rectangle boundaries by using specified value in all directions. Value can be negative.\n * \n * @param {number} arg0 The amount by which to expand or shrink the sides of the rectangle.\n * @param {number} arg0 Left side\n * @param {number} arg1 Top side\n * @param {number} arg2 Right side\n * @param {number} arg3 Bottom side\n */\nRect.prototype.offset = function (arg0, arg1, arg2, arg3) {\n  switch (arguments.length) {\n    case 1:\n      if (arg0 !== null && typeof arg0 == \"object\") {\n        this.x = this.x - arg0.left;\n        this.y = this.y - arg0.top;\n\n        this.width = this.width + arg0.left + arg0.right;\n        this.height = this.height + arg0.top + arg0.bottom;\n      } else {\n        this.x = this.x - arg0;\n        this.y = this.y - arg0;\n\n        this.width = this.width + arg0 * 2.0;\n        this.height = this.height + arg0 * 2.0;\n      }\n      break;\n    case 4:\n      this.x = this.x - arg0;\n      this.y = this.y - arg1;\n\n      this.width = this.width + arg0 + arg2;\n      this.height = this.height + arg1 + arg3;\n      break;\n  }\n  return this;\n};\n\n/**\n * Scales the rectangle by the specified value\n * \n * @param {number} scale\n * @returns {Rect} Returns reference to the current rectangle.\n */\nRect.prototype.scale = function (scale) {\n  this.x = this.x * scale;\n  this.y = this.y * scale;\n  this.width = this.width * scale;\n  this.height = this.height * scale;\n  return this;\n};\n\n/**\n * Moves the rectangle by the specified horizontal and vertical offsets.\n * \n * @param {number} x Horizontal offset\n * @param {number} y Vertical offset\n * \n * @returns {Rect} Returns reference to the current rectangle.\n */\nRect.prototype.translate = function (x, y) {\n  this.x = this.x + x;\n  this.y = this.y + y;\n\n  return this;\n};\n\n/**\n * Inverts rectangle coordinates\n * \n * @returns {Rect} Returns reference to the current rectangle.\n */\nRect.prototype.invert = function () {\n  var width = this.width,\n    x = this.x;\n  this.width = this.height;\n  this.height = width;\n  this.x = this.y;\n  this.y = x;\n  return this;\n};\n\n/**\n * Callback for iterating rectangle's sides\n *\n * @callback loopRectEdgesCallback\n * @param {Vector} vector Vector connecting two corners of the rectangle's side\n * @param {PlacementType} placementType The current side\n * @returns {boolean} Returns true to break iteration process\n */\n\n/**\n * Loops edges of the rectangle in the clockwise order: Top, Right, Bottom, Left\n *\n * @param {loopRectEdgesCallback} callback A callback function to iterate over sides of the rectangle. \n * @returns {Rect} Returns reference to the current rectangle.\n*/\nRect.prototype.loopEdges = function (callback) { // function(vector, placementType) {}\n  var vertexes = [\n    new Point(this.left(), this.top()),\n    new Point(this.right(), this.top()),\n    new Point(this.right(), this.bottom()),\n    new Point(this.left(), this.bottom())\n  ],\n    placements = [\n      PlacementType.Top,\n      PlacementType.Right,\n      PlacementType.Bottom,\n      PlacementType.Left\n    ];\n\n  vertexes.push(vertexes[0]);\n\n\n\n  if (callback != null) {\n    for (var index = 1, len = vertexes.length; index < len; index += 1) {\n      if (callback(new Vector(vertexes[index - 1], vertexes[index]), placements[index - 1])) {\n        break;\n      }\n    }\n  }\n  return this;\n};\n\n/**\n * Checks if the rectangle contains given point\n * \n * @param {Point} arg0 The point to check.\n * \n * @param {number} arg0  The x coordinate of the point to check.\n * @param {number} arg1  The y coordinate of the point to check.\n * @returns {boolean} Returns true if the rectangle contains the specified point; otherwise, false.\n */\nRect.prototype.contains = function (arg0, arg1) {\n  switch (arguments.length) {\n    case 1:\n      return this.x <= arg0.x && arg0.x <= this.x + this.width && this.y <= arg0.y && arg0.y <= this.y + this.height;\n    case 2:\n      return this.x <= arg0 && arg0 <= this.x + this.width && this.y <= arg1 && arg1 <= this.y + this.height;\n    default:\n      return false;\n  }\n};\n\n/**\n * Crops the rectangle by the boundaries of the specified rectangle.\n * \n * @param {Rect} rect The rectangle that is used to crop boundaries by\n * @returns {Rect} Returns reference to the current rectangle.\n */\nRect.prototype.cropByRect = function (rect) {\n  if (this.x < rect.x) {\n    this.width -= (rect.x - this.x);\n    this.x = rect.x;\n  }\n\n  if (this.right() > rect.right()) {\n    this.width -= (this.right() - rect.right());\n  }\n\n  if (this.y < rect.y) {\n    this.height -= (rect.y - this.y);\n    this.y = rect.y;\n  }\n\n  if (this.bottom() > rect.bottom()) {\n    this.height -= this.bottom() - rect.bottom();\n  }\n\n  if (this.isEmpty()) {\n    this.x = null;\n    this.y = null;\n    this.width = null;\n    this.height = null;\n  }\n\n  return this;\n};\n\n/**\n * Checks if the rectangle overlaps the specified rectangle\n * \n * @param {Rect} rect The rectangle to check overlapping for.\n * @returns {boolean} Returns true if two rectangles overlap each other.\n */\nRect.prototype.overlaps = function (rect) {\n  var result = true;\n  if (this.x + this.width < rect.x || rect.x + rect.width < this.x || this.y + this.height < rect.y || rect.y + rect.height < this.y) {\n    result = false;\n  }\n  return result;\n};\n\n/**\n * Expands the rectangle boundaries to contain the specified rectangle.\n * \n * @param {Rect} arg0 The rectangle to contain.\n * \n * @param {number} arg0 The x coordinate of top left corner.\n * @param {number} arg1 The y coordinate of top left corner.\n * @param {number} [arg2=undefined] Width.\n * @param {number} [arg3=undefined] Height.\n * @returns {Rect} Returns reference to the current rectangle.\n */\nRect.prototype.addRect = function (arg0, arg1, arg2, arg3) {\n  var right,\n    bottom;\n  switch (arguments.length) {\n    case 1:\n      if (!arg0.isEmpty()) {\n        if (this.isEmpty()) {\n          this.x = arg0.x;\n          this.y = arg0.y;\n          this.width = arg0.width;\n          this.height = arg0.height;\n        }\n        else {\n          right = Math.max(this.right(), arg0.right());\n          bottom = Math.max(this.bottom(), arg0.bottom());\n\n          this.x = Math.min(this.x, arg0.x);\n          this.y = Math.min(this.y, arg0.y);\n          this.width = right - this.x;\n          this.height = bottom - this.y;\n        }\n      }\n      break;\n    case 2:\n      if (this.isEmpty()) {\n        this.x = arg0;\n        this.y = arg1;\n        this.width = 0;\n        this.height = 0;\n      }\n      else {\n        right = Math.max(this.right(), arg0);\n        bottom = Math.max(this.bottom(), arg1);\n\n        this.x = Math.min(this.x, arg0);\n        this.y = Math.min(this.y, arg1);\n        this.width = right - this.x;\n        this.height = bottom - this.y;\n      }\n      break;\n    case 4:\n      if (this.isEmpty()) {\n        this.x = arg0;\n        this.y = arg1;\n        this.width = arg2;\n        this.height = arg3;\n      }\n      else {\n        right = Math.max(this.right(), arg0 + arg2);\n        bottom = Math.max(this.bottom(), arg1 + arg3);\n\n        this.x = Math.min(this.x, arg0);\n        this.y = Math.min(this.y, arg1);\n        this.width = right - this.x;\n        this.height = bottom - this.y;\n      }\n      break;\n  }\n\n  return this;\n};\n\n/**\n * Returns rectangle location and size in form of CSS style object.\n * \n * @param {string} [units=\"px\"] The string name of units.\n * @returns {object} CSS style object\n */\nRect.prototype.getCSS = function (units) {\n  units = (units !== undefined) ? units : \"px\";\n\n  var result = {\n    left: this.x + units,\n    top: this.y + units,\n    width: this.width + units,\n    height: this.height + units\n  };\n  return result;\n};\n\n/**\n * Returns rectangle location and size in form of CSS style string.\n * \n * @param {string} [units=\"px\"] The string name of units.\n * @returns {string} CSS style string.\n */\nRect.prototype.toString = function (units) {\n  var result = \"\";\n\n  units = (units !== undefined) ? units : \"px\";\n\n  result += \"left:\" + this.x + units + \";\";\n  result += \"top:\" + this.y + units + \";\";\n  result += \"width:\" + this.width + units + \";\";\n  result += \"height:\" + this.height + units + \";\";\n\n  return result;\n};\n\n/**\n * Validates rectangle properties\n * \n * @returns {boolean} Returns true if rectangle properties are valid.\n */\nRect.prototype.validate = function () {\n  if (isNaN(this.x) || isNaN(this.y) || isNaN(this.width) || isNaN(this.height)) {\n    throw \"Invalid rect position.\";\n  }\n};\n\n/**\n * Checks if rectangles are equal\n * \n * @param {Rect} rect Rectangle\n * @returns {boolean} Returns true if rectangles are equal.\n */\nRect.prototype.equalTo = function (rect) {\n  return this.x == rect.x && this.y == rect.y && this.width == rect.width && this.height == rect.height;\n};\n\n/**\n * Find intersection point between rectangle's perimeter and line connecting the given point and center of the rectangle\n * \n * @param {Point} point Point to project\n * @returns {Point} Returns point or null if point is inside rectangle.\n */\nRect.prototype.getProjectionPoint = function (point) {\n  var result = null;\n  if(!this.contains(point)) {\n    var vector = new Vector(this.centerPoint(), point);\n    this.loopEdges(function(edge) {\n      result = vector.getIntersectionPoint(edge, true, 1.0);\n      return (result != null);\n    });\n  }\n  return result;\n};\n\n/**\n * Vertical Interval\n * \n * @returns {Interval} Returns vertical interval of the rectangle\n */\nRect.prototype.verticalInterval = function () {\n  return new Interval( this.y, this.bottom() );\n};"]},"metadata":{},"sourceType":"module"}