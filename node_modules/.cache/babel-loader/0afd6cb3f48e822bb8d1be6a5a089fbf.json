{"ast":null,"code":"import Size from '../../graphics/structs/Size';\nimport Rect from '../../graphics/structs/Rect';\nimport Point from '../../graphics/structs/Point';\nimport TreeItemPosition from '../../models/TreeItemPosition';\nimport { OrientationType, Visibility, HorizontalAlignmentType, PageFitMode } from '../../enums';\nimport SpatialIndex from '../../algorithms/SpatialIndex';\nimport KeyboardNavigationManager from '../../managers/KeyboardNavigationManager';\nexport default function AlignDiagramTask(orientationOptionTask, itemsSizesOptionTask, visualTreeOptionTask, scaleOptionTask, currentControlSizeTask, activeItemsTask, itemsPositionsTask, isFamilyChartMode) {\n  var _data = {\n    treeItemsPositions: {},\n    // TreeItemPosition();\n    panelSize: null // Rect();\n\n  },\n      _activeItems,\n      _treeItemsPositions,\n      _options,\n      _orientationOptions,\n      _visualTreeOptions,\n      _scaleOptions,\n      _spatialIndex,\n      _keyboardNavigationManager;\n\n  function process() {\n    var placeholderSize = new Size(itemsPositionsTask.getContentSize()),\n        _currentControlSizeTa = currentControlSizeTask.getOptions(),\n        optimalPanelSize = _currentControlSizeTa.optimalPanelSize,\n        panelSize = new Size(optimalPanelSize);\n\n    _spatialIndex = null;\n    _keyboardNavigationManager = null;\n    _activeItems = activeItemsTask != null ? activeItemsTask.getActiveItems() : {};\n    _treeItemsPositions = itemsPositionsTask.getItemsPositions();\n    _options = itemsSizesOptionTask.getOptions();\n    _orientationOptions = orientationOptionTask.getOptions();\n    _visualTreeOptions = visualTreeOptionTask.getOptions();\n    _scaleOptions = scaleOptionTask.getOptions();\n\n    switch (_orientationOptions.orientationType) {\n      case OrientationType.Left:\n      case OrientationType.Right:\n        panelSize.invert();\n        break;\n    }\n\n    panelSize.scale(1.0 / _scaleOptions.scale); // By default we translate everything forward\n\n    _data.panelSize = panelSize;\n    _data.treeItemsPositions = _treeItemsPositions;\n\n    switch (_options.pageFitMode) {\n      case PageFitMode.AutoSize:\n        _data.panelSize = new Size(placeholderSize);\n        break;\n\n      default:\n        _data.panelSize = new Size(placeholderSize);\n\n        if (placeholderSize.width < panelSize.width) {\n          _data.treeItemsPositions = {};\n          stretchToWidth(_data.treeItemsPositions, placeholderSize.width, panelSize.width);\n          _data.panelSize.width = panelSize.width;\n        }\n\n        if (placeholderSize.height < panelSize.height) {\n          _data.panelSize.height = panelSize.height;\n        }\n\n        break;\n    }\n\n    switch (_orientationOptions.orientationType) {\n      case OrientationType.Left:\n      case OrientationType.Right:\n        _data.panelSize.invert();\n\n        break;\n    }\n\n    return true;\n  }\n\n  function stretchToWidth(treeItemsPositions, treeWidth, panelWidth) {\n    var offset;\n\n    if (isFamilyChartMode) {\n      offset = (panelWidth - treeWidth) / 2.0;\n    } else {\n      switch (_visualTreeOptions.horizontalAlignment) {\n        case HorizontalAlignmentType.Left:\n          offset = 0;\n          break;\n\n        case HorizontalAlignmentType.Right:\n          offset = panelWidth - treeWidth;\n          break;\n\n        case HorizontalAlignmentType.Center:\n          offset = (panelWidth - treeWidth) / 2.0;\n          break;\n      }\n    }\n\n    translateItemPositions(treeItemsPositions, offset, 0);\n  }\n\n  function translateItemPositions(treeItemsPositions, offsetX, offsetY) {\n    var treeItemid, treeItemPosition;\n\n    for (treeItemid in _treeItemsPositions) {\n      if (_treeItemsPositions.hasOwnProperty(treeItemid)) {\n        treeItemPosition = new TreeItemPosition(_treeItemsPositions[treeItemid]);\n        treeItemPosition.actualPosition.translate(offsetX, offsetY);\n        treeItemsPositions[treeItemid] = treeItemPosition;\n      }\n    }\n  }\n\n  function getSizes() {\n    var result = [];\n    var hash = {};\n\n    for (var itemid in _data.treeItemsPositions) {\n      if (_data.treeItemsPositions.hasOwnProperty(itemid)) {\n        var treeItemPosition = _data.treeItemsPositions[itemid];\n\n        switch (treeItemPosition.actualVisibility) {\n          case Visibility.Normal:\n          case Visibility.Dot: //ignore jslint\n\n          case Visibility.Line:\n            var item = treeItemPosition.actualPosition;\n            var size = Math.max(item.width, item.height);\n\n            if (!hash.hasOwnProperty(size)) {\n              hash[size] = true;\n              result.push(size);\n            }\n\n        }\n      }\n    }\n\n    return result;\n  }\n\n  function getSpatialIndex() {\n    if (_spatialIndex == null) {\n      _spatialIndex = SpatialIndex(getSizes());\n\n      for (var itemid in _data.treeItemsPositions) {\n        if (_data.treeItemsPositions.hasOwnProperty(itemid)) {\n          var treeItemPosition = _data.treeItemsPositions[itemid];\n\n          if (_activeItems.hasOwnProperty(itemid)) {\n            switch (treeItemPosition.actualVisibility) {\n              case Visibility.Normal:\n              case Visibility.Dot: //ignore jslint\n\n              case Visibility.Line:\n                var rect = new Rect(treeItemPosition.actualPosition);\n                rect.context = itemid;\n\n                _spatialIndex.addRect(rect);\n\n            }\n          }\n        }\n      }\n    }\n\n    return _spatialIndex;\n  }\n\n  function getTreeItemForMousePosition(x, y, gravityRadius) {\n    var result = null,\n        bestDistance = null,\n        distance,\n        scale = _scaleOptions.scale,\n        spatialIndex = getSpatialIndex(),\n        selection,\n        center;\n    x = x / scale;\n    y = y / scale;\n    selection = new Rect(x, y, 0, 0);\n    center = new Point(x, y);\n    selection.offset(gravityRadius, gravityRadius, gravityRadius, gravityRadius);\n    spatialIndex.loopArea(this, selection, function (rect) {\n      var itemid = rect.context;\n\n      if (rect.contains(x, y)) {\n        result = itemid;\n        return true;\n      }\n\n      var treeItemPosition = _data.treeItemsPositions[itemid];\n\n      switch (treeItemPosition.actualVisibility) {\n        case Visibility.Dot: //ignore jslint\n\n        case Visibility.Line:\n          var distance = center.distanceTo(rect.horizontalCenter(), rect.verticalCenter());\n\n          if (bestDistance == null || distance < bestDistance) {\n            bestDistance = distance;\n            result = itemid;\n          }\n\n      }\n    });\n    return result;\n  }\n\n  function getKeyboardNavigationManager() {\n    if (_keyboardNavigationManager == null) {\n      _keyboardNavigationManager = KeyboardNavigationManager();\n\n      for (var itemid in _data.treeItemsPositions) {\n        if (_data.treeItemsPositions.hasOwnProperty(itemid)) {\n          var treeItemPosition = _data.treeItemsPositions[itemid];\n\n          if (_activeItems.hasOwnProperty(itemid)) {\n            switch (treeItemPosition.actualVisibility) {\n              case Visibility.Normal:\n                var rect = new Rect(treeItemPosition.actualPosition);\n\n                _keyboardNavigationManager.addRect(rect, itemid);\n\n            }\n          }\n        }\n      }\n    }\n\n    return _keyboardNavigationManager;\n  }\n\n  function getNextItem(cursorItem, direction) {\n    var manager = getKeyboardNavigationManager(),\n        result;\n\n    switch (direction) {\n      case OrientationType.Top:\n        result = manager.getItemAbove(cursorItem);\n        break;\n\n      case OrientationType.Bottom:\n        result = manager.getItemBelow(cursorItem);\n        break;\n\n      case OrientationType.Left:\n        result = manager.getItemOnLeft(cursorItem);\n        break;\n\n      case OrientationType.Right:\n        result = manager.getItemOnRight(cursorItem);\n        break;\n    }\n\n    return result;\n  }\n\n  function getItemPosition(itemid) {\n    return _data.treeItemsPositions[itemid];\n  }\n\n  function getItemsPositions() {\n    return _data.treeItemsPositions;\n  }\n\n  function getContentSize() {\n    return _data.panelSize;\n  }\n\n  return {\n    process: process,\n    getItemPosition: getItemPosition,\n    getItemsPositions: getItemsPositions,\n    getContentSize: getContentSize,\n    getTreeItemForMousePosition: getTreeItemForMousePosition,\n    getNextItem: getNextItem\n  };\n}\n;","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/tasks/layout/AlignDiagramTask.js"],"names":["Size","Rect","Point","TreeItemPosition","OrientationType","Visibility","HorizontalAlignmentType","PageFitMode","SpatialIndex","KeyboardNavigationManager","AlignDiagramTask","orientationOptionTask","itemsSizesOptionTask","visualTreeOptionTask","scaleOptionTask","currentControlSizeTask","activeItemsTask","itemsPositionsTask","isFamilyChartMode","_data","treeItemsPositions","panelSize","_activeItems","_treeItemsPositions","_options","_orientationOptions","_visualTreeOptions","_scaleOptions","_spatialIndex","_keyboardNavigationManager","process","placeholderSize","getContentSize","getOptions","optimalPanelSize","getActiveItems","getItemsPositions","orientationType","Left","Right","invert","scale","pageFitMode","AutoSize","width","stretchToWidth","height","treeWidth","panelWidth","offset","horizontalAlignment","Center","translateItemPositions","offsetX","offsetY","treeItemid","treeItemPosition","hasOwnProperty","actualPosition","translate","getSizes","result","hash","itemid","actualVisibility","Normal","Dot","Line","item","size","Math","max","push","getSpatialIndex","rect","context","addRect","getTreeItemForMousePosition","x","y","gravityRadius","bestDistance","distance","spatialIndex","selection","center","loopArea","contains","distanceTo","horizontalCenter","verticalCenter","getKeyboardNavigationManager","getNextItem","cursorItem","direction","manager","Top","getItemAbove","Bottom","getItemBelow","getItemOnLeft","getItemOnRight","getItemPosition"],"mappings":"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","sourcesContent":["import Size from '../../graphics/structs/Size';\nimport Rect from '../../graphics/structs/Rect';\nimport Point from '../../graphics/structs/Point';\nimport TreeItemPosition from '../../models/TreeItemPosition';\nimport { OrientationType, Visibility, HorizontalAlignmentType, PageFitMode } from '../../enums';\nimport SpatialIndex from '../../algorithms/SpatialIndex';\nimport KeyboardNavigationManager from '../../managers/KeyboardNavigationManager';\n\nexport default function AlignDiagramTask(orientationOptionTask, itemsSizesOptionTask, visualTreeOptionTask, scaleOptionTask,\n  currentControlSizeTask, activeItemsTask, itemsPositionsTask, isFamilyChartMode) {\n  var _data = {\n    treeItemsPositions: {}, // TreeItemPosition();\n    panelSize: null // Rect();\n  },\n    _activeItems,\n    _treeItemsPositions,\n\n    _options,\n    _orientationOptions,\n    _visualTreeOptions,\n    _scaleOptions,\n    _spatialIndex,\n    _keyboardNavigationManager;\n\n  function process() {\n    var placeholderSize = new Size(itemsPositionsTask.getContentSize()),\n      { optimalPanelSize } = currentControlSizeTask.getOptions(),\n      panelSize = new Size(optimalPanelSize);\n\n    _spatialIndex = null;\n    _keyboardNavigationManager = null;\n\n    _activeItems = activeItemsTask != null ? activeItemsTask.getActiveItems() : {};\n    _treeItemsPositions = itemsPositionsTask.getItemsPositions();\n\n    _options = itemsSizesOptionTask.getOptions();\n    _orientationOptions = orientationOptionTask.getOptions();\n    _visualTreeOptions = visualTreeOptionTask.getOptions();\n    _scaleOptions = scaleOptionTask.getOptions();\n\n    switch (_orientationOptions.orientationType) {\n      case OrientationType.Left:\n      case OrientationType.Right:\n        panelSize.invert();\n        break;\n    }\n\n    panelSize.scale(1.0 / _scaleOptions.scale);\n\n    // By default we translate everything forward\n    _data.panelSize = panelSize;\n    _data.treeItemsPositions = _treeItemsPositions;\n\n    switch (_options.pageFitMode) {\n      case PageFitMode.AutoSize:\n        _data.panelSize = new Size(placeholderSize);\n        break;\n      default:\n        _data.panelSize = new Size(placeholderSize);\n        if (placeholderSize.width < panelSize.width) {\n          _data.treeItemsPositions = {};\n          stretchToWidth(_data.treeItemsPositions, placeholderSize.width, panelSize.width);\n          _data.panelSize.width = panelSize.width;\n        }\n        if (placeholderSize.height < panelSize.height) {\n          _data.panelSize.height = panelSize.height;\n        }\n        break;\n    }\n\n    switch (_orientationOptions.orientationType) {\n      case OrientationType.Left:\n      case OrientationType.Right:\n        _data.panelSize.invert();\n        break;\n    }\n\n    return true;\n  }\n\n  function stretchToWidth(treeItemsPositions, treeWidth, panelWidth) {\n    var offset;\n    if (isFamilyChartMode) {\n      offset = (panelWidth - treeWidth) / 2.0;\n    } else {\n      switch (_visualTreeOptions.horizontalAlignment) {\n        case HorizontalAlignmentType.Left:\n          offset = 0;\n          break;\n        case HorizontalAlignmentType.Right:\n          offset = panelWidth - treeWidth;\n          break;\n        case HorizontalAlignmentType.Center:\n          offset = (panelWidth - treeWidth) / 2.0;\n          break;\n      }\n    }\n    translateItemPositions(treeItemsPositions, offset, 0);\n  }\n\n  function translateItemPositions(treeItemsPositions, offsetX, offsetY) {\n    var treeItemid, treeItemPosition;\n    for (treeItemid in _treeItemsPositions) {\n      if (_treeItemsPositions.hasOwnProperty(treeItemid)) {\n        treeItemPosition = new TreeItemPosition(_treeItemsPositions[treeItemid]);\n        treeItemPosition.actualPosition.translate(offsetX, offsetY);\n        treeItemsPositions[treeItemid] = treeItemPosition;\n      }\n    }\n  }\n\n  function getSizes() {\n    var result = [];\n    var hash = {};\n    for (var itemid in _data.treeItemsPositions) {\n      if (_data.treeItemsPositions.hasOwnProperty(itemid)) {\n        var treeItemPosition = _data.treeItemsPositions[itemid];\n        switch (treeItemPosition.actualVisibility) {\n          case Visibility.Normal:\n          case Visibility.Dot://ignore jslint\n          case Visibility.Line:\n            var item = treeItemPosition.actualPosition;\n            var size = Math.max(item.width, item.height);\n            if (!hash.hasOwnProperty(size)) {\n              hash[size] = true;\n              result.push(size);\n            }\n        }\n      }\n    }\n    return result;\n  }\n\n  function getSpatialIndex() {\n    if (_spatialIndex == null) {\n      _spatialIndex = SpatialIndex(getSizes());\n      for (var itemid in _data.treeItemsPositions) {\n        if (_data.treeItemsPositions.hasOwnProperty(itemid)) {\n          var treeItemPosition = _data.treeItemsPositions[itemid];\n          if (_activeItems.hasOwnProperty(itemid)) {\n            switch (treeItemPosition.actualVisibility) {\n              case Visibility.Normal:\n              case Visibility.Dot://ignore jslint\n              case Visibility.Line:\n                var rect = new Rect(treeItemPosition.actualPosition);\n                rect.context = itemid;\n                _spatialIndex.addRect(rect);\n            }\n          }\n        }\n      }\n    }\n    return _spatialIndex;\n  }\n\n  function getTreeItemForMousePosition(x, y, gravityRadius) {\n    var result = null,\n      bestDistance = null, distance,\n      scale = _scaleOptions.scale,\n      spatialIndex = getSpatialIndex(),\n      selection,\n      center;\n\n    x = x / scale;\n    y = y / scale;\n    selection = new Rect(x, y, 0, 0);\n    center = new Point(x, y);\n    selection.offset(gravityRadius, gravityRadius, gravityRadius, gravityRadius);\n\n    spatialIndex.loopArea(this, selection, function (rect) {\n      var itemid = rect.context;\n      if (rect.contains(x, y)) {\n        result = itemid;\n        return true;\n      }\n      var treeItemPosition = _data.treeItemsPositions[itemid];\n      switch (treeItemPosition.actualVisibility) {\n        case Visibility.Dot://ignore jslint\n        case Visibility.Line:\n          var distance = center.distanceTo(rect.horizontalCenter(), rect.verticalCenter());\n          if (bestDistance == null || distance < bestDistance) {\n            bestDistance = distance;\n            result = itemid;\n          }\n      }\n    });\n\n    return result;\n  }\n\n  function getKeyboardNavigationManager() {\n    if (_keyboardNavigationManager == null) {\n      _keyboardNavigationManager = KeyboardNavigationManager();\n      for (var itemid in _data.treeItemsPositions) {\n        if (_data.treeItemsPositions.hasOwnProperty(itemid)) {\n          var treeItemPosition = _data.treeItemsPositions[itemid];\n          if (_activeItems.hasOwnProperty(itemid)) {\n            switch (treeItemPosition.actualVisibility) {\n              case Visibility.Normal:\n                var rect = new Rect(treeItemPosition.actualPosition);\n                _keyboardNavigationManager.addRect(rect, itemid);\n            }\n          }\n        }\n      }\n    }\n    return _keyboardNavigationManager;\n  }\n\n  function getNextItem(cursorItem, direction) {\n    var manager = getKeyboardNavigationManager(),\n      result;\n\n    switch (direction) {\n      case OrientationType.Top:\n        result = manager.getItemAbove(cursorItem);\n        break;\n      case OrientationType.Bottom:\n        result = manager.getItemBelow(cursorItem);\n        break;\n      case OrientationType.Left:\n        result = manager.getItemOnLeft(cursorItem);\n        break;\n      case OrientationType.Right:\n        result = manager.getItemOnRight(cursorItem);\n        break;\n    }\n\n    return result;\n  }\n\n  function getItemPosition(itemid) {\n    return _data.treeItemsPositions[itemid];\n  }\n\n  function getItemsPositions() {\n    return _data.treeItemsPositions;\n  }\n\n  function getContentSize() {\n    return _data.panelSize;\n  }\n\n  return {\n    process: process,\n    getItemPosition: getItemPosition,\n    getItemsPositions: getItemsPositions,\n    getContentSize: getContentSize,\n\n    getTreeItemForMousePosition: getTreeItemForMousePosition,\n    getNextItem: getNextItem\n  };\n};"]},"metadata":{},"sourceType":"module"}