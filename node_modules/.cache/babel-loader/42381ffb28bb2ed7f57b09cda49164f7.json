{"ast":null,"code":"import BaseShape from './BaseShape';\nimport Polyline from '../structs/Polyline';\nimport PaletteItem from '../structs/PaletteItem';\nimport MoveSegment from '../structs/MoveSegment';\nimport LineSegment from '../structs/LineSegment';\nimport { LineType } from '../../enums';\nimport getMergedRectangles from '../../algorithms/getMergedRectangles';\nexport default function MergedRectangles(graphics) {\n  this.graphics = graphics;\n  this.transform = null;\n  this.lineWidth = 1;\n  this.opacity = 1;\n  this.fillColor = null;\n  this.lineType = LineType.Solid;\n  this.borderColor = null;\n}\n;\nMergedRectangles.prototype = new BaseShape();\n\nMergedRectangles.prototype.draw = function (rects) {\n  var paletteItem = new PaletteItem({\n    lineColor: this.borderColor,\n    lineWidth: this.lineWidth,\n    fillColor: this.fillColor,\n    lineType: this.lineType,\n    opacity: this.opacity\n  }),\n      polyline = new Polyline(paletteItem);\n  getMergedRectangles(this, rects, function (points) {\n    for (var index = 0, len = points.length; index < len; index += 1) {\n      var point = points[index];\n\n      if (index == 0) {\n        polyline.addSegment(new MoveSegment(point.x, point.y));\n      } else {\n        polyline.addSegment(new LineSegment(point.x, point.y));\n      }\n    }\n  });\n  polyline.transform(this.transform, true);\n  this.graphics.polyline(polyline);\n};","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/graphics/shapes/MergedRectangles.js"],"names":["BaseShape","Polyline","PaletteItem","MoveSegment","LineSegment","LineType","getMergedRectangles","MergedRectangles","graphics","transform","lineWidth","opacity","fillColor","lineType","Solid","borderColor","prototype","draw","rects","paletteItem","lineColor","polyline","points","index","len","length","point","addSegment","x","y"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,aAAtB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,mBAAP,MAAgC,sCAAhC;AAEA,eAAe,SAASC,gBAAT,CAA0BC,QAA1B,EAAoC;AACjD,OAAKA,QAAL,GAAgBA,QAAhB;AACA,OAAKC,SAAL,GAAiB,IAAjB;AAEA,OAAKC,SAAL,GAAiB,CAAjB;AACA,OAAKC,OAAL,GAAe,CAAf;AACA,OAAKC,SAAL,GAAiB,IAAjB;AACA,OAAKC,QAAL,GAAgBR,QAAQ,CAACS,KAAzB;AACA,OAAKC,WAAL,GAAmB,IAAnB;AACD;AAAA;AAEDR,gBAAgB,CAACS,SAAjB,GAA6B,IAAIhB,SAAJ,EAA7B;;AAEAO,gBAAgB,CAACS,SAAjB,CAA2BC,IAA3B,GAAkC,UAAUC,KAAV,EAAiB;AACjD,MAAIC,WAAW,GAAG,IAAIjB,WAAJ,CAAgB;AAChCkB,IAAAA,SAAS,EAAE,KAAKL,WADgB;AAEhCL,IAAAA,SAAS,EAAE,KAAKA,SAFgB;AAGhCE,IAAAA,SAAS,EAAE,KAAKA,SAHgB;AAIhCC,IAAAA,QAAQ,EAAE,KAAKA,QAJiB;AAKhCF,IAAAA,OAAO,EAAE,KAAKA;AALkB,GAAhB,CAAlB;AAAA,MAOEU,QAAQ,GAAG,IAAIpB,QAAJ,CAAakB,WAAb,CAPb;AASAb,EAAAA,mBAAmB,CAAC,IAAD,EAAOY,KAAP,EAAc,UAAUI,MAAV,EAAkB;AACjD,SAAK,IAAIC,KAAK,GAAG,CAAZ,EAAeC,GAAG,GAAGF,MAAM,CAACG,MAAjC,EAAyCF,KAAK,GAAGC,GAAjD,EAAsDD,KAAK,IAAI,CAA/D,EAAkE;AAChE,UAAIG,KAAK,GAAGJ,MAAM,CAACC,KAAD,CAAlB;;AACA,UAAIA,KAAK,IAAI,CAAb,EAAgB;AACdF,QAAAA,QAAQ,CAACM,UAAT,CAAoB,IAAIxB,WAAJ,CAAgBuB,KAAK,CAACE,CAAtB,EAAyBF,KAAK,CAACG,CAA/B,CAApB;AACD,OAFD,MAEO;AACLR,QAAAA,QAAQ,CAACM,UAAT,CAAoB,IAAIvB,WAAJ,CAAgBsB,KAAK,CAACE,CAAtB,EAAyBF,KAAK,CAACG,CAA/B,CAApB;AACD;AACF;AACF,GATkB,CAAnB;AAWAR,EAAAA,QAAQ,CAACZ,SAAT,CAAmB,KAAKA,SAAxB,EAAmC,IAAnC;AAEA,OAAKD,QAAL,CAAca,QAAd,CAAuBA,QAAvB;AACD,CAxBD","sourcesContent":["import BaseShape from './BaseShape';\nimport Polyline from '../structs/Polyline';\nimport PaletteItem from '../structs/PaletteItem';\nimport MoveSegment from '../structs/MoveSegment';\nimport LineSegment from '../structs/LineSegment';\nimport { LineType } from '../../enums';\nimport getMergedRectangles from '../../algorithms/getMergedRectangles';\n\nexport default function MergedRectangles(graphics) {\n  this.graphics = graphics;\n  this.transform = null;\n\n  this.lineWidth = 1;\n  this.opacity = 1;\n  this.fillColor = null;\n  this.lineType = LineType.Solid;\n  this.borderColor = null;\n};\n\nMergedRectangles.prototype = new BaseShape();\n\nMergedRectangles.prototype.draw = function (rects) {\n  var paletteItem = new PaletteItem({\n    lineColor: this.borderColor,\n    lineWidth: this.lineWidth,\n    fillColor: this.fillColor,\n    lineType: this.lineType,\n    opacity: this.opacity\n  }),\n    polyline = new Polyline(paletteItem);\n\n  getMergedRectangles(this, rects, function (points) {\n    for (var index = 0, len = points.length; index < len; index += 1) {\n      var point = points[index];\n      if (index == 0) {\n        polyline.addSegment(new MoveSegment(point.x, point.y));\n      } else {\n        polyline.addSegment(new LineSegment(point.x, point.y));\n      }\n    }\n  });\n\n  polyline.transform(this.transform, true);\n\n  this.graphics.polyline(polyline);\n};"]},"metadata":{},"sourceType":"module"}