{"ast":null,"code":"import { LineType, Colors } from '../enums';\n/**\n * @class PaletteItemConfig\n * @classdesc Palette Item configuration object defines cross family connections lines styles. Multi-parent diagrams have cross hierarchy \n * relation lines, so in order to make their visual tracing more easy on diagram every connection line can be styled differently.\n * (This is the same approach as for visualization of regular classic line charts. If we have multiple lines in chart area it makes\n * sense to style every line individually.)\n * \n * @param {PaletteItemConfig} arg0 Palette properties object.\n * \n * @param {string} arg0 Line color\n * @param {number} arg1 Line width\n * @param {LineType} arg2 Line type\n */\n\nexport default function PaletteItemConfig(arg0, arg1, arg2) {\n  var property;\n  /**\n   * Line color\n   * \n   * @type {string}\n   */\n\n  this.lineColor = Colors.Silver;\n  /**\n   * Line width\n   * \n   * @type {number}\n   */\n\n  this.lineWidth = 1;\n  /**\n   * Line type\n   * \n   * @type {LineType}\n   */\n\n  this.lineType = LineType.Solid;\n\n  switch (arguments.length) {\n    case 1:\n      for (property in arg0) {\n        if (arg0.hasOwnProperty(property)) {\n          this[property] = arg0[property];\n        }\n      }\n\n      break;\n\n    case 3:\n      this.lineColor = arg0;\n      this.lineWidth = arg1;\n      this.lineType = arg2;\n      break;\n  }\n}\n;","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/configs/PaletteItemConfig.js"],"names":["LineType","Colors","PaletteItemConfig","arg0","arg1","arg2","property","lineColor","Silver","lineWidth","lineType","Solid","arguments","length","hasOwnProperty"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,MAAnB,QAAiC,UAAjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,iBAAT,CAA2BC,IAA3B,EAAiCC,IAAjC,EAAuCC,IAAvC,EAA6C;AAC1D,MAAIC,QAAJ;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKC,SAAL,GAAiBN,MAAM,CAACO,MAAxB;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKC,SAAL,GAAiB,CAAjB;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKC,QAAL,GAAgBV,QAAQ,CAACW,KAAzB;;AAEA,UAAQC,SAAS,CAACC,MAAlB;AACE,SAAK,CAAL;AACE,WAAKP,QAAL,IAAiBH,IAAjB,EAAuB;AACrB,YAAIA,IAAI,CAACW,cAAL,CAAoBR,QAApB,CAAJ,EAAmC;AACjC,eAAKA,QAAL,IAAiBH,IAAI,CAACG,QAAD,CAArB;AACD;AACF;;AACD;;AACF,SAAK,CAAL;AACE,WAAKC,SAAL,GAAiBJ,IAAjB;AACA,WAAKM,SAAL,GAAiBL,IAAjB;AACA,WAAKM,QAAL,GAAgBL,IAAhB;AACA;AAZJ;AAcD;AAAA","sourcesContent":["import { LineType, Colors } from '../enums';\n/**\n * @class PaletteItemConfig\n * @classdesc Palette Item configuration object defines cross family connections lines styles. Multi-parent diagrams have cross hierarchy \n * relation lines, so in order to make their visual tracing more easy on diagram every connection line can be styled differently.\n * (This is the same approach as for visualization of regular classic line charts. If we have multiple lines in chart area it makes\n * sense to style every line individually.)\n * \n * @param {PaletteItemConfig} arg0 Palette properties object.\n * \n * @param {string} arg0 Line color\n * @param {number} arg1 Line width\n * @param {LineType} arg2 Line type\n */\nexport default function PaletteItemConfig(arg0, arg1, arg2) {\n  var property;\n\n  /**\n   * Line color\n   * \n   * @type {string}\n   */\n  this.lineColor = Colors.Silver;\n\n  /**\n   * Line width\n   * \n   * @type {number}\n   */\n  this.lineWidth = 1;\n\n  /**\n   * Line type\n   * \n   * @type {LineType}\n   */\n  this.lineType = LineType.Solid;\n\n  switch (arguments.length) {\n    case 1:\n      for (property in arg0) {\n        if (arg0.hasOwnProperty(property)) {\n          this[property] = arg0[property];\n        }\n      }\n      break;\n    case 3:\n      this.lineColor = arg0;\n      this.lineWidth = arg1;\n      this.lineType = arg2;\n      break;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}