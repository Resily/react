{"ast":null,"code":"import SpatialIndex from '../../algorithms/SpatialIndex';\nimport Thickness from '../../graphics/structs/Thickness';\nimport Size from '../../graphics/structs/Size';\nimport Point from '../../graphics/structs/Point';\nimport Rect from '../../graphics/structs/Rect';\nexport default function ProjectItemsToFrameTask(createTransformTask, frameSizeTask, applyLayoutChangesTask, scaleOptionTask, alignDiagramTask, centerOnCursorTask, itemTemplateParamsTask, selectedItemsTask) {\n  var _data = {\n    positions: {}\n  },\n      _scaleOptions,\n      _spatialIndex;\n\n  function process() {\n    var positions = alignDiagramTask.getItemsPositions(),\n        transform = createTransformTask.getTransform();\n    _scaleOptions = scaleOptionTask.getOptions(), _spatialIndex = null;\n    _data.positions = [];\n    var medianPosition = getFrameMedianPosition(),\n        selectedItems = selectedItemsTask.getItems();\n\n    if (medianPosition != null) {\n      for (var index = 0, len = selectedItems.length; index < len; index += 1) {\n        var treeItemId = selectedItems[index],\n            treeItemPosition = positions[treeItemId],\n            actualPosition = treeItemPosition.actualPosition;\n        transform.transformRect(actualPosition.x, actualPosition.y, actualPosition.width, actualPosition.height, true, this, function (x, y, width, height) {\n          var nodePosition = new Rect(x, y, width, height);\n\n          if (!medianPosition.rect.overlaps(nodePosition)) {\n            var projectionPoint = medianPosition.rect.getProjectionPoint(nodePosition.centerPoint());\n\n            if (projectionPoint != null) {\n              // node position is not scaled, scaling is done with CSS\n              var templateParams = itemTemplateParamsTask.getTemplateParams(treeItemId),\n                  templateConfig = templateParams.template.templateConfig,\n                  markerSize = new Size(templateConfig.minimizedItemSize),\n                  markerProjectionRect = new Rect(projectionPoint.x - markerSize.width / 2, projectionPoint.y - markerSize.height / 2, markerSize.width, markerSize.height);\n              markerProjectionRect.translate(-medianPosition.offset.x, -medianPosition.offset.y);\n              _data.positions[treeItemId] = markerProjectionRect;\n            }\n          }\n        });\n      }\n    }\n\n    return true;\n  }\n\n  function getFrameMedianPosition() {\n    var result = null;\n\n    if (centerOnCursorTask != null) {\n      var scale = _scaleOptions.scale,\n          placeholderOffset = new Point(centerOnCursorTask.getPlaceholderOffset()),\n          scrollPanelSize = new Size(applyLayoutChangesTask.getScrollPanelSize()),\n          frameThickness = new Thickness(applyLayoutChangesTask.getFrameThickness()),\n          frameBaseOffset = new Thickness(applyLayoutChangesTask.getFrameOffset()),\n          medianThickness = new Thickness(frameSizeTask.getMedian());\n\n      if (!frameThickness.isEmpty()) {\n        placeholderOffset.scale(1.0 / scale);\n        frameThickness.scale(1.0 / scale);\n        frameBaseOffset.scale(1.0 / scale);\n        scrollPanelSize.scale(1.0 / scale);\n        medianThickness.scale(1.0 / scale);\n        var frameOffset = new Point(placeholderOffset.x - frameBaseOffset.left - frameThickness.left, placeholderOffset.y - frameBaseOffset.top - frameThickness.top);\n        var medianRect = new Rect(placeholderOffset.x, placeholderOffset.y, scrollPanelSize.width, scrollPanelSize.height);\n        medianRect.offset(frameBaseOffset);\n        medianRect.offset(medianThickness);\n        result = {\n          offset: frameOffset,\n          rect: medianRect\n        };\n      }\n    }\n\n    return result;\n  }\n\n  function getSizes() {\n    var result = [];\n    var hash = {};\n\n    for (var treeItemId in _data.positions) {\n      if (_data.positions.hasOwnProperty(treeItemId)) {\n        var rect = _data.positions[treeItemId];\n        var size = Math.max(rect.width, rect.height);\n\n        if (!hash.hasOwnProperty(size)) {\n          hash[size] = true;\n          result.push(size);\n        }\n      }\n    }\n\n    return result;\n  }\n\n  function getSpatialIndex() {\n    if (_spatialIndex == null) {\n      _spatialIndex = SpatialIndex(getSizes());\n\n      for (var treeItemId in _data.positions) {\n        if (_data.positions.hasOwnProperty(treeItemId)) {\n          var rect = _data.positions[treeItemId];\n          rect.context = treeItemId;\n\n          _spatialIndex.addRect(rect);\n        }\n      }\n    }\n\n    return _spatialIndex;\n  }\n\n  function getTreeItemForMousePosition(x, y, gravityRadius) {\n    var result = null,\n        bestDistance = null,\n        scale = _scaleOptions.scale,\n        spatialIndex = getSpatialIndex(),\n        selection,\n        center;\n    x = x / scale;\n    y = y / scale;\n    selection = new Rect(x, y, 0, 0);\n    center = new Point(x, y);\n    selection.offset(gravityRadius, gravityRadius, gravityRadius, gravityRadius);\n    spatialIndex.loopArea(this, selection, function (rect) {\n      var itemid = rect.context;\n      var distance = center.distanceTo(rect.horizontalCenter(), rect.verticalCenter());\n\n      if (bestDistance == null || distance < bestDistance) {\n        bestDistance = distance;\n        result = itemid;\n      }\n    });\n    return result;\n  }\n\n  function getPositions() {\n    return _data.positions;\n  }\n\n  return {\n    getPositions: getPositions,\n    getTreeItemForMousePosition: getTreeItemForMousePosition,\n    process: process\n  };\n}\n;","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/tasks/layout/ProjectItemsToFrameTask.js"],"names":["SpatialIndex","Thickness","Size","Point","Rect","ProjectItemsToFrameTask","createTransformTask","frameSizeTask","applyLayoutChangesTask","scaleOptionTask","alignDiagramTask","centerOnCursorTask","itemTemplateParamsTask","selectedItemsTask","_data","positions","_scaleOptions","_spatialIndex","process","getItemsPositions","transform","getTransform","getOptions","medianPosition","getFrameMedianPosition","selectedItems","getItems","index","len","length","treeItemId","treeItemPosition","actualPosition","transformRect","x","y","width","height","nodePosition","rect","overlaps","projectionPoint","getProjectionPoint","centerPoint","templateParams","getTemplateParams","templateConfig","template","markerSize","minimizedItemSize","markerProjectionRect","translate","offset","result","scale","placeholderOffset","getPlaceholderOffset","scrollPanelSize","getScrollPanelSize","frameThickness","getFrameThickness","frameBaseOffset","getFrameOffset","medianThickness","getMedian","isEmpty","frameOffset","left","top","medianRect","getSizes","hash","hasOwnProperty","size","Math","max","push","getSpatialIndex","context","addRect","getTreeItemForMousePosition","gravityRadius","bestDistance","spatialIndex","selection","center","loopArea","itemid","distance","distanceTo","horizontalCenter","verticalCenter","getPositions"],"mappings":"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","sourcesContent":["import SpatialIndex from '../../algorithms/SpatialIndex';\nimport Thickness from '../../graphics/structs/Thickness';\nimport Size from '../../graphics/structs/Size';\nimport Point from '../../graphics/structs/Point';\nimport Rect from '../../graphics/structs/Rect';\n\nexport default function ProjectItemsToFrameTask(createTransformTask, frameSizeTask,\n  applyLayoutChangesTask, scaleOptionTask,\n  alignDiagramTask, centerOnCursorTask,\n  itemTemplateParamsTask,\n  selectedItemsTask) {\n\n  var _data = {\n    positions: {}\n  },\n  _scaleOptions,\n  _spatialIndex;\n\n  function process() {\n    var positions = alignDiagramTask.getItemsPositions(),\n      transform = createTransformTask.getTransform();\n\n    _scaleOptions = scaleOptionTask.getOptions(),\n    _spatialIndex = null;\n    _data.positions = [];\n\n    var medianPosition = getFrameMedianPosition(),\n      selectedItems = selectedItemsTask.getItems();\n\n    if(medianPosition != null) {\n      for(var index = 0, len = selectedItems.length; index < len; index+=1) {\n        var treeItemId = selectedItems[index],\n          treeItemPosition = positions[treeItemId],\n          actualPosition = treeItemPosition.actualPosition;\n\n        transform.transformRect(actualPosition.x, actualPosition.y, actualPosition.width, actualPosition.height, true,\n          this, function (x, y, width, height) {\n            var nodePosition = new Rect(x, y, width, height);\n            if (!medianPosition.rect.overlaps(nodePosition)) {\n              var projectionPoint = medianPosition.rect.getProjectionPoint(nodePosition.centerPoint());\n              if (projectionPoint != null) {\n                // node position is not scaled, scaling is done with CSS\n                var templateParams = itemTemplateParamsTask.getTemplateParams(treeItemId),\n                    templateConfig = templateParams.template.templateConfig,\n                    markerSize = new Size(templateConfig.minimizedItemSize),\n                    markerProjectionRect = new Rect(\n                      projectionPoint.x - markerSize.width / 2, \n                      projectionPoint.y - markerSize.height / 2, \n                      markerSize.width, \n                      markerSize.height);\n  \n                markerProjectionRect.translate(- medianPosition.offset.x, - medianPosition.offset.y);\n                _data.positions[treeItemId] = markerProjectionRect;\n              }\n            }\n          });\n      }\n    }\n    return true;\n  }\n\n  function getFrameMedianPosition() {\n    var result = null;\n    if (centerOnCursorTask != null) {\n      var scale = _scaleOptions.scale,\n        placeholderOffset = new Point(centerOnCursorTask.getPlaceholderOffset()),\n        scrollPanelSize = new Size(applyLayoutChangesTask.getScrollPanelSize()),\n        frameThickness = new Thickness(applyLayoutChangesTask.getFrameThickness()),\n        frameBaseOffset = new Thickness(applyLayoutChangesTask.getFrameOffset()),\n        medianThickness = new Thickness(frameSizeTask.getMedian());\n\n      if(!frameThickness.isEmpty()) {\n        placeholderOffset.scale(1.0 / scale);\n        frameThickness.scale(1.0 / scale);\n        frameBaseOffset.scale(1.0 / scale);\n        scrollPanelSize.scale(1.0 / scale);\n        medianThickness.scale(1.0 / scale);\n\n        var frameOffset = new Point(placeholderOffset.x - frameBaseOffset.left - frameThickness.left, placeholderOffset.y - frameBaseOffset.top - frameThickness.top);\n\n        var medianRect = new Rect(placeholderOffset.x, placeholderOffset.y, scrollPanelSize.width, scrollPanelSize.height);\n        medianRect.offset(frameBaseOffset);\n        medianRect.offset(medianThickness);\n\n        result = {\n          offset: frameOffset,\n          rect: medianRect         \n        }\n      }\n    }\n    return result;\n  }\n\n  function getSizes() {\n    var result = [];\n    var hash = {};\n    for (var treeItemId in _data.positions) {\n      if(_data.positions.hasOwnProperty(treeItemId)) {\n        var rect = _data.positions[treeItemId];\n        var size = Math.max(rect.width, rect.height);\n        if (!hash.hasOwnProperty(size)) {\n          hash[size] = true;\n          result.push(size);\n        }\n      }\n    }\n    return result;\n  }\n\n  function getSpatialIndex() {\n    if (_spatialIndex == null) {\n      _spatialIndex = SpatialIndex(getSizes());\n      for (var treeItemId in _data.positions) {\n        if(_data.positions.hasOwnProperty(treeItemId)) {\n          var rect = _data.positions[treeItemId];\n          rect.context = treeItemId;\n          _spatialIndex.addRect(rect);\n        }\n      }\n    }\n    return _spatialIndex;\n  }\n\n  function getTreeItemForMousePosition(x, y, gravityRadius) {\n    var result = null,\n      bestDistance = null,\n      scale = _scaleOptions.scale,\n      spatialIndex = getSpatialIndex(),\n      selection,\n      center;\n\n    x = x / scale;\n    y = y / scale;\n    selection = new Rect(x, y, 0, 0);\n    center = new Point(x, y);\n    selection.offset(gravityRadius, gravityRadius, gravityRadius, gravityRadius);\n\n    spatialIndex.loopArea(this, selection, function (rect) {\n      var itemid = rect.context;\n      var distance = center.distanceTo(rect.horizontalCenter(), rect.verticalCenter());\n      if (bestDistance == null || distance < bestDistance) {\n        bestDistance = distance;\n        result = itemid;\n      }\n    });\n\n    return result;\n  }\n\n  function getPositions() {\n    return _data.positions;\n  }\n\n  return {\n    getPositions:getPositions,\n    getTreeItemForMousePosition: getTreeItemForMousePosition,\n    process: process\n  };\n};"]},"metadata":{},"sourceType":"module"}