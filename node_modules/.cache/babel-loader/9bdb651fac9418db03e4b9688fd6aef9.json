{"ast":null,"code":"import Rect from '../../graphics/structs/Rect';\nimport { Layers, Enabled, LabelType, TextOrientationType, PlacementType, Visibility, HorizontalAlignmentType, VerticalAlignmentType } from '../../enums';\nimport Label from '../../graphics/structs/Label';\nimport { isNullOrEmpty } from '../../common';\nimport getCrossingRectangles from '../../algorithms/getCrossingRectangles';\nexport default function DrawItemLabelsTask(getGraphics, createTransformTask, applyLayoutChangesTask, labelsOptionTask, alignDiagramTask) {\n  function process() {\n    var labelsOption = labelsOptionTask.getOptions();\n    var params = {\n      graphics: getGraphics(),\n      transform: createTransformTask.getTransform(),\n      treeItemsPositions: alignDiagramTask.getItemsPositions()\n    };\n    var options = {\n      showLabels: labelsOption.showLabels,\n      labelFontSize: labelsOption.labelFontSize,\n      labelFontFamily: labelsOption.labelFontFamily,\n      labelFontStyle: labelsOption.labelFontStyle,\n      labelFontWeight: labelsOption.labelFontWeight,\n      labelColor: labelsOption.labelColor,\n      itemsOptions: labelsOptionTask.getItemsOptions(),\n      labelSize: labelsOption.labelSize,\n      labelOrientation: labelsOption.labelOrientation,\n      labelPlacement: labelsOption.labelPlacement,\n      labelOffset: labelsOption.labelOffset\n    };\n    params.graphics.reset(\"placeholder\", Layers.Label);\n    redrawLabels(params, options);\n    return false;\n  }\n\n  function redrawLabels(params, options) {\n    var labels = [];\n\n    if (options.showLabels == Enabled.Auto || options.showLabels == Enabled.True) {\n      for (var treeItemId in params.treeItemsPositions) {\n        if (params.treeItemsPositions.hasOwnProperty(treeItemId)) {\n          var labelOptions = options.itemsOptions[treeItemId],\n              treeItemPosition = params.treeItemsPositions[treeItemId],\n              actualPosition = treeItemPosition.actualPosition;\n\n          if (labelOptions != null) {\n            params.transform.transformRect(actualPosition.x, actualPosition.y, actualPosition.width, actualPosition.height, true, this, function (x, y, width, height) {\n              switch (treeItemPosition.actualVisibility) {\n                case Visibility.Normal:\n                  if (options.showLabels == Enabled.Auto) {\n                    // Don't allow labels overlap normal items in Auto mode\n                    label = new Label(x, y, width, height);\n                    label.weight = 10000;\n                    label.labelType = LabelType.Dummy;\n                    labels.push(label);\n                  }\n\n                  break;\n\n                case Visibility.Dot:\n                case Visibility.Line:\n                  var label = createLabel(x, y, width, height, labelOptions, treeItemPosition, options);\n\n                  if (label != null) {\n                    labels.push(label);\n                  }\n\n                  break;\n\n                default:\n                  break;\n              }\n            }); //ignore jslint\n          }\n        }\n      }\n    }\n    /* Auto resolve overllapings between nodes */\n\n\n    if (options.showLabels == Enabled.Auto) {\n      getCrossingRectangles(this, labels, function (label1, label2) {\n        if (label1.isActive && label2.isActive) {\n          switch (label1.labelType) {\n            case LabelType.Dummy:\n              switch (label2.labelType) {\n                case LabelType.Dummy:\n                  break;\n\n                case LabelType.Regular:\n                  label2.isActive = false;\n                  break;\n\n                case LabelType.Fixed:\n                  label2.isActive = false;\n                  break;\n              }\n\n              break;\n\n            case LabelType.Fixed:\n              switch (label2.labelType) {\n                case LabelType.Dummy:\n                  label1.isActive = false;\n                  break;\n\n                case LabelType.Regular:\n                  label2.isActive = false;\n                  break;\n\n                case LabelType.Fixed:\n                  break;\n              }\n\n              break;\n\n            case LabelType.Regular:\n              switch (label2.labelType) {\n                case LabelType.Dummy:\n                  label1.isActive = false;\n                  break;\n\n                case LabelType.Regular:\n                  if (label1.weight <= label2.weight) {\n                    label1.isActive = false;\n                  } else {\n                    label2.isActive = false;\n                  }\n\n                  break;\n\n                case LabelType.Fixed:\n                  label1.isActive = false;\n                  break;\n              }\n\n              break;\n          }\n        }\n      });\n    }\n    /* Draw labels */\n\n\n    params.graphics.activate(\"placeholder\", Layers.Label);\n    var attr = {\n      \"fontSize\": options.labelFontSize,\n      \"fontFamily\": options.labelFontFamily,\n      \"fontStyle\": options.labelFontStyle,\n      \"fontWeight\": options.labelFontWeight,\n      \"fontColor\": options.labelColor\n    };\n\n    for (var index = 0, len = labels.length; index < len; index += 1) {\n      var label = labels[index];\n\n      if (label.isActive) {\n        switch (label.labelType) {\n          case LabelType.Regular:\n          case LabelType.Fixed:\n            params.graphics.text(label.x, label.y, label.width, label.height, label.text, label.labelOrientation, label.horizontalAlignmentType, label.verticalAlignmentType, attr);\n            break;\n        }\n      }\n    }\n  }\n\n  function createLabel(x, y, width, height, labelOptions, treeItemPosition, options) {\n    var result = null,\n        labelWidth,\n        labelHeight,\n        labelSize,\n        labelPlacement,\n        weight;\n\n    if (!isNullOrEmpty(labelOptions.label)) {\n      var labelType = getLabelType(treeItemPosition.actualVisibility, labelOptions.showLabel, options.showLabels);\n\n      switch (labelType) {\n        case LabelType.Regular:\n          weight = treeItemPosition.leftPadding + treeItemPosition.rightPadding;\n          break;\n\n        case LabelType.Fixed:\n          weight = 10000;\n          break;\n\n        case LabelType.None:\n          weight = 0;\n          break;\n      }\n\n      if (labelType != LabelType.None) {\n        labelSize = labelOptions.labelSize != null ? labelOptions.labelSize : options.labelSize;\n        var labelOrientation = labelOptions.labelOrientation != TextOrientationType.Auto ? labelOptions.labelOrientation : options.labelOrientation != TextOrientationType.Auto ? options.labelOrientation : TextOrientationType.Horizontal;\n        labelPlacement = labelOptions.labelPlacement != PlacementType.Auto ? labelOptions.labelPlacement : options.labelPlacement != PlacementType.Auto ? options.labelPlacement : PlacementType.Top;\n\n        switch (labelOrientation) {\n          case TextOrientationType.Horizontal:\n            labelWidth = labelSize.width;\n            labelHeight = labelSize.height;\n            break;\n\n          case TextOrientationType.RotateLeft:\n          case TextOrientationType.RotateRight:\n            labelHeight = labelSize.width;\n            labelWidth = labelSize.height;\n            break;\n        }\n\n        var position = getLabelPosition(labelPlacement, labelOrientation, x, y, width, height, labelWidth, labelHeight, options.labelOffset);\n        result = new Label(position.position);\n        result.labelType = labelType;\n        result.weight = weight;\n        result.text = labelOptions.label;\n        result.labelOrientation = labelOrientation;\n        result.horizontalAlignmentType = position.horizontalAlignmentType;\n        result.verticalAlignmentType = position.verticalAlignmentType;\n      }\n    }\n\n    return result;\n  }\n\n  function getLabelType(actualVisibility, showLabel, showLabels) {\n    var result = LabelType.None;\n\n    switch (showLabel) {\n      case Enabled.Auto:\n        switch (showLabels) {\n          case Enabled.Auto:\n            switch (actualVisibility) {\n              case Visibility.Line:\n              case Visibility.Dot:\n                result = LabelType.Regular;\n                break;\n\n              default:\n                break;\n            }\n\n            break;\n\n          case Enabled.False:\n            break;\n\n          case Enabled.True:\n            result = LabelType.Fixed;\n            break;\n        }\n\n        break;\n\n      case Enabled.False:\n        break;\n\n      case Enabled.True:\n        result = LabelType.Fixed;\n        break;\n    }\n\n    return result;\n  }\n\n  function getLabelPosition(labelPlacement, labelOrientation, x, y, width, height, labelWidth, labelHeight, labelOffset) {\n    var position, horizontalAlignmentType, verticalAlignmentType;\n\n    switch (labelPlacement) {\n      case PlacementType.Auto:\n      case PlacementType.Top:\n        position = new Rect(x + width / 2.0 - labelWidth / 2.0, y - labelOffset - labelHeight, labelWidth, labelHeight);\n\n        switch (labelOrientation) {\n          case TextOrientationType.Horizontal:\n            horizontalAlignmentType = HorizontalAlignmentType.Center;\n            verticalAlignmentType = VerticalAlignmentType.Bottom;\n            break;\n\n          case TextOrientationType.RotateLeft:\n            horizontalAlignmentType = HorizontalAlignmentType.Left;\n            verticalAlignmentType = VerticalAlignmentType.Middle;\n            break;\n\n          case TextOrientationType.RotateRight:\n            horizontalAlignmentType = HorizontalAlignmentType.Right;\n            verticalAlignmentType = VerticalAlignmentType.Middle;\n            break;\n        }\n\n        break;\n\n      case PlacementType.TopRight:\n      case PlacementType.RightTop:\n        position = new Rect(x + width + labelOffset, y - labelOffset - labelHeight, labelWidth, labelHeight);\n\n        switch (labelOrientation) {\n          case TextOrientationType.Horizontal:\n            horizontalAlignmentType = HorizontalAlignmentType.Left;\n            verticalAlignmentType = VerticalAlignmentType.Bottom;\n            break;\n\n          case TextOrientationType.RotateLeft:\n            horizontalAlignmentType = HorizontalAlignmentType.Left;\n            verticalAlignmentType = VerticalAlignmentType.Top;\n            break;\n\n          case TextOrientationType.RotateRight:\n            horizontalAlignmentType = HorizontalAlignmentType.Right;\n            verticalAlignmentType = VerticalAlignmentType.Bottom;\n            break;\n        }\n\n        break;\n\n      case PlacementType.Right:\n        position = new Rect(x + width + labelOffset, y + height / 2.0 - labelHeight / 2.0, labelWidth, labelHeight);\n\n        switch (labelOrientation) {\n          case TextOrientationType.Horizontal:\n            horizontalAlignmentType = HorizontalAlignmentType.Left;\n            verticalAlignmentType = VerticalAlignmentType.Middle;\n            break;\n\n          case TextOrientationType.RotateLeft:\n            horizontalAlignmentType = HorizontalAlignmentType.Center;\n            verticalAlignmentType = VerticalAlignmentType.Top;\n            break;\n\n          case TextOrientationType.RotateRight:\n            horizontalAlignmentType = HorizontalAlignmentType.Center;\n            verticalAlignmentType = VerticalAlignmentType.Bottom;\n            break;\n        }\n\n        break;\n\n      case PlacementType.BottomRight:\n      case PlacementType.RightBottom:\n        position = new Rect(x + width + labelOffset, y + height + labelOffset, labelWidth, labelHeight);\n\n        switch (labelOrientation) {\n          case TextOrientationType.Horizontal:\n            horizontalAlignmentType = HorizontalAlignmentType.Left;\n            verticalAlignmentType = VerticalAlignmentType.Top;\n            break;\n\n          case TextOrientationType.RotateLeft:\n            horizontalAlignmentType = HorizontalAlignmentType.Right;\n            verticalAlignmentType = VerticalAlignmentType.Top;\n            break;\n\n          case TextOrientationType.RotateRight:\n            horizontalAlignmentType = HorizontalAlignmentType.Left;\n            verticalAlignmentType = VerticalAlignmentType.Bottom;\n            break;\n        }\n\n        break;\n\n      case PlacementType.Bottom:\n        position = new Rect(x + width / 2.0 - labelWidth / 2.0, y + height + labelOffset, labelWidth, labelHeight);\n\n        switch (labelOrientation) {\n          case TextOrientationType.Horizontal:\n            horizontalAlignmentType = HorizontalAlignmentType.Center;\n            verticalAlignmentType = VerticalAlignmentType.Top;\n            break;\n\n          case TextOrientationType.RotateLeft:\n            horizontalAlignmentType = HorizontalAlignmentType.Right;\n            verticalAlignmentType = VerticalAlignmentType.Middle;\n            break;\n\n          case TextOrientationType.RotateRight:\n            horizontalAlignmentType = HorizontalAlignmentType.Left;\n            verticalAlignmentType = VerticalAlignmentType.Middle;\n            break;\n        }\n\n        break;\n\n      case PlacementType.BottomLeft:\n      case PlacementType.LeftBottom:\n        position = new Rect(x - labelWidth - labelOffset, y + height + labelOffset, labelWidth, labelHeight);\n\n        switch (labelOrientation) {\n          case TextOrientationType.Horizontal:\n            horizontalAlignmentType = HorizontalAlignmentType.Right;\n            verticalAlignmentType = VerticalAlignmentType.Top;\n            break;\n\n          case TextOrientationType.RotateLeft:\n            horizontalAlignmentType = HorizontalAlignmentType.Right;\n            verticalAlignmentType = VerticalAlignmentType.Bottom;\n            break;\n\n          case TextOrientationType.RotateRight:\n            horizontalAlignmentType = HorizontalAlignmentType.Left;\n            verticalAlignmentType = VerticalAlignmentType.Top;\n            break;\n        }\n\n        break;\n\n      case PlacementType.Left:\n        position = new Rect(x - labelWidth - labelOffset, y + height / 2.0 - labelHeight / 2.0, labelWidth, labelHeight);\n\n        switch (labelOrientation) {\n          case TextOrientationType.Horizontal:\n            horizontalAlignmentType = HorizontalAlignmentType.Right;\n            verticalAlignmentType = VerticalAlignmentType.Middle;\n            break;\n\n          case TextOrientationType.RotateLeft:\n            horizontalAlignmentType = HorizontalAlignmentType.Center;\n            verticalAlignmentType = VerticalAlignmentType.Bottom;\n            break;\n\n          case TextOrientationType.RotateRight:\n            horizontalAlignmentType = HorizontalAlignmentType.Center;\n            verticalAlignmentType = VerticalAlignmentType.Top;\n            break;\n        }\n\n        break;\n\n      case PlacementType.TopLeft:\n      case PlacementType.LeftTop:\n        position = new Rect(x - labelWidth - labelOffset, y - labelOffset - labelHeight, labelWidth, labelHeight);\n\n        switch (labelOrientation) {\n          case TextOrientationType.Horizontal:\n            horizontalAlignmentType = HorizontalAlignmentType.Right;\n            verticalAlignmentType = VerticalAlignmentType.Bottom;\n            break;\n\n          case TextOrientationType.RotateLeft:\n            horizontalAlignmentType = HorizontalAlignmentType.Left;\n            verticalAlignmentType = VerticalAlignmentType.Bottom;\n            break;\n\n          case TextOrientationType.RotateRight:\n            horizontalAlignmentType = HorizontalAlignmentType.Right;\n            verticalAlignmentType = VerticalAlignmentType.Top;\n            break;\n        }\n\n        break;\n    }\n\n    return {\n      position: position,\n      horizontalAlignmentType: horizontalAlignmentType,\n      verticalAlignmentType: verticalAlignmentType\n    };\n  }\n\n  return {\n    process: process\n  };\n}\n;","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/tasks/renders/DrawItemLabelsTask.js"],"names":["Rect","Layers","Enabled","LabelType","TextOrientationType","PlacementType","Visibility","HorizontalAlignmentType","VerticalAlignmentType","Label","isNullOrEmpty","getCrossingRectangles","DrawItemLabelsTask","getGraphics","createTransformTask","applyLayoutChangesTask","labelsOptionTask","alignDiagramTask","process","labelsOption","getOptions","params","graphics","transform","getTransform","treeItemsPositions","getItemsPositions","options","showLabels","labelFontSize","labelFontFamily","labelFontStyle","labelFontWeight","labelColor","itemsOptions","getItemsOptions","labelSize","labelOrientation","labelPlacement","labelOffset","reset","redrawLabels","labels","Auto","True","treeItemId","hasOwnProperty","labelOptions","treeItemPosition","actualPosition","transformRect","x","y","width","height","actualVisibility","Normal","label","weight","labelType","Dummy","push","Dot","Line","createLabel","label1","label2","isActive","Regular","Fixed","activate","attr","index","len","length","text","horizontalAlignmentType","verticalAlignmentType","result","labelWidth","labelHeight","getLabelType","showLabel","leftPadding","rightPadding","None","Horizontal","Top","RotateLeft","RotateRight","position","getLabelPosition","False","Center","Bottom","Left","Middle","Right","TopRight","RightTop","BottomRight","RightBottom","BottomLeft","LeftBottom","TopLeft","LeftTop"],"mappings":"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","sourcesContent":["import Rect from '../../graphics/structs/Rect';\nimport { Layers, Enabled, LabelType, TextOrientationType, PlacementType, Visibility, HorizontalAlignmentType, VerticalAlignmentType } from '../../enums';\nimport Label from '../../graphics/structs/Label';\nimport { isNullOrEmpty } from '../../common';\nimport getCrossingRectangles from '../../algorithms/getCrossingRectangles';\n\nexport default function DrawItemLabelsTask(getGraphics, createTransformTask, applyLayoutChangesTask,\n  labelsOptionTask,\n  alignDiagramTask) {\n\n  function process() {\n    var labelsOption = labelsOptionTask.getOptions();\n\n    var params = {\n      graphics: getGraphics(),\n      transform: createTransformTask.getTransform(),\n      treeItemsPositions: alignDiagramTask.getItemsPositions()\n    };\n\n    var options = {\n      showLabels: labelsOption.showLabels,\n      labelFontSize: labelsOption.labelFontSize,\n      labelFontFamily: labelsOption.labelFontFamily,\n      labelFontStyle: labelsOption.labelFontStyle,\n      labelFontWeight: labelsOption.labelFontWeight,\n      labelColor: labelsOption.labelColor,\n      itemsOptions: labelsOptionTask.getItemsOptions(),\n      labelSize: labelsOption.labelSize,\n      labelOrientation: labelsOption.labelOrientation,\n      labelPlacement: labelsOption.labelPlacement,\n      labelOffset: labelsOption.labelOffset\n    };\n\n    params.graphics.reset(\"placeholder\", Layers.Label);\n\n    redrawLabels(params, options);\n\n    return false;\n  }\n\n  function redrawLabels(params, options) {\n    var labels = [];\n    if (options.showLabels == Enabled.Auto || options.showLabels == Enabled.True) {\n      for (var treeItemId in params.treeItemsPositions) {\n        if (params.treeItemsPositions.hasOwnProperty(treeItemId)) {\n          var labelOptions = options.itemsOptions[treeItemId],\n            treeItemPosition = params.treeItemsPositions[treeItemId],\n            actualPosition = treeItemPosition.actualPosition;\n\n          if (labelOptions != null) {\n            params.transform.transformRect(actualPosition.x, actualPosition.y, actualPosition.width, actualPosition.height, true,\n              this, function (x, y, width, height) {\n\n                switch (treeItemPosition.actualVisibility) {\n                  case Visibility.Normal:\n                    if (options.showLabels == Enabled.Auto) {\n                      // Don't allow labels overlap normal items in Auto mode\n                      label = new Label(x, y, width, height);\n                      label.weight = 10000;\n                      label.labelType = LabelType.Dummy;\n                      labels.push(label);\n                    }\n                    break;\n                  case Visibility.Dot:\n                  case Visibility.Line:\n                    var label = createLabel(x, y, width, height, labelOptions, treeItemPosition, options);\n                    if (label != null) {\n                      labels.push(label);\n                    }\n                    break;\n                  default:\n                    break;\n                }\n              });//ignore jslint\n          }\n        }\n      }\n    }\n\n    /* Auto resolve overllapings between nodes */\n    if (options.showLabels == Enabled.Auto) {\n      getCrossingRectangles(this, labels, function (label1, label2) {\n        if (label1.isActive && label2.isActive) {\n          switch (label1.labelType) {\n            case LabelType.Dummy:\n              switch (label2.labelType) {\n                case LabelType.Dummy:\n                  break;\n                case LabelType.Regular:\n                  label2.isActive = false;\n                  break;\n                case LabelType.Fixed:\n                  label2.isActive = false;\n                  break;\n              }\n              break;\n            case LabelType.Fixed:\n              switch (label2.labelType) {\n                case LabelType.Dummy:\n                  label1.isActive = false;\n                  break;\n                case LabelType.Regular:\n                  label2.isActive = false;\n                  break;\n                case LabelType.Fixed:\n                  break;\n              }\n              break;\n            case LabelType.Regular:\n              switch (label2.labelType) {\n                case LabelType.Dummy:\n                  label1.isActive = false;\n                  break;\n                case LabelType.Regular:\n                  if (label1.weight <= label2.weight) {\n                    label1.isActive = false;\n                  } else {\n                    label2.isActive = false;\n                  }\n                  break;\n                case LabelType.Fixed:\n                  label1.isActive = false;\n                  break;\n              }\n              break;\n          }\n        }\n      });\n    }\n\n    /* Draw labels */\n    params.graphics.activate(\"placeholder\", Layers.Label);\n    var attr = {\n      \"fontSize\": options.labelFontSize,\n      \"fontFamily\": options.labelFontFamily,\n      \"fontStyle\": options.labelFontStyle,\n      \"fontWeight\": options.labelFontWeight,\n      \"fontColor\": options.labelColor\n    };\n\n    for (var index = 0, len = labels.length; index < len; index += 1) {\n      var label = labels[index];\n      if (label.isActive) {\n        switch (label.labelType) {\n          case LabelType.Regular:\n          case LabelType.Fixed:\n            params.graphics.text(label.x, label.y, label.width, label.height, label.text,\n              label.labelOrientation,\n              label.horizontalAlignmentType,\n              label.verticalAlignmentType,\n              attr);\n            break;\n        }\n      }\n    }\n  }\n\n  function createLabel(x, y, width, height, labelOptions, treeItemPosition, options) {\n    var result = null,\n      labelWidth,\n      labelHeight,\n      labelSize,\n      labelPlacement,\n      weight;\n\n\n    if (!isNullOrEmpty(labelOptions.label)) {\n      var labelType = getLabelType(treeItemPosition.actualVisibility, labelOptions.showLabel, options.showLabels);\n\n      switch (labelType) {\n        case LabelType.Regular:\n          weight = treeItemPosition.leftPadding + treeItemPosition.rightPadding;\n          break;\n        case LabelType.Fixed:\n          weight = 10000;\n          break;\n        case LabelType.None:\n          weight = 0;\n          break;\n      }\n\n      if (labelType != LabelType.None) {\n        labelSize = (labelOptions.labelSize != null) ? labelOptions.labelSize : options.labelSize;\n\n        var labelOrientation = (labelOptions.labelOrientation != TextOrientationType.Auto) ? labelOptions.labelOrientation :\n          (options.labelOrientation != TextOrientationType.Auto) ? options.labelOrientation :\n            TextOrientationType.Horizontal;\n\n        labelPlacement = (labelOptions.labelPlacement != PlacementType.Auto) ? labelOptions.labelPlacement :\n          (options.labelPlacement != PlacementType.Auto) ? options.labelPlacement :\n            PlacementType.Top;\n\n        switch (labelOrientation) {\n          case TextOrientationType.Horizontal:\n            labelWidth = labelSize.width;\n            labelHeight = labelSize.height;\n            break;\n          case TextOrientationType.RotateLeft:\n          case TextOrientationType.RotateRight:\n            labelHeight = labelSize.width;\n            labelWidth = labelSize.height;\n            break;\n        }\n\n        var position = getLabelPosition(labelPlacement, labelOrientation, x, y, width, height, labelWidth, labelHeight, options.labelOffset);\n\n        result = new Label(position.position);\n        result.labelType = labelType;\n        result.weight = weight;\n        result.text = labelOptions.label;\n\n\n        result.labelOrientation = labelOrientation;\n        result.horizontalAlignmentType = position.horizontalAlignmentType;\n        result.verticalAlignmentType = position.verticalAlignmentType;\n      }\n    }\n    return result;\n  }\n\n  function getLabelType(actualVisibility, showLabel, showLabels) {\n    var result = LabelType.None;\n    switch (showLabel) {\n      case Enabled.Auto:\n        switch (showLabels) {\n          case Enabled.Auto:\n            switch (actualVisibility) {\n              case Visibility.Line:\n              case Visibility.Dot:\n                result = LabelType.Regular;\n                break;\n              default:\n                break;\n            }\n            break;\n          case Enabled.False:\n            break;\n          case Enabled.True:\n            result = LabelType.Fixed;\n            break;\n        }\n        break;\n      case Enabled.False:\n        break;\n      case Enabled.True:\n        result = LabelType.Fixed;\n        break;\n    }\n    return result;\n  }\n\n  function getLabelPosition(labelPlacement, labelOrientation, x, y, width, height, labelWidth, labelHeight, labelOffset) {\n    var position,\n      horizontalAlignmentType,\n      verticalAlignmentType;\n\n    switch (labelPlacement) {\n      case PlacementType.Auto:\n      case PlacementType.Top:\n        position = new Rect(x + width / 2.0 - labelWidth / 2.0, y - labelOffset - labelHeight, labelWidth, labelHeight);\n        switch (labelOrientation) {\n          case TextOrientationType.Horizontal:\n            horizontalAlignmentType = HorizontalAlignmentType.Center;\n            verticalAlignmentType = VerticalAlignmentType.Bottom;\n            break;\n          case TextOrientationType.RotateLeft:\n            horizontalAlignmentType = HorizontalAlignmentType.Left;\n            verticalAlignmentType = VerticalAlignmentType.Middle;\n            break;\n          case TextOrientationType.RotateRight:\n            horizontalAlignmentType = HorizontalAlignmentType.Right;\n            verticalAlignmentType = VerticalAlignmentType.Middle;\n            break;\n        }\n        break;\n      case PlacementType.TopRight:\n      case PlacementType.RightTop:\n        position = new Rect(x + width + labelOffset, y - labelOffset - labelHeight, labelWidth, labelHeight);\n        switch (labelOrientation) {\n          case TextOrientationType.Horizontal:\n            horizontalAlignmentType = HorizontalAlignmentType.Left;\n            verticalAlignmentType = VerticalAlignmentType.Bottom;\n            break;\n          case TextOrientationType.RotateLeft:\n            horizontalAlignmentType = HorizontalAlignmentType.Left;\n            verticalAlignmentType = VerticalAlignmentType.Top;\n            break;\n          case TextOrientationType.RotateRight:\n            horizontalAlignmentType = HorizontalAlignmentType.Right;\n            verticalAlignmentType = VerticalAlignmentType.Bottom;\n            break;\n        }\n        break;\n      case PlacementType.Right:\n        position = new Rect(x + width + labelOffset, y + height / 2.0 - labelHeight / 2.0, labelWidth, labelHeight);\n        switch (labelOrientation) {\n          case TextOrientationType.Horizontal:\n            horizontalAlignmentType = HorizontalAlignmentType.Left;\n            verticalAlignmentType = VerticalAlignmentType.Middle;\n            break;\n          case TextOrientationType.RotateLeft:\n            horizontalAlignmentType = HorizontalAlignmentType.Center;\n            verticalAlignmentType = VerticalAlignmentType.Top;\n            break;\n          case TextOrientationType.RotateRight:\n            horizontalAlignmentType = HorizontalAlignmentType.Center;\n            verticalAlignmentType = VerticalAlignmentType.Bottom;\n            break;\n        }\n        break;\n      case PlacementType.BottomRight:\n      case PlacementType.RightBottom:\n        position = new Rect(x + width + labelOffset, y + height + labelOffset, labelWidth, labelHeight);\n        switch (labelOrientation) {\n          case TextOrientationType.Horizontal:\n            horizontalAlignmentType = HorizontalAlignmentType.Left;\n            verticalAlignmentType = VerticalAlignmentType.Top;\n            break;\n          case TextOrientationType.RotateLeft:\n            horizontalAlignmentType = HorizontalAlignmentType.Right;\n            verticalAlignmentType = VerticalAlignmentType.Top;\n            break;\n          case TextOrientationType.RotateRight:\n            horizontalAlignmentType = HorizontalAlignmentType.Left;\n            verticalAlignmentType = VerticalAlignmentType.Bottom;\n            break;\n        }\n        break;\n      case PlacementType.Bottom:\n        position = new Rect(x + width / 2.0 - labelWidth / 2.0, y + height + labelOffset, labelWidth, labelHeight);\n        switch (labelOrientation) {\n          case TextOrientationType.Horizontal:\n            horizontalAlignmentType = HorizontalAlignmentType.Center;\n            verticalAlignmentType = VerticalAlignmentType.Top;\n            break;\n          case TextOrientationType.RotateLeft:\n            horizontalAlignmentType = HorizontalAlignmentType.Right;\n            verticalAlignmentType = VerticalAlignmentType.Middle;\n            break;\n          case TextOrientationType.RotateRight:\n            horizontalAlignmentType = HorizontalAlignmentType.Left;\n            verticalAlignmentType = VerticalAlignmentType.Middle;\n            break;\n        }\n        break;\n      case PlacementType.BottomLeft:\n      case PlacementType.LeftBottom:\n        position = new Rect(x - labelWidth - labelOffset, y + height + labelOffset, labelWidth, labelHeight);\n        switch (labelOrientation) {\n          case TextOrientationType.Horizontal:\n            horizontalAlignmentType = HorizontalAlignmentType.Right;\n            verticalAlignmentType = VerticalAlignmentType.Top;\n            break;\n          case TextOrientationType.RotateLeft:\n            horizontalAlignmentType = HorizontalAlignmentType.Right;\n            verticalAlignmentType = VerticalAlignmentType.Bottom;\n            break;\n          case TextOrientationType.RotateRight:\n            horizontalAlignmentType = HorizontalAlignmentType.Left;\n            verticalAlignmentType = VerticalAlignmentType.Top;\n            break;\n        }\n        break;\n      case PlacementType.Left:\n        position = new Rect(x - labelWidth - labelOffset, y + height / 2.0 - labelHeight / 2.0, labelWidth, labelHeight);\n        switch (labelOrientation) {\n          case TextOrientationType.Horizontal:\n            horizontalAlignmentType = HorizontalAlignmentType.Right;\n            verticalAlignmentType = VerticalAlignmentType.Middle;\n            break;\n          case TextOrientationType.RotateLeft:\n            horizontalAlignmentType = HorizontalAlignmentType.Center;\n            verticalAlignmentType = VerticalAlignmentType.Bottom;\n            break;\n          case TextOrientationType.RotateRight:\n            horizontalAlignmentType = HorizontalAlignmentType.Center;\n            verticalAlignmentType = VerticalAlignmentType.Top;\n            break;\n        }\n        break;\n      case PlacementType.TopLeft:\n      case PlacementType.LeftTop:\n        position = new Rect(x - labelWidth - labelOffset, y - labelOffset - labelHeight, labelWidth, labelHeight);\n        switch (labelOrientation) {\n          case TextOrientationType.Horizontal:\n            horizontalAlignmentType = HorizontalAlignmentType.Right;\n            verticalAlignmentType = VerticalAlignmentType.Bottom;\n            break;\n          case TextOrientationType.RotateLeft:\n            horizontalAlignmentType = HorizontalAlignmentType.Left;\n            verticalAlignmentType = VerticalAlignmentType.Bottom;\n            break;\n          case TextOrientationType.RotateRight:\n            horizontalAlignmentType = HorizontalAlignmentType.Right;\n            verticalAlignmentType = VerticalAlignmentType.Top;\n            break;\n        }\n        break;\n    }\n\n    return {\n      position: position,\n      horizontalAlignmentType: horizontalAlignmentType,\n      verticalAlignmentType: verticalAlignmentType\n    };\n  }\n\n  return {\n    process: process\n  };\n};"]},"metadata":{},"sourceType":"module"}