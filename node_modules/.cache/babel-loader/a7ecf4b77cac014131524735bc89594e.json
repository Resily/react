{"ast":null,"code":"import Rect from '../../../graphics/structs/Rect';\nimport Pile from '../../../algorithms/Pile';\nexport default function CollinearVectorBundle() {\n  var _boundingRect = new Rect(),\n      _vectors = [],\n      _continuations = [];\n\n  function addVector(vector, continuation) {\n    _vectors.push(vector);\n\n    _continuations.push(continuation);\n\n    _boundingRect.addRect(vector.from.x, vector.from.y);\n\n    _boundingRect.addRect(vector.to.x, vector.to.y);\n  }\n\n  function loopProjections(callback) {\n    // calback(from, to)\n    var index, len, vector;\n\n    if (_boundingRect.width > _boundingRect.height) {\n      for (index = 0, len = _vectors.length; index < len; index += 1) {\n        vector = _vectors[index];\n        callback(vector.from.x, vector.to.x, _continuations[index]);\n      }\n    } else {\n      for (index = 0, len = _vectors.length; index < len; index += 1) {\n        vector = _vectors[index];\n        callback(vector.from.y, vector.to.y, _continuations[index]);\n      }\n    }\n  }\n\n  function resolve() {\n    if (_vectors.length == 1) {\n      _continuations[0](0, 1, 1);\n    } else {\n      var stackSegments = Pile();\n      loopProjections(function (from, to, continuation) {\n        stackSegments.add(from, to, continuation);\n      });\n      var totalOffset = stackSegments.resolve(this, function (from, to, context, offset, bundleSize, direction) {\n        context(offset, bundleSize, direction);\n      });\n    }\n  }\n\n  return {\n    addVector: addVector,\n    resolve: resolve\n  };\n}\n;","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/tasks/renders/offsetResolver/CollinearVectorBundle.js"],"names":["Rect","Pile","CollinearVectorBundle","_boundingRect","_vectors","_continuations","addVector","vector","continuation","push","addRect","from","x","y","to","loopProjections","callback","index","len","width","height","length","resolve","stackSegments","add","totalOffset","context","offset","bundleSize","direction"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,gCAAjB;AACA,OAAOC,IAAP,MAAiB,0BAAjB;AAEA,eAAe,SAASC,qBAAT,GAAiC;AAC9C,MAAIC,aAAa,GAAG,IAAIH,IAAJ,EAApB;AAAA,MACEI,QAAQ,GAAG,EADb;AAAA,MAEEC,cAAc,GAAG,EAFnB;;AAIA,WAASC,SAAT,CAAmBC,MAAnB,EAA2BC,YAA3B,EAAyC;AACvCJ,IAAAA,QAAQ,CAACK,IAAT,CAAcF,MAAd;;AACAF,IAAAA,cAAc,CAACI,IAAf,CAAoBD,YAApB;;AAEAL,IAAAA,aAAa,CAACO,OAAd,CAAsBH,MAAM,CAACI,IAAP,CAAYC,CAAlC,EAAqCL,MAAM,CAACI,IAAP,CAAYE,CAAjD;;AACAV,IAAAA,aAAa,CAACO,OAAd,CAAsBH,MAAM,CAACO,EAAP,CAAUF,CAAhC,EAAmCL,MAAM,CAACO,EAAP,CAAUD,CAA7C;AACD;;AAED,WAASE,eAAT,CAAyBC,QAAzB,EAAmC;AAAE;AACnC,QAAIC,KAAJ,EAAWC,GAAX,EACEX,MADF;;AAEA,QAAIJ,aAAa,CAACgB,KAAd,GAAsBhB,aAAa,CAACiB,MAAxC,EAAgD;AAC9C,WAAKH,KAAK,GAAG,CAAR,EAAWC,GAAG,GAAGd,QAAQ,CAACiB,MAA/B,EAAuCJ,KAAK,GAAGC,GAA/C,EAAoDD,KAAK,IAAI,CAA7D,EAAgE;AAC9DV,QAAAA,MAAM,GAAGH,QAAQ,CAACa,KAAD,CAAjB;AACAD,QAAAA,QAAQ,CAACT,MAAM,CAACI,IAAP,CAAYC,CAAb,EAAgBL,MAAM,CAACO,EAAP,CAAUF,CAA1B,EAA6BP,cAAc,CAACY,KAAD,CAA3C,CAAR;AACD;AACF,KALD,MAKO;AACL,WAAKA,KAAK,GAAG,CAAR,EAAWC,GAAG,GAAGd,QAAQ,CAACiB,MAA/B,EAAuCJ,KAAK,GAAGC,GAA/C,EAAoDD,KAAK,IAAI,CAA7D,EAAgE;AAC9DV,QAAAA,MAAM,GAAGH,QAAQ,CAACa,KAAD,CAAjB;AACAD,QAAAA,QAAQ,CAACT,MAAM,CAACI,IAAP,CAAYE,CAAb,EAAgBN,MAAM,CAACO,EAAP,CAAUD,CAA1B,EAA6BR,cAAc,CAACY,KAAD,CAA3C,CAAR;AACD;AACF;AACF;;AAED,WAASK,OAAT,GAAmB;AACjB,QAAIlB,QAAQ,CAACiB,MAAT,IAAmB,CAAvB,EAA0B;AACxBhB,MAAAA,cAAc,CAAC,CAAD,CAAd,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB;AACD,KAFD,MAEO;AACL,UAAIkB,aAAa,GAAGtB,IAAI,EAAxB;AACAc,MAAAA,eAAe,CAAC,UAAUJ,IAAV,EAAgBG,EAAhB,EAAoBN,YAApB,EAAkC;AAChDe,QAAAA,aAAa,CAACC,GAAd,CAAkBb,IAAlB,EAAwBG,EAAxB,EAA4BN,YAA5B;AACD,OAFc,CAAf;AAIA,UAAIiB,WAAW,GAAGF,aAAa,CAACD,OAAd,CAAsB,IAAtB,EAA4B,UAAUX,IAAV,EAAgBG,EAAhB,EAAoBY,OAApB,EAA6BC,MAA7B,EAAqCC,UAArC,EAAiDC,SAAjD,EAA4D;AACxGH,QAAAA,OAAO,CAACC,MAAD,EAASC,UAAT,EAAqBC,SAArB,CAAP;AACD,OAFiB,CAAlB;AAGD;AACF;;AAED,SAAO;AACLvB,IAAAA,SAAS,EAAEA,SADN;AAELgB,IAAAA,OAAO,EAAEA;AAFJ,GAAP;AAID;AAAA","sourcesContent":["import Rect from '../../../graphics/structs/Rect';\nimport Pile from '../../../algorithms/Pile';\n\nexport default function CollinearVectorBundle() {\n  var _boundingRect = new Rect(),\n    _vectors = [],\n    _continuations = [];\n\n  function addVector(vector, continuation) {\n    _vectors.push(vector);\n    _continuations.push(continuation);\n\n    _boundingRect.addRect(vector.from.x, vector.from.y);\n    _boundingRect.addRect(vector.to.x, vector.to.y);\n  }\n\n  function loopProjections(callback) { // calback(from, to)\n    var index, len,\n      vector;\n    if (_boundingRect.width > _boundingRect.height) {\n      for (index = 0, len = _vectors.length; index < len; index += 1) {\n        vector = _vectors[index];\n        callback(vector.from.x, vector.to.x, _continuations[index]);\n      }\n    } else {\n      for (index = 0, len = _vectors.length; index < len; index += 1) {\n        vector = _vectors[index];\n        callback(vector.from.y, vector.to.y, _continuations[index]);\n      }\n    }\n  }\n\n  function resolve() {\n    if (_vectors.length == 1) {\n      _continuations[0](0, 1, 1);\n    } else {\n      var stackSegments = Pile();\n      loopProjections(function (from, to, continuation) {\n        stackSegments.add(from, to, continuation);\n      });\n\n      var totalOffset = stackSegments.resolve(this, function (from, to, context, offset, bundleSize, direction) {\n        context(offset, bundleSize, direction);\n      });\n    }\n  }\n\n  return {\n    addVector: addVector,\n    resolve: resolve\n  };\n};"]},"metadata":{},"sourceType":"module"}