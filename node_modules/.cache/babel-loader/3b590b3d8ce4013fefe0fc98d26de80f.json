{"ast":null,"code":"import Thickness from '../../graphics/structs/Thickness';\nimport { Layers, Colors, ShapeType } from '../../enums';\nimport PolylinesBuffer from '../../graphics/structs/PolylinesBuffer';\nimport DotSegment from '../../graphics/structs/DotSegment';\nimport PaletteItem from '../../graphics/structs/PaletteItem';\nimport Marker from '../../graphics/shapes/Marker';\nexport default function DrawFrameItemsTask(getGraphics, applyLayoutChangesTask, projectItemsToFrameTask, itemTemplateParamsTask, minimizedItemsOptionTask) {\n  var _graphics;\n\n  function process() {\n    var frameThickness = new Thickness(applyLayoutChangesTask.getFrameThickness());\n    _graphics = getGraphics();\n\n    _graphics.reset(\"frameplaceholder\", Layers.Marker);\n\n    if (!frameThickness.isEmpty()) {\n      drawFrameItems();\n    }\n\n    return false;\n  }\n\n  function drawFrameItems() {\n    var markers = new PolylinesBuffer(),\n        positions = projectItemsToFrameTask.getPositions(),\n        options = minimizedItemsOptionTask.getOptions(),\n        marker = new Marker(),\n        polyline;\n\n    for (var treeItemId in positions) {\n      if (positions.hasOwnProperty(treeItemId)) {\n        var actualPosition = positions[treeItemId],\n            templateParams = itemTemplateParamsTask.getTemplateParams(treeItemId),\n            templateConfig = templateParams.template.templateConfig,\n            minimizedItemsOptions = minimizedItemsOptionTask.getItemOptions(treeItemId),\n            itemTitleColor = null,\n            itemFillColor = null,\n            minimizedItemShapeType = null,\n            minimizedItemCornerRadius = 0;\n        /* use individual item options first */\n\n        if (minimizedItemsOptions != null) {\n          itemTitleColor = minimizedItemsOptions.itemTitleColor;\n          itemFillColor = minimizedItemsOptions.itemTitleColor;\n          minimizedItemShapeType = minimizedItemsOptions.minimizedItemShapeType;\n        }\n        /* use template config & control options next */\n\n\n        itemTitleColor = itemTitleColor || templateConfig.minimizedItemBorderColor || Colors.Navy;\n        itemFillColor = itemFillColor || templateConfig.minimizedItemFillColor || Colors.Navy;\n\n        if (minimizedItemShapeType == null) {\n          minimizedItemShapeType = templateConfig.minimizedItemShapeType !== null ? templateConfig.minimizedItemShapeType : options.minimizedItemShapeType;\n        }\n\n        minimizedItemCornerRadius = templateConfig.minimizedItemCornerRadius === null ? templateConfig.minimizedItemSize.width : templateConfig.minimizedItemCornerRadius;\n\n        if (minimizedItemShapeType == null || minimizedItemShapeType == ShapeType.None) {\n          polyline = markers.getPolyline(new PaletteItem({\n            'lineColor': itemTitleColor,\n            'lineWidth': templateConfig.minimizedItemLineWidth,\n            'lineType': templateConfig.minimizedItemLineType,\n            'fillColor': itemFillColor,\n            'opacity': templateConfig.minimizedItemOpacity\n          }));\n          polyline.addSegment(new DotSegment(actualPosition.x, actualPosition.y, actualPosition.width, actualPosition.height, minimizedItemCornerRadius));\n        } else {\n          marker.draw(markers, minimizedItemShapeType, actualPosition, new PaletteItem({\n            'lineColor': itemTitleColor,\n            'lineWidth': templateConfig.minimizedItemLineWidth,\n            'lineType': templateConfig.minimizedItemLineType,\n            'fillColor': itemFillColor,\n            'opacity': templateConfig.minimizedItemOpacity\n          }));\n        }\n      }\n    }\n\n    _graphics.activate(\"frameplaceholder\", Layers.Marker);\n\n    _graphics.polylinesBuffer(markers);\n  }\n\n  return {\n    process: process\n  };\n}\n;","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/tasks/renders/DrawFrameItemsTask.js"],"names":["Thickness","Layers","Colors","ShapeType","PolylinesBuffer","DotSegment","PaletteItem","Marker","DrawFrameItemsTask","getGraphics","applyLayoutChangesTask","projectItemsToFrameTask","itemTemplateParamsTask","minimizedItemsOptionTask","_graphics","process","frameThickness","getFrameThickness","reset","isEmpty","drawFrameItems","markers","positions","getPositions","options","getOptions","marker","polyline","treeItemId","hasOwnProperty","actualPosition","templateParams","getTemplateParams","templateConfig","template","minimizedItemsOptions","getItemOptions","itemTitleColor","itemFillColor","minimizedItemShapeType","minimizedItemCornerRadius","minimizedItemBorderColor","Navy","minimizedItemFillColor","minimizedItemSize","width","None","getPolyline","minimizedItemLineWidth","minimizedItemLineType","minimizedItemOpacity","addSegment","x","y","height","draw","activate","polylinesBuffer"],"mappings":"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","sourcesContent":["import Thickness from '../../graphics/structs/Thickness';\nimport { Layers, Colors, ShapeType } from '../../enums';\nimport PolylinesBuffer from '../../graphics/structs/PolylinesBuffer';\nimport DotSegment from '../../graphics/structs/DotSegment';\nimport PaletteItem from '../../graphics/structs/PaletteItem';\nimport Marker from '../../graphics/shapes/Marker';\n\nexport default function DrawFrameItemsTask(getGraphics, applyLayoutChangesTask, projectItemsToFrameTask, itemTemplateParamsTask, minimizedItemsOptionTask) {\n\n  var _graphics;\n\n  function process() {\n    var frameThickness = new Thickness(applyLayoutChangesTask.getFrameThickness());\n\n    _graphics = getGraphics();\n    _graphics.reset(\"frameplaceholder\", Layers.Marker);\n\n    if(!frameThickness.isEmpty()) {\n      drawFrameItems();\n    }\n    return false;\n  }\n\n  function drawFrameItems() {\n    var markers = new PolylinesBuffer(),\n      positions = projectItemsToFrameTask.getPositions(),\n      options = minimizedItemsOptionTask.getOptions(),\n      marker = new Marker(),\n      polyline;\n\n    for (var treeItemId in positions) {\n      if(positions.hasOwnProperty(treeItemId)) {\n        var actualPosition = positions[treeItemId],\n          templateParams = itemTemplateParamsTask.getTemplateParams(treeItemId),\n          templateConfig = templateParams.template.templateConfig,\n          minimizedItemsOptions = minimizedItemsOptionTask.getItemOptions(treeItemId),\n          itemTitleColor = null,\n          itemFillColor = null,\n          minimizedItemShapeType = null,\n          minimizedItemCornerRadius = 0;\n\n        /* use individual item options first */\n        if (minimizedItemsOptions != null) {\n          itemTitleColor = minimizedItemsOptions.itemTitleColor;\n          itemFillColor = minimizedItemsOptions.itemTitleColor;\n          minimizedItemShapeType = minimizedItemsOptions.minimizedItemShapeType;\n        }\n\n        /* use template config & control options next */\n        itemTitleColor = itemTitleColor || templateConfig.minimizedItemBorderColor || Colors.Navy;\n        itemFillColor = itemFillColor || templateConfig.minimizedItemFillColor || Colors.Navy;\n        if (minimizedItemShapeType == null) {\n          minimizedItemShapeType = (templateConfig.minimizedItemShapeType !== null ? templateConfig.minimizedItemShapeType : options.minimizedItemShapeType);\n        }\n        minimizedItemCornerRadius = templateConfig.minimizedItemCornerRadius === null ? templateConfig.minimizedItemSize.width : templateConfig.minimizedItemCornerRadius;\n\n        if (minimizedItemShapeType == null || minimizedItemShapeType == ShapeType.None) {\n          polyline = markers.getPolyline(new PaletteItem({\n            'lineColor': itemTitleColor,\n            'lineWidth': templateConfig.minimizedItemLineWidth,\n            'lineType': templateConfig.minimizedItemLineType,\n            'fillColor': itemFillColor,\n            'opacity': templateConfig.minimizedItemOpacity\n          }));\n          polyline.addSegment(new DotSegment(actualPosition.x, actualPosition.y, actualPosition.width, actualPosition.height, minimizedItemCornerRadius));\n        } else {\n          marker.draw(markers, minimizedItemShapeType, actualPosition,\n            new PaletteItem({\n              'lineColor': itemTitleColor,\n              'lineWidth': templateConfig.minimizedItemLineWidth,\n              'lineType': templateConfig.minimizedItemLineType,\n              'fillColor': itemFillColor,\n              'opacity': templateConfig.minimizedItemOpacity\n            })\n          );\n        }\n      }\n    }\n    _graphics.activate(\"frameplaceholder\", Layers.Marker);\n    _graphics.polylinesBuffer(markers);\n  }\n\n  return {\n    process: process\n  };\n};"]},"metadata":{},"sourceType":"module"}