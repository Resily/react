{"ast":null,"code":"import BaseLayout from './BaseLayout';\nimport Rect from '../../../graphics/structs/Rect';\nimport { VerticalAlignmentType, Visibility, OrientationType, GroupByType, AdviserPlacementType } from '../../../enums';\nimport TreeItemPosition from '../../../models/TreeItemPosition';\nexport default function MatrixLayout(params, options) {\n  this.params = {\n    items: [],\n    // OrgItem used properties: isVisible\n    isItemSelected: null,\n    cursorItemId: null,\n    getTemplateParams: null,\n    //TemplateParams\n    hideParentConnection: false,\n    hideChildrenConnection: false\n  };\n  this.options = {\n    verticalAlignment: VerticalAlignmentType.Middle,\n    orientationType: OrientationType.Top,\n    arrowsDirection: GroupByType.None,\n    linesWidth: 1,\n    checkBoxPanelSize: 24,\n    buttonsPanelSize: 32,\n    groupTitlePanelSize: 24,\n    groupTitlePlacementType: AdviserPlacementType.Left,\n    normalLevelShift: 20,\n    dotLevelShift: 20,\n    lineLevelShift: 20,\n    normalItemsInterval: 10,\n    dotItemsInterval: 1,\n    lineItemsInterval: 2,\n    maximumColumnsInMatrix: 6\n  };\n  this.data = {\n    treeItemsPositions: {},\n    columns: [],\n    rows: []\n  };\n  this.parent = BaseLayout.prototype;\n  this.parent.constructor.apply(this, arguments);\n}\n;\nMatrixLayout.prototype = new BaseLayout();\n\nMatrixLayout.prototype.Column = function () {\n  this.depth = 0;\n  this.offset = 0;\n  this.leftPadding = 0;\n  this.rightPadding = 0;\n};\n\nMatrixLayout.prototype.Row = function () {\n  this.depth = 0;\n  this.offset = 0;\n  this.horizontalConnectorsDepth = 0;\n  this.minimalDepth = null;\n  this.dotsDepth = null;\n};\n\nMatrixLayout.prototype.getMatrixWidth = function (maximumColumnsInMatrix, len) {\n  return Math.min(maximumColumnsInMatrix, Math.ceil(Math.sqrt(len)));\n};\n\nMatrixLayout.prototype.measure = function (visibility) {\n  var data = {\n    treeItemsPositions: {},\n    columns: [],\n    rows: []\n  };\n  this.measureItems(data, this.params, this.options, visibility);\n  this.measureColumns(data, this.params, this.options);\n  this.measureRows(data, this.params, this.options);\n  this.data = data;\n  return this.getLayoutSize(data);\n};\n\nMatrixLayout.prototype.measureItems = function (data, params, options, visibility) {\n  for (var index = 0, len = params.items.length; index < len; index += 1) {\n    var treeItem = params.items[index];\n    var treeItemId = treeItem.id;\n    var treeItemPosition = new TreeItemPosition();\n    var treeItemVisibility = params.isItemSelected(treeItemId) ? Visibility.Normal : !treeItem.isVisible ? Visibility.Invisible : Visibility.Auto,\n        treeItemtemplate = params.getTemplateParams(treeItemId);\n    var actualVisibility = treeItemVisibility === Visibility.Auto ? visibility : treeItemVisibility;\n    var size = this.getItemSize(actualVisibility, params.cursorItemId == treeItemId, treeItemtemplate, options);\n    treeItemPosition.actualVisibility = actualVisibility;\n    treeItemPosition.actualSize = size.actualSize;\n    treeItemPosition.contentPosition = size.contentPosition;\n    data.treeItemsPositions[treeItemId] = treeItemPosition;\n  }\n};\n\nMatrixLayout.prototype.measureColumns = function (data, params, options) {\n  var column,\n      index,\n      len,\n      maximumColumns = this.getMatrixWidth(options.maximumColumnsInMatrix, params.items.length);\n\n  for (index = 0, len = params.items.length; index < len; index += 1) {\n    var treeItem = params.items[index];\n    var treeItemId = treeItem.id;\n    var treeItemPosition = data.treeItemsPositions[treeItemId];\n    var horizontalPadding = options.intervals[treeItemPosition.actualVisibility] / 2;\n    treeItemPosition.leftPadding = horizontalPadding;\n    treeItemPosition.rightPadding = horizontalPadding;\n    var columnIndex = index % maximumColumns;\n    column = data.columns[columnIndex];\n\n    if (column == null) {\n      column = new this.Column();\n      data.columns[columnIndex] = column;\n    }\n\n    var itemWidth = treeItemPosition.leftPadding + treeItemPosition.actualSize.width + treeItemPosition.rightPadding;\n    column.depth = Math.max(column.depth, itemWidth);\n  }\n\n  var arrowTipLength = options.linesWidth * 8;\n  var offset = 0;\n\n  for (index = 0, len = data.columns.length; index < len; index += 1) {\n    column = data.columns[index];\n\n    if (index % 2 == 0) {\n      switch (options.arrowsDirection) {\n        case GroupByType.Parents:\n          column.leftPadding = params.hideChildrenConnection ? 0 : arrowTipLength;\n          column.rightPadding = 0;\n          break;\n\n        case GroupByType.Children:\n          column.leftPadding = 0;\n          column.rightPadding = params.hideParentConnection ? 0 : arrowTipLength;\n          break;\n      }\n    } else {\n      switch (options.arrowsDirection) {\n        case GroupByType.Parents:\n          column.leftPadding = 0;\n          column.rightPadding = params.hideChildrenConnection ? 0 : arrowTipLength;\n          break;\n\n        case GroupByType.Children:\n          column.leftPadding = params.hideParentConnection ? 0 : arrowTipLength;\n          column.rightPadding = 0;\n          break;\n      }\n    }\n\n    column.offset = offset + column.leftPadding + column.depth / 2;\n    offset = column.offset + column.depth / 2 + column.rightPadding;\n  }\n};\n\nMatrixLayout.prototype.measureRows = function (data, params, options) {\n  var index,\n      len,\n      row,\n      maximumColumns = this.getMatrixWidth(options.maximumColumnsInMatrix, params.items.length);\n\n  for (index = 0, len = params.items.length; index < len; index += 1) {\n    var treeItem = params.items[index];\n    var treeItemId = treeItem.id;\n    var treeItemPosition = data.treeItemsPositions[treeItemId];\n    var rowIndex = Math.floor(index / maximumColumns);\n    var verticalPadding = options.shifts[treeItemPosition.actualVisibility] / 2;\n    row = data.rows[rowIndex];\n\n    if (row == null) {\n      row = new this.Row();\n      data.rows[rowIndex] = row;\n    }\n\n    row.depth = Math.max(row.depth, verticalPadding + treeItemPosition.actualSize.height + verticalPadding);\n\n    switch (treeItemPosition.actualVisibility) {\n      case Visibility.Dot:\n      case Visibility.Line:\n      case Visibility.Invisible:\n        row.dotsDepth = !row.dotsDepth ? treeItemPosition.actualSize.height : Math.min(row.dotsDepth, treeItemPosition.actualSize.height);\n        break;\n\n      default:\n        row.minimalDepth = !row.minimalDepth ? treeItemPosition.actualSize.height : Math.min(row.minimalDepth, treeItemPosition.actualSize.height);\n        break;\n    }\n  }\n\n  var offset = 0;\n\n  for (index = 0, len = data.rows.length; index < len; index += 1) {\n    row = data.rows[index];\n    row.offset = offset + row.depth / 2;\n    offset = row.offset + row.depth / 2;\n\n    if (row.minimalDepth == null) {\n      row.minimalDepth = row.depth;\n    }\n\n    if (row.dotsDepth != null && row.dotsDepth > row.minimalDepth) {\n      row.minimalDepth = row.dotsDepth;\n    }\n\n    switch (options.verticalAlignment) {\n      case VerticalAlignmentType.Top:\n        row.horizontalConnectorsDepth = row.minimalDepth / 2.0;\n        break;\n\n      case VerticalAlignmentType.Middle:\n        row.horizontalConnectorsDepth = row.depth / 2.0;\n        break;\n\n      case VerticalAlignmentType.Bottom:\n        row.horizontalConnectorsDepth = row.depth - row.minimalDepth / 2.0;\n        break;\n    }\n  }\n};\n\nMatrixLayout.prototype.getLayoutSize = function (data) {\n  return new Rect(0, 0, Math.round(this.getLayoutWidth(data)), Math.round(this.getLayoutHeight(data)));\n};\n\nMatrixLayout.prototype.getLayoutWidth = function (data) {\n  var result = 0,\n      length = data.columns.length;\n\n  if (length > 0) {\n    var lastColumn = data.columns[length - 1];\n    result = lastColumn.offset + lastColumn.depth / 2 + lastColumn.rightPadding;\n  }\n\n  return result;\n};\n\nMatrixLayout.prototype.getLayoutHeight = function (data) {\n  var result = 0,\n      length = data.rows.length;\n\n  if (length > 0) {\n    var lastRow = data.rows[length - 1];\n    result = lastRow.offset + lastRow.depth / 2;\n  }\n\n  return result;\n};\n\nMatrixLayout.prototype.arrange = function (thisArg, parentPosition, onItemPositioned) {\n  if (onItemPositioned != null) {\n    var maximumColumns = this.getMatrixWidth(this.options.maximumColumnsInMatrix, this.params.items.length);\n\n    for (var index = 0, len = this.params.items.length; index < len; index += 1) {\n      var treeItem = this.params.items[index],\n          treeItemId = treeItem.id;\n      var columnIndex = index % maximumColumns;\n      var column = this.data.columns[columnIndex];\n      var rowIndex = Math.floor(index / maximumColumns);\n      var row = this.data.rows[rowIndex];\n      var treeItemPosition = this.data.treeItemsPositions[treeItemId];\n      var actualPosition = this.getItemPosition(treeItemPosition.actualVisibility, column, row, treeItemPosition.actualSize, this.options);\n      actualPosition.translate(parentPosition.x, parentPosition.y);\n      treeItemPosition.actualPosition = actualPosition;\n      treeItemPosition.horizontalConnectorsShift = parentPosition.y + row.offset - row.depth / 2 + row.horizontalConnectorsDepth, treeItemPosition.leftMedianOffset = column.depth / 2 + column.leftPadding;\n      treeItemPosition.rightMedianOffset = column.depth / 2 + column.rightPadding;\n      treeItemPosition.topConnectorShift = row.depth / 2;\n      treeItemPosition.bottomConnectorShift = row.depth / 2;\n      onItemPositioned.call(thisArg, treeItemId, treeItemPosition);\n    }\n  }\n};\n\nMatrixLayout.prototype.getItemPosition = function (visibility, column, row, size, options) {\n  var itemShift = 0;\n\n  switch (visibility) {\n    case Visibility.Normal:\n      switch (options.verticalAlignment) {\n        case VerticalAlignmentType.Top:\n          itemShift = 0;\n          break;\n\n        case VerticalAlignmentType.Middle:\n          itemShift = (row.depth - size.height) / 2.0;\n          break;\n\n        case VerticalAlignmentType.Bottom:\n          itemShift = row.depth - size.height;\n          break;\n      }\n\n      break;\n\n    case Visibility.Dot:\n    case Visibility.Line:\n    case Visibility.Invisible:\n      itemShift = row.horizontalConnectorsDepth - size.height / 2.0;\n      break;\n  }\n\n  return new Rect(column.offset - size.width / 2, row.offset - row.depth / 2 + itemShift, size.width, size.height);\n};","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/tasks/transformations/layouts/MatrixLayout.js"],"names":["BaseLayout","Rect","VerticalAlignmentType","Visibility","OrientationType","GroupByType","AdviserPlacementType","TreeItemPosition","MatrixLayout","params","options","items","isItemSelected","cursorItemId","getTemplateParams","hideParentConnection","hideChildrenConnection","verticalAlignment","Middle","orientationType","Top","arrowsDirection","None","linesWidth","checkBoxPanelSize","buttonsPanelSize","groupTitlePanelSize","groupTitlePlacementType","Left","normalLevelShift","dotLevelShift","lineLevelShift","normalItemsInterval","dotItemsInterval","lineItemsInterval","maximumColumnsInMatrix","data","treeItemsPositions","columns","rows","parent","prototype","constructor","apply","arguments","Column","depth","offset","leftPadding","rightPadding","Row","horizontalConnectorsDepth","minimalDepth","dotsDepth","getMatrixWidth","len","Math","min","ceil","sqrt","measure","visibility","measureItems","measureColumns","measureRows","getLayoutSize","index","length","treeItem","treeItemId","id","treeItemPosition","treeItemVisibility","Normal","isVisible","Invisible","Auto","treeItemtemplate","actualVisibility","size","getItemSize","actualSize","contentPosition","column","maximumColumns","horizontalPadding","intervals","columnIndex","itemWidth","width","max","arrowTipLength","Parents","Children","row","rowIndex","floor","verticalPadding","shifts","height","Dot","Line","Bottom","round","getLayoutWidth","getLayoutHeight","result","lastColumn","lastRow","arrange","thisArg","parentPosition","onItemPositioned","actualPosition","getItemPosition","translate","x","y","horizontalConnectorsShift","leftMedianOffset","rightMedianOffset","topConnectorShift","bottomConnectorShift","call","itemShift"],"mappings":"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","sourcesContent":["import BaseLayout from './BaseLayout';\nimport Rect from '../../../graphics/structs/Rect';\nimport { VerticalAlignmentType, Visibility, OrientationType, GroupByType, AdviserPlacementType } from '../../../enums';\nimport TreeItemPosition from '../../../models/TreeItemPosition';\n\nexport default function MatrixLayout(params, options) {\n  this.params = {\n    items: [], // OrgItem used properties: isVisible\n    isItemSelected: null,\n    cursorItemId: null,\n    getTemplateParams: null, //TemplateParams\n    hideParentConnection: false,\n    hideChildrenConnection: false\n  };\n\n  this.options = {\n    verticalAlignment: VerticalAlignmentType.Middle,\n    orientationType: OrientationType.Top,\n    arrowsDirection: GroupByType.None,\n    linesWidth: 1,\n    checkBoxPanelSize: 24,\n    buttonsPanelSize: 32,\n    groupTitlePanelSize: 24,\n    groupTitlePlacementType: AdviserPlacementType.Left,\n    normalLevelShift: 20,\n    dotLevelShift: 20,\n    lineLevelShift: 20,\n    normalItemsInterval: 10,\n    dotItemsInterval: 1,\n    lineItemsInterval: 2,\n    maximumColumnsInMatrix: 6\n  };\n\n  this.data = {\n    treeItemsPositions: {},\n    columns: [],\n    rows: []\n  };\n\n  this.parent = BaseLayout.prototype;\n  this.parent.constructor.apply(this, arguments);\n};\n\nMatrixLayout.prototype = new BaseLayout();\n\nMatrixLayout.prototype.Column = function () {\n  this.depth = 0;\n  this.offset = 0;\n  this.leftPadding = 0;\n  this.rightPadding = 0;\n};\n\nMatrixLayout.prototype.Row = function () {\n  this.depth = 0;\n  this.offset = 0;\n  this.horizontalConnectorsDepth = 0;\n  this.minimalDepth = null;\n  this.dotsDepth = null;\n};\n\nMatrixLayout.prototype.getMatrixWidth = function (maximumColumnsInMatrix, len) {\n  return Math.min(maximumColumnsInMatrix, Math.ceil(Math.sqrt(len)));\n};\n\nMatrixLayout.prototype.measure = function (visibility) {\n  var data = {\n    treeItemsPositions: {},\n    columns: [],\n    rows: []\n  };\n\n  this.measureItems(data, this.params, this.options, visibility);\n  this.measureColumns(data, this.params, this.options);\n  this.measureRows(data, this.params, this.options);\n\n  this.data = data;\n\n  return this.getLayoutSize(data);\n};\n\nMatrixLayout.prototype.measureItems = function (data, params, options, visibility) {\n  for (var index = 0, len = params.items.length; index < len; index += 1) {\n    var treeItem = params.items[index];\n    var treeItemId = treeItem.id;\n    var treeItemPosition = new TreeItemPosition();\n\n    var treeItemVisibility = params.isItemSelected(treeItemId) ? Visibility.Normal : (!treeItem.isVisible ? Visibility.Invisible : Visibility.Auto),\n      treeItemtemplate = params.getTemplateParams(treeItemId);\n\n    var actualVisibility = (treeItemVisibility === Visibility.Auto) ? visibility : treeItemVisibility;\n    var size = this.getItemSize(actualVisibility, params.cursorItemId == treeItemId, treeItemtemplate, options);\n    treeItemPosition.actualVisibility = actualVisibility;\n    treeItemPosition.actualSize = size.actualSize;\n    treeItemPosition.contentPosition = size.contentPosition;\n\n    data.treeItemsPositions[treeItemId] = treeItemPosition;\n  }\n};\n\nMatrixLayout.prototype.measureColumns = function (data, params, options) {\n  var column,\n    index, len,\n    maximumColumns = this.getMatrixWidth(options.maximumColumnsInMatrix, params.items.length);\n  for (index = 0, len = params.items.length; index < len; index += 1) {\n    var treeItem = params.items[index];\n    var treeItemId = treeItem.id;\n    var treeItemPosition = data.treeItemsPositions[treeItemId];\n\n    var horizontalPadding = options.intervals[treeItemPosition.actualVisibility] / 2;\n    treeItemPosition.leftPadding = horizontalPadding;\n    treeItemPosition.rightPadding = horizontalPadding;\n\n    var columnIndex = index % maximumColumns;\n    column = data.columns[columnIndex];\n    if (column == null) {\n      column = new this.Column();\n      data.columns[columnIndex] = column;\n    }\n    var itemWidth = treeItemPosition.leftPadding + treeItemPosition.actualSize.width + treeItemPosition.rightPadding;\n    column.depth = Math.max(column.depth, itemWidth);\n  }\n\n  var arrowTipLength = options.linesWidth * 8;\n\n\n  var offset = 0;\n  for (index = 0, len = data.columns.length; index < len; index += 1) {\n    column = data.columns[index];\n\n\n    if (index % 2 == 0) {\n      switch (options.arrowsDirection) {\n        case GroupByType.Parents:\n          column.leftPadding = params.hideChildrenConnection ? 0 : arrowTipLength;\n          column.rightPadding = 0;\n          break;\n        case GroupByType.Children:\n          column.leftPadding = 0;\n          column.rightPadding = params.hideParentConnection ? 0 : arrowTipLength;\n          break;\n      }\n    } else {\n      switch (options.arrowsDirection) {\n        case GroupByType.Parents:\n          column.leftPadding = 0;\n          column.rightPadding = params.hideChildrenConnection ? 0 : arrowTipLength;\n          break;\n        case GroupByType.Children:\n          column.leftPadding = params.hideParentConnection ? 0 : arrowTipLength;\n          column.rightPadding = 0;\n          break;\n      }\n    }\n\n    column.offset = offset + column.leftPadding + column.depth / 2;\n\n    offset = column.offset + column.depth / 2 + column.rightPadding;\n  }\n};\n\nMatrixLayout.prototype.measureRows = function (data, params, options) {\n  var index, len,\n    row,\n    maximumColumns = this.getMatrixWidth(options.maximumColumnsInMatrix, params.items.length);\n  for (index = 0, len = params.items.length; index < len; index += 1) {\n    var treeItem = params.items[index];\n    var treeItemId = treeItem.id;\n    var treeItemPosition = data.treeItemsPositions[treeItemId];\n\n    var rowIndex = Math.floor(index / maximumColumns);\n    var verticalPadding = options.shifts[treeItemPosition.actualVisibility] / 2;\n\n    row = data.rows[rowIndex];\n    if (row == null) {\n      row = new this.Row();\n      data.rows[rowIndex] = row;\n    }\n    row.depth = Math.max(row.depth, verticalPadding + treeItemPosition.actualSize.height + verticalPadding);\n\n    switch (treeItemPosition.actualVisibility) {\n      case Visibility.Dot:\n      case Visibility.Line:\n      case Visibility.Invisible:\n        row.dotsDepth = !row.dotsDepth ? treeItemPosition.actualSize.height : Math.min(row.dotsDepth, treeItemPosition.actualSize.height);\n        break;\n      default:\n        row.minimalDepth = !row.minimalDepth ? treeItemPosition.actualSize.height : Math.min(row.minimalDepth, treeItemPosition.actualSize.height);\n        break;\n    }\n  }\n\n  var offset = 0;\n  for (index = 0, len = data.rows.length; index < len; index += 1) {\n    row = data.rows[index];\n\n    row.offset = offset + row.depth / 2;\n    offset = row.offset + row.depth / 2;\n\n    if (row.minimalDepth == null) {\n      row.minimalDepth = row.depth;\n    }\n    if (row.dotsDepth != null && row.dotsDepth > row.minimalDepth) {\n      row.minimalDepth = row.dotsDepth;\n    }\n\n    switch (options.verticalAlignment) {\n      case VerticalAlignmentType.Top:\n        row.horizontalConnectorsDepth = row.minimalDepth / 2.0;\n        break;\n      case VerticalAlignmentType.Middle:\n        row.horizontalConnectorsDepth = row.depth / 2.0;\n        break;\n      case VerticalAlignmentType.Bottom:\n        row.horizontalConnectorsDepth = row.depth - row.minimalDepth / 2.0;\n        break;\n    }\n  }\n};\n\nMatrixLayout.prototype.getLayoutSize = function (data) {\n  return new Rect(0, 0, Math.round(this.getLayoutWidth(data)), Math.round(this.getLayoutHeight(data)));\n};\n\nMatrixLayout.prototype.getLayoutWidth = function (data) {\n  var result = 0,\n    length = data.columns.length;\n  if (length > 0) {\n    var lastColumn = data.columns[length - 1];\n    result = lastColumn.offset + lastColumn.depth / 2 + lastColumn.rightPadding;\n  }\n  return result;\n};\n\nMatrixLayout.prototype.getLayoutHeight = function (data) {\n  var result = 0,\n    length = data.rows.length;\n  if (length > 0) {\n    var lastRow = data.rows[length - 1];\n    result = lastRow.offset + lastRow.depth / 2;\n  }\n  return result;\n};\n\nMatrixLayout.prototype.arrange = function (thisArg, parentPosition, onItemPositioned) {\n  if (onItemPositioned != null) {\n    var maximumColumns = this.getMatrixWidth(this.options.maximumColumnsInMatrix, this.params.items.length);\n    for (var index = 0, len = this.params.items.length; index < len; index += 1) {\n      var treeItem = this.params.items[index],\n        treeItemId = treeItem.id;\n\n      var columnIndex = index % maximumColumns;\n      var column = this.data.columns[columnIndex];\n\n      var rowIndex = Math.floor(index / maximumColumns);\n      var row = this.data.rows[rowIndex];\n\n      var treeItemPosition = this.data.treeItemsPositions[treeItemId];\n\n      var actualPosition = this.getItemPosition(treeItemPosition.actualVisibility, column, row, treeItemPosition.actualSize, this.options);\n      actualPosition.translate(parentPosition.x, parentPosition.y);\n\n      treeItemPosition.actualPosition = actualPosition;\n      treeItemPosition.horizontalConnectorsShift = parentPosition.y + row.offset - row.depth / 2 + row.horizontalConnectorsDepth,\n        treeItemPosition.leftMedianOffset = column.depth / 2 + column.leftPadding;\n      treeItemPosition.rightMedianOffset = column.depth / 2 + column.rightPadding;\n      treeItemPosition.topConnectorShift = row.depth / 2;\n      treeItemPosition.bottomConnectorShift = row.depth / 2;\n\n      onItemPositioned.call(thisArg, treeItemId, treeItemPosition);\n    }\n  }\n};\n\nMatrixLayout.prototype.getItemPosition = function (visibility, column, row, size, options) {\n  var itemShift = 0;\n\n  switch (visibility) {\n    case Visibility.Normal:\n      switch (options.verticalAlignment) {\n        case VerticalAlignmentType.Top:\n          itemShift = 0;\n          break;\n        case VerticalAlignmentType.Middle:\n          itemShift = (row.depth - size.height) / 2.0;\n          break;\n        case VerticalAlignmentType.Bottom:\n          itemShift = row.depth - size.height;\n          break;\n      }\n      break;\n    case Visibility.Dot:\n    case Visibility.Line:\n    case Visibility.Invisible:\n      itemShift = row.horizontalConnectorsDepth - size.height / 2.0;\n      break;\n  }\n\n  return new Rect(column.offset - size.width / 2, row.offset - row.depth / 2 + itemShift, size.width, size.height);\n};"]},"metadata":{},"sourceType":"module"}