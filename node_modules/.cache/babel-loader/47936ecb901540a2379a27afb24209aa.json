{"ast":null,"code":"import Thickness from '../graphics/structs/Thickness';\nimport { AnnotationType, ZOrderType, LineType } from '../enums';\n/**\n * @class BackgroundAnnotationConfig\n * @classdesc Background annotation draws rectangular shape around annotated items. Annotations borders are offset around items, so if \n * two annotations overlap each other they are merged into one continuos shape having single border line.\n *\n * @param {object} arg0 Object properties.\n */\n\nexport default function BackgroundAnnotationConfig(arg0) {\n  var property;\n  /**\n   * Annotation type. All types of annotations objects are added to `annotations` collection property of the control.\n   * This property is needed to distinguish them when they are defined as JSON objects.\n   * \n   * @type {AnnotationType}\n   */\n\n  this.annotationType = AnnotationType.Background;\n  /**\n   * Collection of nodes ids this background annotation is drawn for.\n   * \n   * @type {string[]}\n   */\n\n  this.items = [];\n  /**\n   * If this property is true then background annotation includes all descendants of every item in `items` collection. It works in {OrgDiagram} only.\n   * \n   * @type {boolean}\n   */\n\n  this.includeChildren = false;\n  /**\n   * Sets annotation Z order placement relative to the diagram items. Diagram visual elements are drawn in layers on top of each other.\n   * If you place annotations over diagram nodes then you block mouse events of UI elements in their templates.\n   * Browsers don't support mouse events transparency consistently yet. So in order to avoid mouse events blocking of UI elements in item\n   * templates you have to place annotation items under them or explicitly define maximum zindex for controls and make them rendered on top\n   * of other visual elements. The control takes this into account and renders buttons panel on top of everything,\n   * so they are never blocked by annotations drawn in front of diagram nodes.\n   * \n   * @type {ZOrderType}\n   */\n\n  this.zOrderType = ZOrderType.Auto;\n  /**\n   * Sets background offset around annotated items.\n   * \n   * @type {Thickness}\n   */\n\n  this.offset = new Thickness(18, 18, 18, 18);\n  /**\n   * Border line width\n   * \n   * @type {number}\n   */\n\n  this.lineWidth = 2;\n  /**\n   * Background color opacity.\n   * \n   * @type {number}\n   */\n\n  this.opacity = 1;\n  /**\n   * Shape border line color\n   * \n   * @type {string}\n   */\n\n  this.borderColor = null;\n  /**\n   * Fill Color.\n   * \n   * @type {string}\n   */\n\n  this.fillColor = null;\n  /**\n   * Border line type\n   * \n   * @type {LineType}\n   */\n\n  this.lineType = LineType.Solid;\n  /**\n   * If true then annotated nodes are shown full size regardless of controls auto fit mode and available screen space.\n   * @type {boolean}\n   */\n\n  this.selectItems = false;\n\n  switch (arguments.length) {\n    case 1:\n      if (arg0 !== null) {\n        if (arg0 instanceof Array) {\n          this.items = arg0;\n        } else if (typeof arg0 == \"object\") {\n          for (property in arg0) {\n            if (arg0.hasOwnProperty(property)) {\n              this[property] = arg0[property];\n            }\n          }\n        }\n      }\n\n      break;\n  }\n}\n;","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/configs/BackgroundAnnotationConfig.js"],"names":["Thickness","AnnotationType","ZOrderType","LineType","BackgroundAnnotationConfig","arg0","property","annotationType","Background","items","includeChildren","zOrderType","Auto","offset","lineWidth","opacity","borderColor","fillColor","lineType","Solid","selectItems","arguments","length","Array","hasOwnProperty"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,+BAAtB;AACA,SAASC,cAAT,EAAyBC,UAAzB,EAAqCC,QAArC,QAAqD,UAArD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,0BAAT,CAAoCC,IAApC,EAA0C;AACvD,MAAIC,QAAJ;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,cAAL,GAAsBN,cAAc,CAACO,UAArC;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKC,KAAL,GAAa,EAAb;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKC,eAAL,GAAuB,KAAvB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,UAAL,GAAkBT,UAAU,CAACU,IAA7B;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKC,MAAL,GAAc,IAAIb,SAAJ,CAAc,EAAd,EAAkB,EAAlB,EAAsB,EAAtB,EAA0B,EAA1B,CAAd;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKc,SAAL,GAAiB,CAAjB;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKC,OAAL,GAAe,CAAf;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKC,WAAL,GAAmB,IAAnB;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKC,SAAL,GAAiB,IAAjB;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKC,QAAL,GAAgBf,QAAQ,CAACgB,KAAzB;AAEA;AACF;AACA;AACA;;AACE,OAAKC,WAAL,GAAmB,KAAnB;;AAEA,UAAQC,SAAS,CAACC,MAAlB;AACE,SAAK,CAAL;AACE,UAAIjB,IAAI,KAAK,IAAb,EAAmB;AACjB,YAAIA,IAAI,YAAYkB,KAApB,EAA2B;AACzB,eAAKd,KAAL,GAAaJ,IAAb;AACD,SAFD,MAEO,IAAI,OAAOA,IAAP,IAAe,QAAnB,EAA6B;AAClC,eAAKC,QAAL,IAAiBD,IAAjB,EAAuB;AACrB,gBAAIA,IAAI,CAACmB,cAAL,CAAoBlB,QAApB,CAAJ,EAAmC;AACjC,mBAAKA,QAAL,IAAiBD,IAAI,CAACC,QAAD,CAArB;AACD;AACF;AACF;AACF;;AACD;AAbJ;AAeD;AAAA","sourcesContent":["import Thickness from '../graphics/structs/Thickness';\nimport { AnnotationType, ZOrderType, LineType } from '../enums';\n\n/**\n * @class BackgroundAnnotationConfig\n * @classdesc Background annotation draws rectangular shape around annotated items. Annotations borders are offset around items, so if \n * two annotations overlap each other they are merged into one continuos shape having single border line.\n *\n * @param {object} arg0 Object properties.\n */\nexport default function BackgroundAnnotationConfig(arg0) {\n  var property;\n\n  /**\n   * Annotation type. All types of annotations objects are added to `annotations` collection property of the control.\n   * This property is needed to distinguish them when they are defined as JSON objects.\n   * \n   * @type {AnnotationType}\n   */\n  this.annotationType = AnnotationType.Background;\n\n  /**\n   * Collection of nodes ids this background annotation is drawn for.\n   * \n   * @type {string[]}\n   */\n  this.items = [];\n\n  /**\n   * If this property is true then background annotation includes all descendants of every item in `items` collection. It works in {OrgDiagram} only.\n   * \n   * @type {boolean}\n   */\n  this.includeChildren = false;\n\n  /**\n   * Sets annotation Z order placement relative to the diagram items. Diagram visual elements are drawn in layers on top of each other.\n   * If you place annotations over diagram nodes then you block mouse events of UI elements in their templates.\n   * Browsers don't support mouse events transparency consistently yet. So in order to avoid mouse events blocking of UI elements in item\n   * templates you have to place annotation items under them or explicitly define maximum zindex for controls and make them rendered on top\n   * of other visual elements. The control takes this into account and renders buttons panel on top of everything,\n   * so they are never blocked by annotations drawn in front of diagram nodes.\n   * \n   * @type {ZOrderType}\n   */\n  this.zOrderType = ZOrderType.Auto;\n\n  /**\n   * Sets background offset around annotated items.\n   * \n   * @type {Thickness}\n   */\n  this.offset = new Thickness(18, 18, 18, 18);\n\n  /**\n   * Border line width\n   * \n   * @type {number}\n   */\n  this.lineWidth = 2;\n\n  /**\n   * Background color opacity.\n   * \n   * @type {number}\n   */\n  this.opacity = 1;\n\n  /**\n   * Shape border line color\n   * \n   * @type {string}\n   */\n  this.borderColor = null;\n\n  /**\n   * Fill Color.\n   * \n   * @type {string}\n   */\n  this.fillColor = null;\n\n  /**\n   * Border line type\n   * \n   * @type {LineType}\n   */\n  this.lineType = LineType.Solid;\n\n  /**\n   * If true then annotated nodes are shown full size regardless of controls auto fit mode and available screen space.\n   * @type {boolean}\n   */\n  this.selectItems = false;\n\n  switch (arguments.length) {\n    case 1:\n      if (arg0 !== null) {\n        if (arg0 instanceof Array) {\n          this.items = arg0;\n        } else if (typeof arg0 == \"object\") {\n          for (property in arg0) {\n            if (arg0.hasOwnProperty(property)) {\n              this[property] = arg0[property];\n            }\n          }\n        }\n      }\n      break;\n  }\n};"]},"metadata":{},"sourceType":"module"}