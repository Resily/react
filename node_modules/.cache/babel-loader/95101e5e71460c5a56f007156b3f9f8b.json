{"ast":null,"code":"import Interval from '../graphics/structs/Interval';\n\nfunction IntervalPoint(value, index, isStart) {\n  this.value = value;\n  this.index = index;\n  this.isStart = isStart;\n}\n/**\n * Callback function to iterate over result intervals\n * \n * @callback onMergedIntervalItemCallback\n * @param {Interval} interval Merged interval\n * @param {Object} context First interval context.\n */\n\n/**\n * Merges collection of overlapping intervals into continuous group of intervals. Calls callback \n * function to pass result interval per group of overlapping intervals.\n * \n * @param {Object} thisArg The callback function invocation context\n * @param {Interval[]} items Collection of intervals.\n * @param {onMergedIntervalItemCallback} onItem Callback function to pass result group of merged intervals.\n */\n\n\nexport default function getMergedIntervals(thisArg, items, onItem) {\n  var points = [];\n\n  for (var index = 0; index < items.length; index += 1) {\n    var item = items[index];\n    points.push(new IntervalPoint(item.from, index, true));\n    points.push(new IntervalPoint(item.to, index, false));\n  }\n\n  points.sort(function (a, b) {\n    if (a.value === b.value) {\n      return b.isStart - a.isStart;\n    }\n\n    return a.value - b.value;\n  });\n  var counter = 0;\n  var interval = null;\n  var logicalIndex = null;\n\n  for (var index = 0, len = points.length; index < len; index += 1) {\n    var point = points[index];\n\n    if (interval == null) {\n      interval = new Interval(items[point.index]);\n    }\n\n    interval.to = point.value;\n\n    if (point.isStart) {\n      counter++;\n\n      if (logicalIndex === null || logicalIndex > point.index) {\n        logicalIndex = point.index;\n        interval.context = items[point.index].context;\n      }\n    } else {\n      counter--;\n    }\n\n    if (!counter) {\n      if (onItem != null) {\n        onItem.call(thisArg, interval);\n      }\n\n      interval = null;\n      logicalIndex = null;\n    }\n  }\n}\n;","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/algorithms/getMergedIntervals.js"],"names":["Interval","IntervalPoint","value","index","isStart","getMergedIntervals","thisArg","items","onItem","points","length","item","push","from","to","sort","a","b","counter","interval","logicalIndex","len","point","context","call"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,8BAArB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8BC,KAA9B,EAAqCC,OAArC,EAA8C;AAC5C,OAAKF,KAAL,GAAaA,KAAb;AACA,OAAKC,KAAL,GAAaA,KAAb;AACA,OAAKC,OAAL,GAAeA,OAAf;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAe,SAASC,kBAAT,CAA4BC,OAA5B,EAAqCC,KAArC,EAA4CC,MAA5C,EAAoD;AACjE,MAAIC,MAAM,GAAG,EAAb;;AACA,OAAI,IAAIN,KAAK,GAAG,CAAhB,EAAmBA,KAAK,GAAGI,KAAK,CAACG,MAAjC,EAAyCP,KAAK,IAAE,CAAhD,EAAmD;AACjD,QAAIQ,IAAI,GAAGJ,KAAK,CAACJ,KAAD,CAAhB;AACAM,IAAAA,MAAM,CAACG,IAAP,CAAY,IAAIX,aAAJ,CAAkBU,IAAI,CAACE,IAAvB,EAA6BV,KAA7B,EAAoC,IAApC,CAAZ;AACAM,IAAAA,MAAM,CAACG,IAAP,CAAY,IAAIX,aAAJ,CAAkBU,IAAI,CAACG,EAAvB,EAA2BX,KAA3B,EAAkC,KAAlC,CAAZ;AACD;;AAEDM,EAAAA,MAAM,CAACM,IAAP,CAAY,UAASC,CAAT,EAAYC,CAAZ,EAAe;AACzB,QAAGD,CAAC,CAACd,KAAF,KAAYe,CAAC,CAACf,KAAjB,EAAwB;AACtB,aAAOe,CAAC,CAACb,OAAF,GAAYY,CAAC,CAACZ,OAArB;AACD;;AACD,WAAQY,CAAC,CAACd,KAAF,GAAUe,CAAC,CAACf,KAApB;AACD,GALD;AAOA,MAAIgB,OAAO,GAAG,CAAd;AACA,MAAIC,QAAQ,GAAG,IAAf;AACA,MAAIC,YAAY,GAAG,IAAnB;;AACA,OAAI,IAAIjB,KAAK,GAAG,CAAZ,EAAekB,GAAG,GAAGZ,MAAM,CAACC,MAAhC,EAAwCP,KAAK,GAAGkB,GAAhD,EAAqDlB,KAAK,IAAE,CAA5D,EAA+D;AAC7D,QAAImB,KAAK,GAAGb,MAAM,CAACN,KAAD,CAAlB;;AACA,QAAGgB,QAAQ,IAAI,IAAf,EAAqB;AACnBA,MAAAA,QAAQ,GAAG,IAAInB,QAAJ,CAAaO,KAAK,CAACe,KAAK,CAACnB,KAAP,CAAlB,CAAX;AACD;;AACDgB,IAAAA,QAAQ,CAACL,EAAT,GAAcQ,KAAK,CAACpB,KAApB;;AAEA,QAAGoB,KAAK,CAAClB,OAAT,EAAkB;AAChBc,MAAAA,OAAO;;AAEP,UAAGE,YAAY,KAAK,IAAjB,IAAyBA,YAAY,GAAGE,KAAK,CAACnB,KAAjD,EAAwD;AACtDiB,QAAAA,YAAY,GAAGE,KAAK,CAACnB,KAArB;AACAgB,QAAAA,QAAQ,CAACI,OAAT,GAAmBhB,KAAK,CAACe,KAAK,CAACnB,KAAP,CAAL,CAAmBoB,OAAtC;AACD;AACF,KAPD,MAOO;AACLL,MAAAA,OAAO;AACR;;AACD,QAAG,CAACA,OAAJ,EAAa;AACX,UAAGV,MAAM,IAAI,IAAb,EAAmB;AACjBA,QAAAA,MAAM,CAACgB,IAAP,CAAYlB,OAAZ,EAAqBa,QAArB;AACD;;AACDA,MAAAA,QAAQ,GAAG,IAAX;AACAC,MAAAA,YAAY,GAAG,IAAf;AACD;AACF;AACF;AAAA","sourcesContent":["import Interval from '../graphics/structs/Interval';\n\nfunction IntervalPoint(value, index, isStart) {\n  this.value = value;\n  this.index = index;\n  this.isStart = isStart;\n}\n\n/**\n * Callback function to iterate over result intervals\n * \n * @callback onMergedIntervalItemCallback\n * @param {Interval} interval Merged interval\n * @param {Object} context First interval context.\n */\n\n/**\n * Merges collection of overlapping intervals into continuous group of intervals. Calls callback \n * function to pass result interval per group of overlapping intervals.\n * \n * @param {Object} thisArg The callback function invocation context\n * @param {Interval[]} items Collection of intervals.\n * @param {onMergedIntervalItemCallback} onItem Callback function to pass result group of merged intervals.\n */\nexport default function getMergedIntervals(thisArg, items, onItem) {\n  var points = [];\n  for(var index = 0; index < items.length; index+=1) {\n    var item = items[index];\n    points.push(new IntervalPoint(item.from, index, true));\n    points.push(new IntervalPoint(item.to, index, false));\n  }\n\n  points.sort(function(a, b) {\n    if(a.value === b.value) {\n      return b.isStart - a.isStart;\n    }\n    return  a.value - b.value;\n  })\n\n  var counter = 0;\n  var interval = null;\n  var logicalIndex = null;\n  for(var index = 0, len = points.length; index < len; index+=1) {\n    var point = points[index];\n    if(interval == null) {\n      interval = new Interval(items[point.index]);\n    }\n    interval.to = point.value;\n\n    if(point.isStart) {\n      counter++;\n\n      if(logicalIndex === null || logicalIndex > point.index) {\n        logicalIndex = point.index;\n        interval.context = items[point.index].context;\n      }\n    } else {\n      counter--;\n    }\n    if(!counter) {\n      if(onItem != null) {\n        onItem.call(thisArg, interval);\n      }\n      interval = null;\n      logicalIndex = null;\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}