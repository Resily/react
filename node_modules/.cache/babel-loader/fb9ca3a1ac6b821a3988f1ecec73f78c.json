{"ast":null,"code":"/**\n * Creates self-balancing binary search tree structure.\n * @class SortedList\n * \n * @returns {SortedList} Returns sorted list collection. \n */\nexport default function SortedList() {\n  var _rootNode = null;\n\n  function Node(value, context) {\n    this.value = value;\n    this.context = context;\n    this.left = null;\n    this.right = null;\n    this.balance = 0;\n  }\n\n  function _rebalance(node) {\n    var balance;\n\n    if (node.balance == 2) {\n      var right = node.right;\n      balance = right.balance;\n\n      if (balance >= 0) {\n        _rotateSmallLeft(right, node);\n      } else {\n        _rotateBigLeft(right, node);\n      }\n    } else if (node.balance == -2) {\n      var left = node.left;\n      balance = left.balance;\n\n      if (balance <= 0) {\n        _rotateSmallRight(node.left, node);\n      } else {\n        _rotateBigRight(node.left, node);\n      }\n    }\n\n    return balance;\n  }\n\n  function _rotateSmallLeft(node, parent) {\n    _rotateLeft(node, parent);\n\n    if (node.balance == 1) {\n      parent.balance = 0;\n      node.balance = 0;\n    } else {\n      parent.balance = -1;\n      node.balance = 1;\n    }\n  }\n\n  function _rotateLeft(node, parent) {\n    _swap(node, parent);\n\n    parent.right = node.right;\n    node.right = node.left;\n    node.left = parent.left;\n    parent.left = node;\n  }\n\n  function _rotateSmallRight(node, parent) {\n    _rotateRight(node, parent);\n\n    if (node.balance == -1) {\n      parent.balance = 0;\n      node.balance = 0;\n    } else {\n      parent.balance = 1;\n      node.balance = -1;\n    }\n  }\n\n  function _rotateRight(node, parent) {\n    _swap(node, parent);\n\n    parent.left = node.left;\n    node.left = node.right;\n    node.right = parent.right;\n    parent.right = node;\n  }\n\n  function _rotateBigLeft(node, parent) {\n    var bottom = node.left;\n\n    _rotateRight(bottom, node);\n\n    _rotateLeft(node, parent);\n\n    parent.balance = 0;\n\n    switch (bottom.balance) {\n      case 1:\n        node.balance = -1;\n        bottom.balance = 0;\n        break;\n\n      case 0:\n        bottom.balance = 0;\n        node.balance = 0;\n        break;\n\n      default:\n        bottom.balance = 1;\n        node.balance = 0;\n        break;\n    }\n  }\n\n  function _rotateBigRight(node, parent) {\n    var bottom = node.right;\n\n    _rotateLeft(bottom, node);\n\n    _rotateRight(node, parent);\n\n    parent.balance = 0;\n\n    switch (bottom.balance) {\n      case -1:\n        bottom.balance = 0;\n        node.balance = 1;\n        break;\n\n      case 0:\n        bottom.balance = 0;\n        node.balance = 0;\n        break;\n\n      default:\n        bottom.balance = -1;\n        node.balance = 0;\n        break;\n    }\n  }\n  /**\n   * Callback function to notify about duplicate values\n   * \n   * @callback onSortedListDuplicateCallback\n   * @param {object} context The context object of the duplicate value\n   */\n\n  /**\n   * Adds value to sorted list collection\n   * @param {number} value The value \n   * @param {object} context The value context object\n   * @param {object} thisArg The callback function invocation context \n   * @param {onSortedListDuplicateCallback} onDuplicate Callback function for duplicates values notification\n   */\n\n\n  function add(value, context, thisArg, onDuplicate) {\n    if (_rootNode == null) {\n      _rootNode = new Node(value, context);\n    } else {\n      var trace = [];\n      var node = null;\n      var next = _rootNode;\n\n      while (next != null) {\n        if (node != null) {\n          trace.push(node);\n        }\n\n        node = next;\n\n        if (node.value == value) {\n          if (onDuplicate != null) {\n            onDuplicate.call(thisArg, node.context);\n          } else {\n            throw \"Structure does not support duplicates.\";\n          }\n        } else {\n          if (node.value > value) {\n            next = node.left;\n          } else {\n            next = node.right;\n          }\n        }\n      }\n\n      trace.push(node);\n      var newNode = new Node(value, context);\n\n      if (node.value > value) {\n        node.left = newNode;\n      } else {\n        node.right = newNode;\n      }\n\n      node = newNode;\n\n      while ((next = trace.pop()) != null) {\n        if (node.value < next.value) {\n          if (next.balance < 0) {\n            next.balance -= 1;\n\n            _rebalance(next);\n\n            break;\n          } else {\n            if (next.balance > 0) {\n              next.balance -= 1;\n              break;\n            }\n\n            next.balance -= 1;\n          }\n        } else {\n          if (next.balance > 0) {\n            next.balance += 1;\n\n            _rebalance(next);\n\n            break;\n          } else {\n            if (next.balance < 0) {\n              next.balance += 1;\n              break;\n            }\n\n            next.balance += 1;\n          }\n        }\n\n        node = next;\n      }\n    }\n  }\n\n  function _delete(node, parent) {\n    var child = node.right != null ? node.right : node.left;\n\n    if (parent != null) {\n      if (parent.value > node.value) {\n        parent.left = child;\n      } else {\n        parent.right = child;\n      }\n    } else {\n      _rootNode = child;\n    }\n  }\n\n  function _swap(node1, node2) {\n    var value = node1.value;\n    node1.value = node2.value;\n    node2.value = value;\n    var context = node1.context;\n    node1.context = node2.context;\n    node2.context = context;\n  }\n\n  function _copy(fromNode, toNode) {\n    toNode.value = fromNode.value;\n    toNode.context = fromNode.context;\n  }\n  /**\n   * Removes value from the sorted list\n   * @param {number} value The removed value \n   */\n\n\n  function remove(value) {\n    var trace = [];\n    var node = _rootNode;\n\n    while (node != null) {\n      if (node.value == value) {\n        if (node.right != null && node.left != null) {\n          trace.push(node);\n          var next = node.right;\n\n          while (next.left != null) {\n            trace.push(next);\n            next = next.left;\n          }\n\n          _copy(next, node);\n\n          _delete(next, trace[trace.length - 1]);\n\n          trace.push(next);\n        } else {\n          _delete(node, trace[trace.length - 1]);\n\n          trace.push(node);\n        }\n\n        for (var index = trace.length - 2; index >= 0; index -= 1) {\n          var parent = trace[index];\n          node = trace[index + 1];\n\n          if (parent.value > node.value) {\n            if (parent.balance > 0) {\n              parent.balance += 1;\n\n              if (_rebalance(parent) === 0) {\n                break;\n              }\n            } else {\n              if (parent.balance === 0) {\n                parent.balance += 1;\n                break;\n              }\n\n              parent.balance += 1;\n            }\n          } else {\n            if (parent.balance < 0) {\n              parent.balance -= 1;\n\n              if (_rebalance(parent) === 0) {\n                break;\n              }\n            } else {\n              if (parent.balance === 0) {\n                parent.balance -= 1;\n                break;\n              }\n\n              parent.balance -= 1;\n            }\n          }\n        }\n\n        break;\n      } else {\n        trace.push(node);\n\n        if (node.value > value) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      }\n    }\n  }\n  /**\n   * Returns context object of the next value following the given one\n   * @param {number} fromValue The value to start search from\n   * @returns {object} Returns context object of the first value in sorted list greater than the start value.\n   */\n\n\n  function nextContext(fromValue) {\n    var result = null;\n    loopForward(this, fromValue, function (value, context) {\n      result = context;\n      return true;\n    });\n    return result;\n  }\n  /**\n   * Callback function for iterating values of the sorted list\n   * \n   * @callback onSortedListItemCallback\n   * @param {number} value The value\n   * @param {object} context The value context object\n   * @returns {boolean} Returns true to break loop operation  \n   */\n\n  /**\n   * Loops sorted list values\n   * @param {object} thisArg The callback function invocation context \n   * @param {number} fromValue The start value to loop items of sorted list\n   * @param {onSortedListItemCallback} onItem Callback function to iterate over sorted list values\n   */\n\n\n  function loopForward(thisArg, fromValue, onItem) {\n    //function onItem(value, context)\n    if (onItem != null) {\n      var trace = [];\n      var node = null;\n      var next = _rootNode;\n\n      while (next != null) {\n        node = next;\n\n        if (node.value >= fromValue || fromValue == null) {\n          trace.push(node);\n          next = node.left;\n        } else {\n          next = node.right;\n        }\n      }\n\n      while ((node = trace.pop()) != null) {\n        if (onItem.call(thisArg, node.value, node.context)) {\n          return;\n        }\n\n        next = node.right;\n\n        while (next != null) {\n          node = next;\n\n          if (node.left != null) {\n            trace.push(node);\n            next = node.left;\n          } else {\n            if (onItem.call(thisArg, node.value, node.context)) {\n              return;\n            }\n\n            next = node.right;\n          }\n        }\n      }\n    }\n  }\n  /**\n   * Returns context object of the previous value preceding the given one\n   * @param {number} fromValue The value to start search from\n   * @returns {object} Returns context object of the first value in sorted list less than the start value.\n   */\n\n\n  function previousContext(fromValue) {\n    var result = null;\n    loopBackward(this, fromValue, function (nextValue, context) {\n      result = context;\n      return true;\n    });\n    return result;\n  }\n  /**\n   * Loops sorted list values backward\n   * @param {object} thisArg The callback function invocation context \n   * @param {number} fromValue The start value to loop items of sorted list\n   * @param {onSortedListItemCallback} onItem Callback function to iterate over sorted list values\n   */\n\n\n  function loopBackward(thisArg, fromValue, onItem) {\n    if (onItem != null) {\n      var trace = [];\n      var node = null;\n      var next = _rootNode;\n\n      while (next != null) {\n        node = next;\n\n        if (node.value <= fromValue || fromValue == null) {\n          trace.push(node);\n          next = node.right;\n        } else {\n          next = node.left;\n        }\n      }\n\n      while ((node = trace.pop()) != null) {\n        if (onItem.call(thisArg, node.value, node.context)) {\n          return;\n        }\n\n        next = node.left;\n\n        while (next != null) {\n          node = next;\n\n          if (node.right != null) {\n            trace.push(node);\n            next = node.right;\n          } else {\n            if (onItem.call(thisArg, node.value, node.context)) {\n              return;\n            }\n\n            next = node.left;\n          }\n        }\n      }\n    }\n  }\n\n  function _getValidationDepth(node) {\n    var level = [],\n        result = 0;\n\n    if (node != null) {\n      level.push(node);\n\n      while (level.length > 0) {\n        var newLevel = [];\n\n        for (var index = 0; index < level.length; index += 1) {\n          node = level[index];\n\n          if (node.left != null) {\n            newLevel.push(node.left);\n          }\n\n          if (node.right != null) {\n            newLevel.push(node.right);\n          }\n        }\n\n        level = newLevel;\n        result += 1;\n      }\n    }\n\n    return result;\n  }\n  /**\n   * Validate internal data consistency of the self-balancing binary search tree structure\n   * \n   * @returns {boolean} Returns true if structure pass validation\n   */\n\n\n  function validate() {\n    if (_rootNode != null) {\n      var level = [_rootNode];\n\n      while (level.length > 0) {\n        var newLevel = [];\n\n        for (var index = 0; index < level.length; index += 1) {\n          var node = level[index];\n\n          if (node.value == null) {\n            return false;\n          }\n\n          if (node.left != null) {\n            newLevel.push(node.left);\n\n            if (node.left.value >= node.value) {\n              return false;\n            }\n          }\n\n          if (node.right != null) {\n            newLevel.push(node.right);\n\n            if (node.right.value <= node.value) {\n              return false;\n            }\n          }\n\n          if (node.balance != _getValidationDepth(node.right) - _getValidationDepth(node.left)) {\n            // eslint-disable-next-line no-console\n            console.log(\"Disbalanced node: \" + node.value + \" - \" + JSON.stringify(_rootNode));\n            return false;\n          }\n        }\n\n        level = newLevel;\n      }\n    }\n\n    return true;\n  }\n\n  return {\n    add: add,\n    remove: remove,\n    loopForward: loopForward,\n    loopBackward: loopBackward,\n    nextContext: nextContext,\n    previousContext: previousContext,\n    validate: validate\n  };\n}\n;","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/algorithms/SortedList.js"],"names":["SortedList","_rootNode","Node","value","context","left","right","balance","_rebalance","node","_rotateSmallLeft","_rotateBigLeft","_rotateSmallRight","_rotateBigRight","parent","_rotateLeft","_swap","_rotateRight","bottom","add","thisArg","onDuplicate","trace","next","push","call","newNode","pop","_delete","child","node1","node2","_copy","fromNode","toNode","remove","length","index","nextContext","fromValue","result","loopForward","onItem","previousContext","loopBackward","nextValue","_getValidationDepth","level","newLevel","validate","console","log","JSON","stringify"],"mappings":"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","sourcesContent":["/**\n * Creates self-balancing binary search tree structure.\n * @class SortedList\n * \n * @returns {SortedList} Returns sorted list collection. \n */\nexport default function SortedList() {\n  var _rootNode = null;\n\n  function Node(value, context) {\n    this.value = value;\n    this.context = context;\n\n    this.left = null;\n    this.right = null;\n\n    this.balance = 0;\n  }\n\n  function _rebalance(node) {\n    var balance;\n    if (node.balance == 2) {\n      var right = node.right;\n      balance = right.balance;\n      if (balance >= 0) {\n        _rotateSmallLeft(right, node);\n      } else {\n        _rotateBigLeft(right, node);\n      }\n    } else if (node.balance == -2) {\n      var left = node.left;\n      balance = left.balance;\n      if (balance <= 0) {\n        _rotateSmallRight(node.left, node);\n      } else {\n        _rotateBigRight(node.left, node);\n      }\n    }\n    return balance;\n  }\n\n  function _rotateSmallLeft(node, parent) {\n    _rotateLeft(node, parent);\n\n    if (node.balance == 1) {\n      parent.balance = 0;\n      node.balance = 0;\n    } else {\n      parent.balance = -1;\n      node.balance = 1;\n    }\n  }\n\n  function _rotateLeft(node, parent) {\n    _swap(node, parent);\n    parent.right = node.right;\n    node.right = node.left;\n    node.left = parent.left;\n    parent.left = node;\n  }\n\n  function _rotateSmallRight(node, parent) {\n    _rotateRight(node, parent);\n\n    if (node.balance == -1) {\n      parent.balance = 0;\n      node.balance = 0;\n    } else {\n      parent.balance = 1;\n      node.balance = -1;\n    }\n  }\n\n  function _rotateRight(node, parent) {\n    _swap(node, parent);\n    parent.left = node.left;\n    node.left = node.right;\n    node.right = parent.right;\n    parent.right = node;\n  }\n\n  function _rotateBigLeft(node, parent) {\n    var bottom = node.left;\n    _rotateRight(bottom, node);\n    _rotateLeft(node, parent);\n\n    parent.balance = 0;\n    switch (bottom.balance) {\n      case 1:\n        node.balance = -1;\n        bottom.balance = 0;\n        break;\n      case 0:\n        bottom.balance = 0;\n        node.balance = 0;\n        break;\n      default:\n        bottom.balance = 1;\n        node.balance = 0;\n        break;\n    }\n  }\n\n  function _rotateBigRight(node, parent) {\n    var bottom = node.right;\n    _rotateLeft(bottom, node);\n    _rotateRight(node, parent);\n\n    parent.balance = 0;\n    switch (bottom.balance) {\n      case -1:\n        bottom.balance = 0;\n        node.balance = 1;\n        break;\n      case 0:\n        bottom.balance = 0;\n        node.balance = 0;\n        break;\n      default:\n        bottom.balance = -1;\n        node.balance = 0;\n        break;\n    }\n  }\n\n  /**\n   * Callback function to notify about duplicate values\n   * \n   * @callback onSortedListDuplicateCallback\n   * @param {object} context The context object of the duplicate value\n   */\n\n  /**\n   * Adds value to sorted list collection\n   * @param {number} value The value \n   * @param {object} context The value context object\n   * @param {object} thisArg The callback function invocation context \n   * @param {onSortedListDuplicateCallback} onDuplicate Callback function for duplicates values notification\n   */\n  function add(value, context, thisArg, onDuplicate) {\n    if (_rootNode == null) {\n      _rootNode = new Node(value, context);\n    } else {\n      var trace = [];\n      var node = null;\n      var next = _rootNode;\n      while (next != null) {\n        if (node != null) {\n          trace.push(node);\n        }\n        node = next;\n        if (node.value == value) {\n          if (onDuplicate != null) {\n            onDuplicate.call(thisArg, node.context);\n          } else {\n            throw \"Structure does not support duplicates.\";\n          }\n        } else {\n          if (node.value > value) {\n            next = node.left;\n          } else {\n            next = node.right;\n          }\n        }\n      }\n      trace.push(node);\n      var newNode = new Node(value, context);\n      if (node.value > value) {\n        node.left = newNode;\n      } else {\n        node.right = newNode;\n      }\n      node = newNode;\n\n      while ((next = trace.pop()) != null) {\n        if (node.value < next.value) {\n          if (next.balance < 0) {\n            next.balance -= 1;\n            _rebalance(next);\n            break;\n          } else {\n            if (next.balance > 0) {\n              next.balance -= 1;\n              break;\n            }\n            next.balance -= 1;\n          }\n        } else {\n          if (next.balance > 0) {\n            next.balance += 1;\n            _rebalance(next);\n            break;\n          } else {\n            if (next.balance < 0) {\n              next.balance += 1;\n              break;\n            }\n            next.balance += 1;\n          }\n        }\n        node = next;\n      }\n    }\n  }\n\n  function _delete(node, parent) {\n    var child = node.right != null ? node.right : node.left;\n    if (parent != null) {\n      if (parent.value > node.value) {\n        parent.left = child;\n      } else {\n        parent.right = child;\n      }\n    } else {\n      _rootNode = child;\n    }\n  }\n\n  function _swap(node1, node2) {\n    var value = node1.value;\n    node1.value = node2.value;\n    node2.value = value;\n\n    var context = node1.context;\n    node1.context = node2.context;\n    node2.context = context;\n  }\n\n  function _copy(fromNode, toNode) {\n    toNode.value = fromNode.value;\n    toNode.context = fromNode.context;\n  }\n\n  /**\n   * Removes value from the sorted list\n   * @param {number} value The removed value \n   */\n  function remove(value) {\n    var trace = [];\n    var node = _rootNode;\n    while (node != null) {\n      if (node.value == value) {\n        if (node.right != null && node.left != null) {\n          trace.push(node);\n          var next = node.right;\n          while (next.left != null) {\n            trace.push(next);\n            next = next.left;\n          }\n          _copy(next, node);\n          _delete(next, trace[trace.length - 1]);\n          trace.push(next);\n        } else {\n          _delete(node, trace[trace.length - 1]);\n          trace.push(node);\n        }\n        for (var index = trace.length - 2; index >= 0; index -= 1) {\n          var parent = trace[index];\n          node = trace[index + 1];\n          if (parent.value > node.value) {\n            if (parent.balance > 0) {\n              parent.balance += 1;\n              if (_rebalance(parent) === 0) {\n                break;\n              }\n            } else {\n              if (parent.balance === 0) {\n                parent.balance += 1;\n                break;\n              }\n              parent.balance += 1;\n            }\n          } else {\n            if (parent.balance < 0) {\n              parent.balance -= 1;\n              if (_rebalance(parent) === 0) {\n                break;\n              }\n            } else {\n              if (parent.balance === 0) {\n                parent.balance -= 1;\n                break;\n              }\n              parent.balance -= 1;\n            }\n          }\n        }\n        break;\n      } else {\n        trace.push(node);\n        if (node.value > value) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      }\n    }\n  }\n\n  /**\n   * Returns context object of the next value following the given one\n   * @param {number} fromValue The value to start search from\n   * @returns {object} Returns context object of the first value in sorted list greater than the start value.\n   */\n  function nextContext(fromValue) {\n    var result = null;\n    loopForward(this, fromValue, function (value, context) {\n      result = context;\n      return true;\n    });\n    return result;\n  }\n\n  /**\n   * Callback function for iterating values of the sorted list\n   * \n   * @callback onSortedListItemCallback\n   * @param {number} value The value\n   * @param {object} context The value context object\n   * @returns {boolean} Returns true to break loop operation  \n   */\n\n  /**\n   * Loops sorted list values\n   * @param {object} thisArg The callback function invocation context \n   * @param {number} fromValue The start value to loop items of sorted list\n   * @param {onSortedListItemCallback} onItem Callback function to iterate over sorted list values\n   */\n  function loopForward(thisArg, fromValue, onItem) { //function onItem(value, context)\n    if (onItem != null) {\n      var trace = [];\n      var node = null;\n      var next = _rootNode;\n      while (next != null) {\n        node = next;\n        if (node.value >= fromValue || fromValue == null) {\n          trace.push(node);\n          next = node.left;\n        } else {\n          next = node.right;\n        }\n      }\n      while ((node = trace.pop()) != null) {\n        if (onItem.call(thisArg, node.value, node.context)) {\n          return;\n        }\n        next = node.right;\n        while (next != null) {\n          node = next;\n          if (node.left != null) {\n            trace.push(node);\n            next = node.left;\n          } else {\n            if (onItem.call(thisArg, node.value, node.context)) {\n              return;\n            }\n            next = node.right;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Returns context object of the previous value preceding the given one\n   * @param {number} fromValue The value to start search from\n   * @returns {object} Returns context object of the first value in sorted list less than the start value.\n   */\n  function previousContext(fromValue) {\n    var result = null;\n    loopBackward(this, fromValue, function (nextValue, context) {\n      result = context;\n      return true;\n    });\n    return result;\n  }\n\n  /**\n   * Loops sorted list values backward\n   * @param {object} thisArg The callback function invocation context \n   * @param {number} fromValue The start value to loop items of sorted list\n   * @param {onSortedListItemCallback} onItem Callback function to iterate over sorted list values\n   */\n  function loopBackward(thisArg, fromValue, onItem) {\n    if (onItem != null) {\n      var trace = [];\n      var node = null;\n      var next = _rootNode;\n      while (next != null) {\n        node = next;\n        if (node.value <= fromValue || fromValue == null) {\n          trace.push(node);\n          next = node.right;\n        } else {\n          next = node.left;\n        }\n      }\n      while ((node = trace.pop()) != null) {\n        if (onItem.call(thisArg, node.value, node.context)) {\n          return;\n        }\n        next = node.left;\n        while (next != null) {\n          node = next;\n          if (node.right != null) {\n            trace.push(node);\n            next = node.right;\n          } else {\n            if (onItem.call(thisArg, node.value, node.context)) {\n              return;\n            }\n            next = node.left;\n          }\n        }\n      }\n    }\n  }\n\n  function _getValidationDepth(node) {\n    var level = [],\n      result = 0;\n    if (node != null) {\n      level.push(node);\n      while (level.length > 0) {\n        var newLevel = [];\n\n        for (var index = 0; index < level.length; index += 1) {\n          node = level[index];\n\n          if (node.left != null) {\n            newLevel.push(node.left);\n          }\n\n          if (node.right != null) {\n            newLevel.push(node.right);\n          }\n        }\n\n        level = newLevel;\n        result += 1;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Validate internal data consistency of the self-balancing binary search tree structure\n   * \n   * @returns {boolean} Returns true if structure pass validation\n   */\n  function validate() {\n    if (_rootNode != null) {\n      var level = [_rootNode];\n      while (level.length > 0) {\n        var newLevel = [];\n\n        for (var index = 0; index < level.length; index += 1) {\n          var node = level[index];\n\n          if (node.value == null) {\n            return false;\n          }\n\n          if (node.left != null) {\n            newLevel.push(node.left);\n            if (node.left.value >= node.value) {\n              return false;\n            }\n          }\n\n          if (node.right != null) {\n            newLevel.push(node.right);\n            if (node.right.value <= node.value) {\n              return false;\n            }\n          }\n\n          if (node.balance != (_getValidationDepth(node.right) - _getValidationDepth(node.left))) {\n            // eslint-disable-next-line no-console\n            console.log(\"Disbalanced node: \" + node.value + \" - \" + JSON.stringify(_rootNode));\n            return false;\n          }\n        }\n\n        level = newLevel;\n      }\n    }\n    return true;\n  }\n\n  return {\n    add: add,\n    remove: remove,\n    loopForward: loopForward,\n    loopBackward: loopBackward,\n    nextContext: nextContext,\n    previousContext: previousContext,\n    validate: validate\n  };\n};"]},"metadata":{},"sourceType":"module"}