{"ast":null,"code":"/**\n * Indicates whether the specified number is even or not.\n * \n * @param {number} value The number to test.\n * @returns {boolean} Returns true if the value is even.\n * @ignore\n */\nexport function isEven(value) {\n  return value % 2 == 0;\n}\n;\n/**\n * Indicates whether the specified string is null or an Empty string.\n * \n * @ignore\n * @param {string} value The string to test.\n * @returns {boolean} Returns true if the value is null or an empty string(\"\"); otherwise, false.\n */\n\nexport function isNullOrEmpty(value) {\n  var result = true,\n      string;\n\n  if (value !== undefined && value !== null) {\n    string = value.toString();\n\n    if (string.length > 0) {\n      result = false;\n    }\n  }\n\n  return result;\n}\n;\n/**\n * Callback for looping collection items\n *\n * @callback onLoopItemCallback\n * @param {number} index An index of the collection item\n * @param {Object} item A collection item\n * @returns {boolean} Returns true to break iteration process\n */\n\n/**\n * Loops array elements or object properties.\n *\n * @param {Object} thisArg The callback function invocation context\n * @param {Object|Object[]} items - Array of items or object with properties to iterate on\n * @param {onLoopItemCallback} onItem A call back function to call on each item in the array or object.\n * @ignore\n */\n\nexport function loop(thisArg, items, onItem) {\n  var key, index, len;\n\n  if (onItem != null) {\n    if (Array.isArray(items)) {\n      for (index = 0, len = items.length; index < len; index += 1) {\n        if (onItem.call(thisArg, index, items[index])) {\n          break;\n        }\n      }\n    } else {\n      for (key in items) {\n        if (items.hasOwnProperty(key)) {\n          if (onItem.call(thisArg, key, items[key])) {\n            break;\n          }\n        }\n      }\n    }\n  }\n}\n;\n/**\n * Splits string of merged cameled words into array.\n * \n * @param {string} name String of cameled words\n * @returns {string[]} Returns array of cameled words\n * @ignore\n */\n\nexport function splitCamelCaseName(name) {\n  var result = [];\n  var word = \"\";\n\n  for (var i = 0; i < name.length; i += 1) {\n    var c = name[i];\n\n    if (c >= 'A' && c <= 'Z') {\n      if (word !== \"\") {\n        result.push(word);\n      }\n\n      word = c;\n    } else {\n      word += c;\n    }\n  }\n\n  if (word !== \"\") {\n    result.push(word);\n  }\n\n  return result;\n}\n;\n/**\n * Indicates whether the specified value is object\n * \n * @param {string} item The value to test.\n * @returns {boolean} Returns true if the item is object otherwise, false.\n * @ignore\n */\n\nexport function isObject(item) {\n  return item !== null && typeof item == 'object';\n}\n;\n/**\n * Indicates whether the specified object is empty.\n * \n * @param {string} item The object to test.\n * @returns {boolean} Returns true if the item is empty object otherwise, false.\n * @ignore\n */\n\nexport function isEmptyObject(item) {\n  var key;\n\n  for (key in item) {\n    if (item.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n;\n/**\n * Makes deep copy of the object.\n * \n * @param {object} source The source object to take values from\n * @param {boolean} isShallow If true then method makes shallow copy\n * @returns {object} Returns cloned copy of the object\n * @ignore\n */\n\nexport function cloneObject(source, isShallow) {\n  var result;\n\n  if (source === null) {\n    result = null;\n  } else if (Array.isArray(source)) {\n    if (isShallow) {\n      result = source.slice(0);\n    } else {\n      result = [];\n\n      for (var index = 0, len = source.length; index < len; index += 1) {\n        result.push(cloneObject(source[index], isShallow));\n      }\n    }\n  } else {\n    switch (typeof source) {\n      case 'object':\n        result = {};\n\n        for (var property in source) {\n          if (source.hasOwnProperty(property)) {\n            if (isShallow) {\n              result[property] = source[property];\n            } else {\n              result[property] = cloneObject(source[property], isShallow);\n            }\n          }\n        }\n\n        break;\n\n      default:\n        result = source;\n        break;\n    }\n  }\n\n  return result;\n}\n;\n/**\n * Shallow copy of source object properites into destination\n * \n * @param {object} destination The object to add properties to\n * @param {object} source The source object to take values from\n * @returns {object} Returns reference to destination object\n * @ignore\n */\n\nexport function mergeObjects(destination, source) {\n  for (var index = 1; index < arguments.length; index += 1) {\n    var src = arguments[index];\n\n    if (src !== undefined) {\n      for (var key in src) {\n        if (src.hasOwnProperty(key)) {\n          destination[key] = src[key];\n        }\n      }\n    }\n  }\n\n  return destination;\n}\n;\n/**\n * Returns hash code for specified string value. This function is not needed because \n * JavaScript supports near unlimited length of object property names.\n * \n * @param {string} value The string to calculate hash code for.\n * @returns {number} Returns hash code for the given string\n * @ignore\n */\n\nexport function getHashCode(value) {\n  var hash = 0,\n      character,\n      i;\n  /*ignore jslint start*/\n\n  if (value.length > 0) {\n    for (i = 0; i < value.length; i += 1) {\n      character = value.charCodeAt(i);\n      hash = (hash << 5) - hash + character;\n      hash = hash & hash;\n    }\n  }\n  /*ignore jslint end*/\n\n\n  return hash;\n}\n;\n/**\n * Callback for getting item key for an element of the array\n *\n * @callback getKeyFuncCallback\n * @param {Object} item A collection item\n * @returns {number} Returns key of the item \n */\n\n/**\n * Compares non-sorted arrays.\n *\n * @param {Object[]} array1 - The first collection of elements.\n * @param {Object[]} array2 - The second collection of elements.\n * @param {getKeyFuncCallback|undefined} getKeyFunc If callback function is defined it is used to get a key for an array element\n * @returns {boolean} Returns true if the arrays are identical.\n */\n\nexport function compareArrays(array1, array2, getKeyFunc) {\n  var result = true,\n      index,\n      len,\n      value,\n      hashArray1;\n\n  if (array1.length != array2.length) {\n    result = false;\n  } else {\n    hashArray1 = {};\n\n    for (index = 0, len = array1.length; index < len; index += 1) {\n      value = getKeyFunc != null ? getKeyFunc(array1[index]) : array1[index];\n\n      if (hashArray1.hasOwnProperty(value)) {\n        hashArray1[value] += 1;\n      } else {\n        hashArray1[value] = 1;\n      }\n    }\n\n    for (index = 0, len = array2.length; index < len; index += 1) {\n      value = getKeyFunc != null ? getKeyFunc(array2[index]) : array2[index];\n\n      if (!hashArray1.hasOwnProperty(value)) {\n        result = false;\n        break;\n      } else {\n        hashArray1[value] -= 1;\n\n        if (hashArray1[value] < 0) {\n          result = false;\n          break;\n        }\n      }\n    }\n  }\n\n  return result;\n}\n;","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/common/index.js"],"names":["isEven","value","isNullOrEmpty","result","string","undefined","toString","length","loop","thisArg","items","onItem","key","index","len","Array","isArray","call","hasOwnProperty","splitCamelCaseName","name","word","i","c","push","isObject","item","isEmptyObject","cloneObject","source","isShallow","slice","property","mergeObjects","destination","arguments","src","getHashCode","hash","character","charCodeAt","compareArrays","array1","array2","getKeyFunc","hashArray1"],"mappings":"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","sourcesContent":["/**\n * Indicates whether the specified number is even or not.\n * \n * @param {number} value The number to test.\n * @returns {boolean} Returns true if the value is even.\n * @ignore\n */\nexport function isEven(value) {\n    return value % 2 == 0;\n};\n  \n/**\n * Indicates whether the specified string is null or an Empty string.\n * \n * @ignore\n * @param {string} value The string to test.\n * @returns {boolean} Returns true if the value is null or an empty string(\"\"); otherwise, false.\n */\nexport function isNullOrEmpty(value) {\n    var result = true,\n        string;\n    if (value !== undefined && value !== null) {\n        string = value.toString();\n        if (string.length > 0) {\n        result = false;\n        }\n    }\n    return result;\n};\n\n\n/**\n * Callback for looping collection items\n *\n * @callback onLoopItemCallback\n * @param {number} index An index of the collection item\n * @param {Object} item A collection item\n * @returns {boolean} Returns true to break iteration process\n */\n\n/**\n * Loops array elements or object properties.\n *\n * @param {Object} thisArg The callback function invocation context\n * @param {Object|Object[]} items - Array of items or object with properties to iterate on\n * @param {onLoopItemCallback} onItem A call back function to call on each item in the array or object.\n * @ignore\n */\nexport function loop(thisArg, items, onItem) {\nvar key, index, len;\nif (onItem != null) {\n    if (Array.isArray(items)) {\n    for (index = 0, len = items.length; index < len; index += 1) {\n        if (onItem.call(thisArg, index, items[index])) {\n        break;\n        }\n    }\n    } else {\n    for (key in items) {\n        if (items.hasOwnProperty(key)) {\n        if (onItem.call(thisArg, key, items[key])) {\n            break;\n        }\n        }\n    }\n    }\n}\n};\n\n/**\n * Splits string of merged cameled words into array.\n * \n * @param {string} name String of cameled words\n * @returns {string[]} Returns array of cameled words\n * @ignore\n */\nexport function splitCamelCaseName(name) {\n    var result = [];\n    var word = \"\";\n    for (var i = 0; i < name.length; i += 1) {\n        var c = name[i];\n        if (c >= 'A' && c <= 'Z') {\n        if (word !== \"\") {\n            result.push(word);\n        }\n        word = c;\n        } else {\n        word += c;\n        }\n    }\n    if (word !== \"\") {\n        result.push(word);\n    }\n    return result;\n};\n\n/**\n * Indicates whether the specified value is object\n * \n * @param {string} item The value to test.\n * @returns {boolean} Returns true if the item is object otherwise, false.\n * @ignore\n */\nexport function isObject(item) {\n    return item !== null && typeof item == 'object';\n};\n\n/**\n * Indicates whether the specified object is empty.\n * \n * @param {string} item The object to test.\n * @returns {boolean} Returns true if the item is empty object otherwise, false.\n * @ignore\n */\nexport function isEmptyObject(item) {\n    var key;\n    for (key in item) {\n        if (item.hasOwnProperty(key)) {\n        return false;\n        }\n    }\n    return true;\n};\n\n/**\n * Makes deep copy of the object.\n * \n * @param {object} source The source object to take values from\n * @param {boolean} isShallow If true then method makes shallow copy\n * @returns {object} Returns cloned copy of the object\n * @ignore\n */\nexport function cloneObject(source, isShallow) {\n    var result;\n    if (source === null) {\n        result = null;\n    } else if (Array.isArray(source)) {\n        if (isShallow) {\n        result = source.slice(0);\n        } else {\n        result = [];\n        for (var index = 0, len = source.length; index < len; index += 1) {\n            result.push(cloneObject(source[index], isShallow));\n        }\n        }\n    } else {\n        switch (typeof source) {\n        case 'object':\n            result = {};\n            for (var property in source) {\n            if (source.hasOwnProperty(property)) {\n                if (isShallow) {\n                result[property] = source[property];\n                } else {\n                result[property] = cloneObject(source[property], isShallow);\n                }\n            }\n            }\n            break;\n        default:\n            result = source;\n            break;\n        }\n    }\n    return result;\n};\n\n/**\n * Shallow copy of source object properites into destination\n * \n * @param {object} destination The object to add properties to\n * @param {object} source The source object to take values from\n * @returns {object} Returns reference to destination object\n * @ignore\n */\nexport function mergeObjects(destination, source) {\n    for (var index = 1; index < arguments.length; index += 1) {\n        var src = arguments[index];\n        if (src !== undefined) {\n            for (var key in src) {\n                if (src.hasOwnProperty(key)) {\n                    destination[key] = src[key];\n                }\n            }\n        }\n    }\n    return destination;\n};\n\n/**\n * Returns hash code for specified string value. This function is not needed because \n * JavaScript supports near unlimited length of object property names.\n * \n * @param {string} value The string to calculate hash code for.\n * @returns {number} Returns hash code for the given string\n * @ignore\n */\nexport function getHashCode(value) {\n    var hash = 0,\n        character,\n        i;\n    /*ignore jslint start*/\n    if (value.length > 0) {\n        for (i = 0; i < value.length; i += 1) {\n        character = value.charCodeAt(i);\n        hash = ((hash << 5) - hash) + character;\n        hash = hash & hash;\n        }\n    }\n    /*ignore jslint end*/\n    return hash;\n};\n\n\n/**\n * Callback for getting item key for an element of the array\n *\n * @callback getKeyFuncCallback\n * @param {Object} item A collection item\n * @returns {number} Returns key of the item \n */\n\n/**\n * Compares non-sorted arrays.\n *\n * @param {Object[]} array1 - The first collection of elements.\n * @param {Object[]} array2 - The second collection of elements.\n * @param {getKeyFuncCallback|undefined} getKeyFunc If callback function is defined it is used to get a key for an array element\n * @returns {boolean} Returns true if the arrays are identical.\n */\nexport function compareArrays(array1, array2, getKeyFunc) {\n    var result = true,\n        index, len, value,\n        hashArray1;\n    if (array1.length != array2.length) {\n        result = false;\n    } else {\n        hashArray1 = {};\n        for (index = 0, len = array1.length; index < len; index += 1) {\n        value = getKeyFunc != null ? getKeyFunc(array1[index]) : array1[index];\n        if (hashArray1.hasOwnProperty(value)) {\n            hashArray1[value] += 1;\n        } else {\n            hashArray1[value] = 1;\n        }\n        }\n        for (index = 0, len = array2.length; index < len; index += 1) {\n        value = getKeyFunc != null ? getKeyFunc(array2[index]) : array2[index];\n        if (!hashArray1.hasOwnProperty(value)) {\n            result = false;\n            break;\n        } else {\n            hashArray1[value] -= 1;\n            if (hashArray1[value] < 0) {\n            result = false;\n            break;\n            }\n        }\n        }\n    }\n    return result;\n};"]},"metadata":{},"sourceType":"module"}