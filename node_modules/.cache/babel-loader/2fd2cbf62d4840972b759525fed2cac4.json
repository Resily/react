{"ast":null,"code":"import Thickness from '../graphics/structs/Thickness';\nimport { AnnotationType, LineType, Colors } from '../enums';\n/**\n * @class LevelAnnotationConfig\n * @classdesc Level annotation highlights same level nodes of the diagram via drawing continuous rectangular shape \n * from side to side in their background. Stripe has optional title on the side of the diagram view area.\n * Title may be placed inside or outside of the diagram. If it is placed inside, it is drawn in the \n * background and does not occupy space. \n *\n * @param {object} arg0 Object properties.\n */\n\nexport default function LevelAnnotationConfig(arg0) {\n  var property;\n  /**\n   * Annotation type. All types of annotations objects are added to `annotations` collection property of the control.\n   * This property is needed to distinguish them when they are defined as a type less JSON objects.\n   * \n   * @type {AnnotationType}\n   */\n\n  this.annotationType = AnnotationType.Level;\n  /**\n   * Collection of levels this level annotation is drawn for.\n   * \n   * @type {string[]}\n   */\n\n  this.levels = [];\n  /**\n   * Level Title.\n   * \n   * @type {string}\n   */\n\n  this.title = null;\n  /**\n   * Title font color.\n   * \n   * @type {string}\n   */\n\n  this.titleFontColor = null;\n  /**\n   * The level title background color.\n   * \n   * @type {string}\n   */\n\n  this.titleColor = null;\n  /**\n   * Sets background offset relative to default position.\n   * \n   * @type {Thickness}\n   */\n\n  this.offset = new Thickness(0, 0, 0, 0);\n  /**\n   * Background stripe border line width. Use {Thickness} to set border width individually per side.\n   * \n   * @type {Thickness}\n   */\n\n  this.lineWidth = new Thickness(0, 0, 0, 0);\n  /**\n   * Background color opacity.\n   * \n   * @type {number}\n   */\n\n  this.opacity = 1;\n  /**\n   * Background stripe border line color\n   * \n   * @type {string}\n   */\n\n  this.borderColor = null;\n  /**\n   * Background stripe fill Color.\n   * \n   * @type {string}\n   */\n\n  this.fillColor = \"#D4D4D4\";\n  /**\n   * Background stripe border line type\n   * \n   * @type {LineType}\n   */\n\n  this.lineType = LineType.Solid;\n\n  switch (arguments.length) {\n    case 1:\n      if (arg0 !== null) {\n        if (arg0 instanceof Array) {\n          this.items = arg0;\n        } else if (typeof arg0 == \"object\") {\n          for (property in arg0) {\n            if (arg0.hasOwnProperty(property)) {\n              this[property] = arg0[property];\n            }\n          }\n        }\n      }\n\n      break;\n  }\n}\n;","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/configs/LevelAnnotationConfig.js"],"names":["Thickness","AnnotationType","LineType","Colors","LevelAnnotationConfig","arg0","property","annotationType","Level","levels","title","titleFontColor","titleColor","offset","lineWidth","opacity","borderColor","fillColor","lineType","Solid","arguments","length","Array","items","hasOwnProperty"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,+BAAtB;AACA,SAASC,cAAT,EAAyBC,QAAzB,EAAmCC,MAAnC,QAAiD,UAAjD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,qBAAT,CAA+BC,IAA/B,EAAqC;AAClD,MAAIC,QAAJ;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,cAAL,GAAsBN,cAAc,CAACO,KAArC;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKC,MAAL,GAAc,EAAd;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKC,KAAL,GAAa,IAAb;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKC,cAAL,GAAsB,IAAtB;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKC,UAAL,GAAkB,IAAlB;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKC,MAAL,GAAc,IAAIb,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,CAAd;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKc,SAAL,GAAiB,IAAId,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,CAAjB;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKe,OAAL,GAAe,CAAf;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKC,WAAL,GAAmB,IAAnB;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKC,SAAL,GAAiB,SAAjB;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKC,QAAL,GAAgBhB,QAAQ,CAACiB,KAAzB;;AAEA,UAAQC,SAAS,CAACC,MAAlB;AACE,SAAK,CAAL;AACE,UAAIhB,IAAI,KAAK,IAAb,EAAmB;AACjB,YAAIA,IAAI,YAAYiB,KAApB,EAA2B;AACzB,eAAKC,KAAL,GAAalB,IAAb;AACD,SAFD,MAEO,IAAI,OAAOA,IAAP,IAAe,QAAnB,EAA6B;AAClC,eAAKC,QAAL,IAAiBD,IAAjB,EAAuB;AACrB,gBAAIA,IAAI,CAACmB,cAAL,CAAoBlB,QAApB,CAAJ,EAAmC;AACjC,mBAAKA,QAAL,IAAiBD,IAAI,CAACC,QAAD,CAArB;AACD;AACF;AACF;AACF;;AACD;AAbJ;AAeD;AAAA","sourcesContent":["import Thickness from '../graphics/structs/Thickness';\nimport { AnnotationType, LineType, Colors } from '../enums';\n\n/**\n * @class LevelAnnotationConfig\n * @classdesc Level annotation highlights same level nodes of the diagram via drawing continuous rectangular shape \n * from side to side in their background. Stripe has optional title on the side of the diagram view area.\n * Title may be placed inside or outside of the diagram. If it is placed inside, it is drawn in the \n * background and does not occupy space. \n *\n * @param {object} arg0 Object properties.\n */\nexport default function LevelAnnotationConfig(arg0) {\n  var property;\n\n  /**\n   * Annotation type. All types of annotations objects are added to `annotations` collection property of the control.\n   * This property is needed to distinguish them when they are defined as a type less JSON objects.\n   * \n   * @type {AnnotationType}\n   */\n  this.annotationType = AnnotationType.Level;\n\n  /**\n   * Collection of levels this level annotation is drawn for.\n   * \n   * @type {string[]}\n   */\n  this.levels = [];\n\n  /**\n   * Level Title.\n   * \n   * @type {string}\n   */\n  this.title = null;\n\n  /**\n   * Title font color.\n   * \n   * @type {string}\n   */\n  this.titleFontColor = null;\n\n  /**\n   * The level title background color.\n   * \n   * @type {string}\n   */\n  this.titleColor = null;\n\n  /**\n   * Sets background offset relative to default position.\n   * \n   * @type {Thickness}\n   */\n  this.offset = new Thickness(0, 0, 0, 0);\n\n  /**\n   * Background stripe border line width. Use {Thickness} to set border width individually per side.\n   * \n   * @type {Thickness}\n   */\n  this.lineWidth = new Thickness(0, 0, 0, 0);\n\n  /**\n   * Background color opacity.\n   * \n   * @type {number}\n   */\n  this.opacity = 1;\n\n  /**\n   * Background stripe border line color\n   * \n   * @type {string}\n   */\n  this.borderColor = null;\n\n  /**\n   * Background stripe fill Color.\n   * \n   * @type {string}\n   */\n  this.fillColor = \"#D4D4D4\";\n\n  /**\n   * Background stripe border line type\n   * \n   * @type {LineType}\n   */\n  this.lineType = LineType.Solid;\n\n  switch (arguments.length) {\n    case 1:\n      if (arg0 !== null) {\n        if (arg0 instanceof Array) {\n          this.items = arg0;\n        } else if (typeof arg0 == \"object\") {\n          for (property in arg0) {\n            if (arg0.hasOwnProperty(property)) {\n              this[property] = arg0[property];\n            }\n          }\n        }\n      }\n      break;\n  }\n};"]},"metadata":{},"sourceType":"module"}