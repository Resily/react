{"ast":null,"code":"import { Colors } from '../enums';\nvar ColorHexs;\n/**\n * Converts color string into HEX color string.\n * \n * @param {string} color Regular HTML color string.\n * @returns {string} Returns color value in form of HEX string.\n */\n\nexport function getColorHexValue(color) {\n  var digits, red, green, blue, rgb, colorIndex, colorKey;\n\n  if (color.substr(0, 1) === '#') {\n    return color;\n  }\n  /*ignore jslint start*/\n\n\n  digits = /(.*?)rgb\\((\\d+), (\\d+), (\\d+)\\)/.exec(color);\n  /*ignore jslint end*/\n\n  if (digits !== null && digits.length > 0) {\n    red = parseInt(digits[2], 10);\n    green = parseInt(digits[3], 10);\n    blue = parseInt(digits[4], 10);\n    /*ignore jslint start*/\n\n    rgb = (red << 16 | green << 8 | blue).toString(16);\n    /*ignore jslint end*/\n\n    return digits[1] + \"000000\".substr(0, 6 - rgb.length) + rgb;\n  }\n\n  if (ColorHexs === undefined) {\n    ColorHexs = {};\n    colorIndex = 0;\n\n    for (colorKey in Colors) {\n      if (Colors.hasOwnProperty(colorKey)) {\n        ColorHexs[colorKey.toUpperCase()] = Colors[colorKey];\n        colorIndex += 1;\n      }\n    }\n  }\n\n  return ColorHexs[color.toUpperCase()];\n}\n;\nvar ColorNames;\n/**\n * Converts color string into HTML color name string or return hex color string.\n * \n * @param {string} color Regular HTML color string\n * @returns {string} Returns HTML Color name or HEX string.\n */\n\nexport function getColorName(color) {\n  var colorIndex, colorKey;\n  color = getColorHexValue(color);\n\n  if (ColorNames === undefined) {\n    ColorNames = {};\n    colorIndex = 0;\n\n    for (colorKey in Colors) {\n      if (Colors.hasOwnProperty(colorKey)) {\n        ColorNames[Colors[colorKey]] = colorKey;\n        colorIndex += 1;\n      }\n    }\n  }\n\n  return ColorNames[color];\n}\n;\n/**\n * Gets red value of HEX color string.\n * \n * @param {string} color Color\n * @returns {number} Returns red value of the HEX color string. \n */\n\nexport function getRed(color) {\n  if (color.substr(0, 1) === '#' && color.length === 7) {\n    return parseInt(color.substr(1, 2), 16);\n  }\n\n  return null;\n}\n;\n/**\n * Gets green value of HEX color string.\n * \n * @param {string} color Color\n * @returns {number} Returns green value of the HEX color string. \n */\n\nexport function getGreen(color) {\n  if (color.substr(0, 1) === '#' && color.length === 7) {\n    return parseInt(color.substr(3, 2), 16);\n  }\n\n  return null;\n}\n;\n/**\n * Gets blue value of HEX color string.\n * \n * @param {string} color Color\n * @returns {number} Returns blue value of the HEX color string. \n */\n\nexport function getBlue(color) {\n  if (color.substr(0, 1) === '#' && color.length === 7) {\n    return parseInt(color.substr(5, 2), 16);\n  }\n\n  return null;\n}\n;\n/**\n * Calculates before opacity color value producing color you need after applying opacity.\n * \n * @param {string} color The color you want to get after applying opacity.\n * @param {number} opacity Opacity\n * @returns {string} The HEX color before opacity\n */\n\nexport function beforeOpacity(color, opacity) {\n  var red, green, blue, rgb;\n  color = getColorHexValue(color);\n  red = Math.ceil((getRed(color) - (1.0 - opacity) * 255.0) / opacity);\n  green = Math.ceil((getGreen(color) - (1.0 - opacity) * 255.0) / opacity);\n  blue = Math.ceil((getBlue(color) - (1.0 - opacity) * 255.0) / opacity);\n  /*ignore jslint start*/\n\n  rgb = (red << 16 | green << 8 | blue).toString(16);\n  /*ignore jslint end*/\n\n  return '#' + \"000000\".substr(0, 6 - rgb.length) + rgb;\n}\n;\nvar highestContrasts = {};\n/**\n * Finds contrast between base color and two optional first and second colors and returns the one which has highest contrast.\n * \n * @param {string} baseColor Base color to compare with\n * @param {string} firstColor First color.\n * @param {string} secondColor Second color.\n * \n * @returns {string} Returns highest contrast color compared to base color.\n */\n\nexport function highestContrast(baseColor, firstColor, secondColor) {\n  var result = firstColor,\n      key = baseColor + \",\" + firstColor + \",\" + secondColor;\n\n  if (highestContrasts.hasOwnProperty(key)) {\n    result = highestContrasts[key];\n  } else {\n    if (luminosity(firstColor, baseColor) < luminosity(secondColor, baseColor)) {\n      result = secondColor;\n    }\n\n    highestContrasts[key] = result;\n  }\n\n  return result;\n}\n;\n/**\n * Calculates luminosity between two HEX string colors.\n * \n * @param {string} firstColor First color.\n * @param {string} secondColor Second color.\n * \n * @returns {number} Returns luminosity value\n */\n\nexport function luminosity(firstColor, secondColor) {\n  var result,\n      first = getColorHexValue(firstColor),\n      second = getColorHexValue(secondColor),\n      firstLuminosity = 0.2126 * Math.pow(getRed(first) / 255.0, 2.2) + 0.7152 * Math.pow(getRed(first) / 255.0, 2.2) + 0.0722 * Math.pow(getRed(first) / 255.0, 2.2),\n      secondLuminosity = 0.2126 * Math.pow(getRed(second) / 255.0, 2.2) + 0.7152 * Math.pow(getRed(second) / 255.0, 2.2) + 0.0722 * Math.pow(getRed(second) / 255.0, 2.2);\n\n  if (firstLuminosity > secondLuminosity) {\n    result = (firstLuminosity + 0.05) / (secondLuminosity + 0.05);\n  } else {\n    result = (secondLuminosity + 0.05) / (firstLuminosity + 0.05);\n  }\n\n  return result;\n}\n;","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/common/colors.js"],"names":["Colors","ColorHexs","getColorHexValue","color","digits","red","green","blue","rgb","colorIndex","colorKey","substr","exec","length","parseInt","toString","undefined","hasOwnProperty","toUpperCase","ColorNames","getColorName","getRed","getGreen","getBlue","beforeOpacity","opacity","Math","ceil","highestContrasts","highestContrast","baseColor","firstColor","secondColor","result","key","luminosity","first","second","firstLuminosity","pow","secondLuminosity"],"mappings":"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","sourcesContent":["import { Colors } from '../enums';\n\nlet ColorHexs;\n\n/**\n * Converts color string into HEX color string.\n * \n * @param {string} color Regular HTML color string.\n * @returns {string} Returns color value in form of HEX string.\n */\nexport function getColorHexValue(color) {\n    var digits,\n        red,\n        green,\n        blue,\n        rgb,\n        colorIndex,\n        colorKey;\n    if (color.substr(0, 1) === '#') {\n        return color;\n    }\n\n    /*ignore jslint start*/\n    digits = /(.*?)rgb\\((\\d+), (\\d+), (\\d+)\\)/.exec(color);\n    /*ignore jslint end*/\n    if (digits !== null && digits.length > 0) {\n        red = parseInt(digits[2], 10);\n        green = parseInt(digits[3], 10);\n        blue = parseInt(digits[4], 10);\n\n        /*ignore jslint start*/\n        rgb = ((red << 16) | (green << 8) | blue).toString(16);\n        /*ignore jslint end*/\n        return digits[1] + \"000000\".substr(0, 6 - rgb.length) + rgb;\n    }\n    if (ColorHexs === undefined) {\n        ColorHexs = {};\n        colorIndex = 0;\n        for (colorKey in Colors) {\n            if (Colors.hasOwnProperty(colorKey)) {\n                ColorHexs[colorKey.toUpperCase()] = Colors[colorKey];\n                colorIndex += 1;\n            }\n        }\n    }\n\n    return ColorHexs[color.toUpperCase()];\n};\n\nlet ColorNames;\n\n/**\n * Converts color string into HTML color name string or return hex color string.\n * \n * @param {string} color Regular HTML color string\n * @returns {string} Returns HTML Color name or HEX string.\n */\nexport function getColorName(color) {\n    var colorIndex,\n        colorKey;\n    color = getColorHexValue(color);\n\n    if (ColorNames === undefined) {\n        ColorNames = {};\n        colorIndex = 0;\n        for (colorKey in Colors) {\n        if (Colors.hasOwnProperty(colorKey)) {\n            ColorNames[Colors[colorKey]] = colorKey;\n            colorIndex += 1;\n        }\n        }\n    }\n\n    return ColorNames[color];\n};\n\n/**\n * Gets red value of HEX color string.\n * \n * @param {string} color Color\n * @returns {number} Returns red value of the HEX color string. \n */\nexport function getRed(color) {\n    if (color.substr(0, 1) === '#' && color.length === 7) {\n        return parseInt(color.substr(1, 2), 16);\n    }\n    return null;\n};\n\n/**\n * Gets green value of HEX color string.\n * \n * @param {string} color Color\n * @returns {number} Returns green value of the HEX color string. \n */\nexport function getGreen(color) {\n    if (color.substr(0, 1) === '#' && color.length === 7) {\n        return parseInt(color.substr(3, 2), 16);\n    }\n    return null;\n};\n\n/**\n * Gets blue value of HEX color string.\n * \n * @param {string} color Color\n * @returns {number} Returns blue value of the HEX color string. \n */\nexport function getBlue(color) {\n    if (color.substr(0, 1) === '#' && color.length === 7) {\n        return parseInt(color.substr(5, 2), 16);\n    }\n    return null;\n};\n\n/**\n * Calculates before opacity color value producing color you need after applying opacity.\n * \n * @param {string} color The color you want to get after applying opacity.\n * @param {number} opacity Opacity\n * @returns {string} The HEX color before opacity\n */\nexport function beforeOpacity(color, opacity) {\n    var red,\n        green,\n        blue,\n        rgb;\n    color = getColorHexValue(color);\n\n    red = Math.ceil((getRed(color) - (1.0 - opacity) * 255.0) / opacity);\n    green = Math.ceil((getGreen(color) - (1.0 - opacity) * 255.0) / opacity);\n    blue = Math.ceil((getBlue(color) - (1.0 - opacity) * 255.0) / opacity);\n\n    /*ignore jslint start*/\n    rgb = ((red << 16) | (green << 8) | blue).toString(16);\n    /*ignore jslint end*/\n    return '#' + \"000000\".substr(0, 6 - rgb.length) + rgb;\n};\n\nconst highestContrasts = {};\n\n/**\n * Finds contrast between base color and two optional first and second colors and returns the one which has highest contrast.\n * \n * @param {string} baseColor Base color to compare with\n * @param {string} firstColor First color.\n * @param {string} secondColor Second color.\n * \n * @returns {string} Returns highest contrast color compared to base color.\n */\nexport function highestContrast(baseColor, firstColor, secondColor) {\n    var result = firstColor,\n        key = baseColor + \",\" + firstColor + \",\" + secondColor;\n\n    if (highestContrasts.hasOwnProperty(key)) {\n        result = highestContrasts[key];\n    } else {\n        if (luminosity(firstColor, baseColor) < luminosity(secondColor, baseColor)) {\n            result = secondColor;\n        }\n        highestContrasts[key] = result;\n    }\n    return result;\n};\n\n/**\n * Calculates luminosity between two HEX string colors.\n * \n * @param {string} firstColor First color.\n * @param {string} secondColor Second color.\n * \n * @returns {number} Returns luminosity value\n */\nexport function luminosity(firstColor, secondColor) {\n    var result,\n        first = getColorHexValue(firstColor),\n        second = getColorHexValue(secondColor),\n        firstLuminosity =\n        0.2126 * Math.pow(getRed(first) / 255.0, 2.2) +\n        0.7152 * Math.pow(getRed(first) / 255.0, 2.2) +\n        0.0722 * Math.pow(getRed(first) / 255.0, 2.2),\n        secondLuminosity =\n        0.2126 * Math.pow(getRed(second) / 255.0, 2.2) +\n        0.7152 * Math.pow(getRed(second) / 255.0, 2.2) +\n        0.0722 * Math.pow(getRed(second) / 255.0, 2.2);\n\n    if (firstLuminosity > secondLuminosity) {\n        result = (firstLuminosity + 0.05) / (secondLuminosity + 0.05);\n    }\n    else {\n        result = (secondLuminosity + 0.05) / (firstLuminosity + 0.05);\n    }\n\n    return result;\n};"]},"metadata":{},"sourceType":"module"}