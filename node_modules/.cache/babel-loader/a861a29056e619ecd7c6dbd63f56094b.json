{"ast":null,"code":"import Tree from '../../algorithms/Tree';\nimport OrgItem from '../../models/OrgItem';\nimport OrgItemConfig from '../../configs/OrgItemConfig';\nimport { ItemType } from '../../enums';\nexport default function OrgTreeTask(itemsOptionTask) {\n  var _data = {\n    orgTree: null,\n\n    /*Tree OrgItem */\n    maximumId: null\n    /* maximum of OrgItem.id */\n\n  };\n\n  function process() {\n    createOrgTree(itemsOptionTask.getItems());\n    return true;\n  }\n\n  function createOrgTree(items) {\n    var orgItem,\n        orgItemRoot,\n        userItem,\n        index,\n        len,\n        maximumId = 0,\n        parsedId,\n        // Organizational chart definition \n    orgTree = Tree(),\n        rootItemConfig;\n    /* convert items to hash table */\n\n    for (index = 0, len = items.length; index < len; index += 1) {\n      userItem = items[index];\n      /* user should define unique id for every OrgItemConfig otherwise we ignore it\n        if parent does not exists in the tree then item is considered as root item\n      */\n\n      if (userItem.id != null) {\n        /* Organizational chart OrgItemConfig is almost the same as OrgItem \n          except options used to draw connectors in multi parent chart\n        */\n        orgItem = new OrgItem(userItem); // OrgItem id coincides with OrgItemConfig id since we don't add any new org items to user's org chart definition\n\n        parsedId = parseInt(userItem.id, 10);\n        maximumId = Math.max(isNaN(parsedId) ? 0 : parsedId, maximumId); // Collect org items\n\n        orgTree.add(userItem.parent, orgItem.id, orgItem);\n        /* We ignore looped items, it is applications responsibility to control data consistency */\n      }\n    }\n    /* create chart root item config */\n\n\n    maximumId += 1;\n    rootItemConfig = new OrgItemConfig();\n    rootItemConfig.id = maximumId;\n    rootItemConfig.title = \"internal root\";\n    rootItemConfig.isVisible = false;\n    rootItemConfig.isActive = false;\n    /* create chart org root item */\n\n    orgItemRoot = new OrgItem(rootItemConfig);\n    orgItemRoot.hideParentConnection = true;\n    orgItemRoot.hideChildrenConnection = true;\n    orgTree.add(null, orgItemRoot.id, orgItemRoot);\n    orgTree.loopLevels(this, function (nodeid, node, levelid) {\n      if (levelid > 0) {\n        return orgTree.BREAK;\n      }\n\n      if (orgItemRoot.id != nodeid) {\n        orgTree.adopt(orgItemRoot.id, nodeid);\n        /* root item must be regular */\n\n        node.itemType = ItemType.Regular;\n      }\n    });\n    hideRootConnectors(orgTree);\n    _data.orgTree = orgTree;\n    _data.maximumId = maximumId;\n    return true;\n  }\n\n  function hideRootConnectors(orgTree) {\n    orgTree.loopLevels(this, function (nodeid, node, levelid) {\n      var allRegular = true;\n\n      if (!node.isVisible) {\n        orgTree.loopChildren(this, nodeid, function (childid, child, index) {\n          if (child.itemType != ItemType.Regular) {\n            allRegular = false;\n            return true; // break\n          }\n        }); //ignore jslint\n\n        if (allRegular) {\n          node.hideChildrenConnection = true;\n          orgTree.loopChildren(this, nodeid, function (childid, child, index) {\n            child.hideParentConnection = true;\n          });\n        } else {\n          return orgTree.SKIP; // skip children\n        }\n      } else {\n        return orgTree.SKIP;\n      }\n    });\n  }\n\n  function getOrgTree() {\n    return _data.orgTree;\n  }\n\n  function getMaximumId() {\n    return _data.maximumId;\n  }\n\n  return {\n    process: process,\n    getOrgTree: getOrgTree,\n    getMaximumId: getMaximumId\n  };\n}\n;","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/tasks/transformations/OrgTreeTask.js"],"names":["Tree","OrgItem","OrgItemConfig","ItemType","OrgTreeTask","itemsOptionTask","_data","orgTree","maximumId","process","createOrgTree","getItems","items","orgItem","orgItemRoot","userItem","index","len","parsedId","rootItemConfig","length","id","parseInt","Math","max","isNaN","add","parent","title","isVisible","isActive","hideParentConnection","hideChildrenConnection","loopLevels","nodeid","node","levelid","BREAK","adopt","itemType","Regular","hideRootConnectors","allRegular","loopChildren","childid","child","SKIP","getOrgTree","getMaximumId"],"mappings":"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","sourcesContent":["import Tree from '../../algorithms/Tree';\nimport OrgItem from '../../models/OrgItem';\nimport OrgItemConfig from '../../configs/OrgItemConfig';\nimport { ItemType } from '../../enums';\n\nexport default function OrgTreeTask(itemsOptionTask) {\n  var _data = {\n    orgTree: null, /*Tree OrgItem */\n    maximumId: null /* maximum of OrgItem.id */\n  };\n\n  function process() {\n    createOrgTree(itemsOptionTask.getItems());\n\n    return true;\n  }\n\n  function createOrgTree(items) {\n    var orgItem,\n      orgItemRoot,\n      userItem,\n      index, len,\n      maximumId = 0,\n      parsedId,\n      // Organizational chart definition \n      orgTree = Tree(),\n      rootItemConfig;\n\n    /* convert items to hash table */\n    for (index = 0, len = items.length; index < len; index += 1) {\n      userItem = items[index];\n      /* user should define unique id for every OrgItemConfig otherwise we ignore it\n        if parent does not exists in the tree then item is considered as root item\n      */\n      if (userItem.id != null) {\n        /* Organizational chart OrgItemConfig is almost the same as OrgItem \n          except options used to draw connectors in multi parent chart\n        */\n        orgItem = new OrgItem(userItem);\n\n        // OrgItem id coincides with OrgItemConfig id since we don't add any new org items to user's org chart definition\n        parsedId = parseInt(userItem.id, 10);\n        maximumId = Math.max(isNaN(parsedId) ? 0 : parsedId, maximumId);\n\n        // Collect org items\n        orgTree.add(userItem.parent, orgItem.id, orgItem);\n\n        /* We ignore looped items, it is applications responsibility to control data consistency */\n      }\n    }\n    /* create chart root item config */\n    maximumId += 1;\n\n    rootItemConfig = new OrgItemConfig();\n    rootItemConfig.id = maximumId;\n    rootItemConfig.title = \"internal root\";\n    rootItemConfig.isVisible = false;\n    rootItemConfig.isActive = false;\n\n    /* create chart org root item */\n    orgItemRoot = new OrgItem(rootItemConfig);\n    orgItemRoot.hideParentConnection = true;\n    orgItemRoot.hideChildrenConnection = true;\n\n    orgTree.add(null, orgItemRoot.id, orgItemRoot);\n\n    orgTree.loopLevels(this, function (nodeid, node, levelid) {\n      if (levelid > 0) {\n        return orgTree.BREAK;\n      }\n      if (orgItemRoot.id != nodeid) {\n        orgTree.adopt(orgItemRoot.id, nodeid);\n\n        /* root item must be regular */\n        node.itemType = ItemType.Regular;\n      }\n    });\n\n    hideRootConnectors(orgTree);\n\n    _data.orgTree = orgTree;\n    _data.maximumId = maximumId;\n\n    return true;\n  }\n\n  function hideRootConnectors(orgTree) {\n    orgTree.loopLevels(this, function (nodeid, node, levelid) {\n      var allRegular = true;\n      if (!node.isVisible) {\n        orgTree.loopChildren(this, nodeid, function (childid, child, index) {\n          if (child.itemType != ItemType.Regular) {\n            allRegular = false;\n            return true; // break\n          }\n        }); //ignore jslint\n\n        if (allRegular) {\n          node.hideChildrenConnection = true;\n\n          orgTree.loopChildren(this, nodeid, function (childid, child, index) {\n            child.hideParentConnection = true;\n          });\n        } else {\n          return orgTree.SKIP; // skip children\n        }\n      } else {\n        return orgTree.SKIP;\n      }\n    });\n  }\n\n  function getOrgTree() {\n    return _data.orgTree;\n  }\n\n  function getMaximumId() {\n    return _data.maximumId;\n  }\n\n  return {\n    process: process,\n    getOrgTree: getOrgTree,\n    getMaximumId: getMaximumId\n  };\n};"]},"metadata":{},"sourceType":"module"}