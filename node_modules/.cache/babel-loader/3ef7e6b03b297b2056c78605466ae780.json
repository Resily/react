{"ast":null,"code":"import { ItemType, AdviserPlacementType, ChildrenPlacementType, Enabled } from '../enums';\n/* This is model class is used to define intermediate organizational chart structure */\n\nexport default function OrgItem(options) {\n  var index, len, property;\n  this.id = null; // Unique org item id. \n\n  this.isVisible = true; // If it is true then item is shown and selectable in hierarchy. \n\n  this.isActive = true; // If it is true then item is clickable in hierarchy. \n\n  this.hasVisibleChildren = false; // If it is true then item is Visible or one of its children in hierarchy. \n\n  this.itemType = ItemType.Regular; // This property defines how item should be placed in chart. \n\n  this.adviserPlacementType = AdviserPlacementType.Auto; // Left or Right placement relative to parent\n\n  this.childrenPlacementType = ChildrenPlacementType.Auto; // Children shape\n\n  this.placeAdvisersAboveChildren = Enabled.Auto;\n  this.placeAssistantsAboveChildren = Enabled.Auto;\n  this.levelOffset = null;\n  this.level = null;\n  this.hideParentConnection = false;\n  this.hideChildrenConnection = false;\n  /* org tree balancing properties */\n\n  this.childIndex = null; // Item index in array of parent's children\n  // Following properties we copy from user's item config to new OrgItem instance\n  // If user's property is undefined we take default value from OrgItemConfig\n\n  var properties = ['id', 'parent', 'isVisible', 'isActive', 'itemType', 'adviserPlacementType', 'childrenPlacementType', 'placeAdvisersAboveChildren', 'placeAssistantsAboveChildren', 'levelOffset'];\n  /* copy general org chart items properties */\n\n  for (index = 0, len = properties.length; index < len; index += 1) {\n    property = properties[index];\n\n    if (options.hasOwnProperty(property)) {\n      this[property] = options[property];\n    }\n  }\n}\n;","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/models/OrgItem.js"],"names":["ItemType","AdviserPlacementType","ChildrenPlacementType","Enabled","OrgItem","options","index","len","property","id","isVisible","isActive","hasVisibleChildren","itemType","Regular","adviserPlacementType","Auto","childrenPlacementType","placeAdvisersAboveChildren","placeAssistantsAboveChildren","levelOffset","level","hideParentConnection","hideChildrenConnection","childIndex","properties","length","hasOwnProperty"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,oBAAnB,EAAyCC,qBAAzC,EAAgEC,OAAhE,QAA+E,UAA/E;AAEA;;AACA,eAAe,SAASC,OAAT,CAAiBC,OAAjB,EAA0B;AACvC,MAAIC,KAAJ,EAAWC,GAAX,EACEC,QADF;AAGA,OAAKC,EAAL,GAAU,IAAV,CAJuC,CAIvB;;AAEhB,OAAKC,SAAL,GAAiB,IAAjB,CANuC,CAMhB;;AACvB,OAAKC,QAAL,GAAgB,IAAhB,CAPuC,CAOjB;;AACtB,OAAKC,kBAAL,GAA0B,KAA1B,CARuC,CAQN;;AAEjC,OAAKC,QAAL,GAAgBb,QAAQ,CAACc,OAAzB,CAVuC,CAUL;;AAClC,OAAKC,oBAAL,GAA4Bd,oBAAoB,CAACe,IAAjD,CAXuC,CAWgB;;AACvD,OAAKC,qBAAL,GAA6Bf,qBAAqB,CAACc,IAAnD,CAZuC,CAYkB;;AAEzD,OAAKE,0BAAL,GAAkCf,OAAO,CAACa,IAA1C;AACA,OAAKG,4BAAL,GAAoChB,OAAO,CAACa,IAA5C;AACA,OAAKI,WAAL,GAAmB,IAAnB;AAEA,OAAKC,KAAL,GAAa,IAAb;AACA,OAAKC,oBAAL,GAA4B,KAA5B;AACA,OAAKC,sBAAL,GAA8B,KAA9B;AAEA;;AACA,OAAKC,UAAL,GAAkB,IAAlB,CAvBuC,CAuBf;AAExB;AACA;;AACA,MAAIC,UAAU,GAAG,CACf,IADe,EACT,QADS,EACC,WADD,EACc,UADd,EAEf,UAFe,EAEH,sBAFG,EAEqB,uBAFrB,EAGf,4BAHe,EAGe,8BAHf,EAIf,aAJe,CAAjB;AAOA;;AACA,OAAKnB,KAAK,GAAG,CAAR,EAAWC,GAAG,GAAGkB,UAAU,CAACC,MAAjC,EAAyCpB,KAAK,GAAGC,GAAjD,EAAsDD,KAAK,IAAI,CAA/D,EAAkE;AAChEE,IAAAA,QAAQ,GAAGiB,UAAU,CAACnB,KAAD,CAArB;;AAEA,QAAID,OAAO,CAACsB,cAAR,CAAuBnB,QAAvB,CAAJ,EAAsC;AACpC,WAAKA,QAAL,IAAiBH,OAAO,CAACG,QAAD,CAAxB;AACD;AACF;AACF;AAAA","sourcesContent":["import { ItemType, AdviserPlacementType, ChildrenPlacementType, Enabled } from '../enums';\n\n/* This is model class is used to define intermediate organizational chart structure */\nexport default function OrgItem(options) {\n  var index, len,\n    property;\n\n  this.id = null; // Unique org item id. \n\n  this.isVisible = true; // If it is true then item is shown and selectable in hierarchy. \n  this.isActive = true; // If it is true then item is clickable in hierarchy. \n  this.hasVisibleChildren = false; // If it is true then item is Visible or one of its children in hierarchy. \n\n  this.itemType = ItemType.Regular; // This property defines how item should be placed in chart. \n  this.adviserPlacementType = AdviserPlacementType.Auto; // Left or Right placement relative to parent\n  this.childrenPlacementType = ChildrenPlacementType.Auto; // Children shape\n\n  this.placeAdvisersAboveChildren = Enabled.Auto;\n  this.placeAssistantsAboveChildren = Enabled.Auto;\n  this.levelOffset = null;\n\n  this.level = null;\n  this.hideParentConnection = false;\n  this.hideChildrenConnection = false;\n\n  /* org tree balancing properties */\n  this.childIndex = null; // Item index in array of parent's children\n\n  // Following properties we copy from user's item config to new OrgItem instance\n  // If user's property is undefined we take default value from OrgItemConfig\n  var properties = [\n    'id', 'parent', 'isVisible', 'isActive',\n    'itemType', 'adviserPlacementType', 'childrenPlacementType',\n    'placeAdvisersAboveChildren', 'placeAssistantsAboveChildren',\n    'levelOffset'\n  ];\n\n  /* copy general org chart items properties */\n  for (index = 0, len = properties.length; index < len; index += 1) {\n    property = properties[index];\n\n    if (options.hasOwnProperty(property)) {\n      this[property] = options[property];\n    }\n  }\n};"]},"metadata":{},"sourceType":"module"}