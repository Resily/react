{"ast":null,"code":"import { PageFitMode, OrientationType, AdviserPlacementType, Visibility, VerticalAlignmentType, HorizontalAlignmentType, SideFlag, GroupByType } from '../../enums';\nimport Rect from '../../graphics/structs/Rect';\nimport Size from '../../graphics/structs/Size';\nimport TreeItemPosition from '../../models/TreeItemPosition';\nimport LevelVisibility from '../../models/LevelVisibility';\nimport TreeLevelPosition from '../../models/TreeLevelPosition';\nexport default function OrgItemsPositionsTask(currentControlSizeTask, scaleOptionTask, orientationOptionTask, itemsSizesOptionTask, connectorsOptionTask, visualTreeOptionTask, visualTreeTask, visualTreeLevelsTask, itemTemplateParamsTask, cursorItemTask, combinedNormalVisibilityItemsTask) {\n  var _data = {\n    treeItemsPositions: {},\n    // TreeItemPosition();\n    panelSize: null // Rect();\n\n  },\n      _treeLevels,\n      _treeLevelsPositions,\n      // TreeLevelPosition()\n  _visualTree,\n      _leftMargins,\n      _rightMargins,\n      _orientationOptions,\n      _connectorsOptions,\n      _visualTreeOptions,\n      _itemsSizesOptions,\n      _intervals;\n\n  function process() {\n    var _currentControlSizeTa = currentControlSizeTask.getOptions(),\n        optimalPanelSize = _currentControlSizeTa.optimalPanelSize,\n        panelSize = new Size(optimalPanelSize),\n        panelRect,\n        _scaleOptionTask$getO = scaleOptionTask.getOptions(),\n        scale = _scaleOptionTask$getO.scale;\n\n    _itemsSizesOptions = itemsSizesOptionTask.getOptions();\n    _intervals = getIntervals(_itemsSizesOptions);\n    _orientationOptions = orientationOptionTask.getOptions();\n    _connectorsOptions = connectorsOptionTask.getOptions();\n    _visualTreeOptions = visualTreeOptionTask.getOptions();\n    _treeLevels = visualTreeLevelsTask.getTreeLevels();\n    _visualTree = visualTreeTask.getVisualTree();\n    _leftMargins = visualTreeTask.getLeftMargins();\n    _rightMargins = visualTreeTask.getRightMargins();\n    _treeLevelsPositions = [];\n    _data.treeItemsPositions = {};\n    panelSize.scale(1.0 / scale);\n    panelRect = new Rect(0, 0, panelSize.width, panelSize.height);\n    _data.panelSize = positionTreeItems(panelRect);\n    recalcItemsPositions();\n    return true;\n  }\n  /*  Position */\n\n\n  function positionTreeItems(panelSize) {\n    var placeholderSize = new Rect(0, 0, 0, 0),\n        levelVisibilities,\n        visibilities,\n        minimalPlaceholderSize,\n        leftMargin,\n        rightMargin,\n        cursorIndex;\n\n    switch (_orientationOptions.orientationType) {\n      case OrientationType.Left:\n      case OrientationType.Right:\n        panelSize.invert();\n        break;\n    }\n\n    if (!_treeLevels.isEmpty()) {\n      switch (_itemsSizesOptions.pageFitMode) {\n        case PageFitMode.None:\n        case PageFitMode.AutoSize:\n          levelVisibilities = [new LevelVisibility(0, Visibility.Normal)];\n          placeholderSize = setTreeLevelsVisibilityAndPositionTreeItems(levelVisibilities, 0);\n          break;\n\n        default:\n          levelVisibilities = [new LevelVisibility(0, Visibility.Normal)];\n          visibilities = [];\n\n          switch (_itemsSizesOptions.minimalVisibility) {\n            case Visibility.Normal:\n              break;\n\n            case Visibility.Dot:\n              visibilities.push(Visibility.Dot);\n              break;\n\n            case Visibility.Auto:\n            case Visibility.Line:\n            case Visibility.Invisible:\n              visibilities.push(Visibility.Dot);\n              visibilities.push(Visibility.Line);\n              break;\n          }\n\n          _treeLevels.loopLevelsReversed(this, function (level, levelContext) {\n            var index;\n\n            for (index = 0; index < visibilities.length; index += 1) {\n              levelVisibilities.push(new LevelVisibility(level, visibilities[index]));\n            }\n          }); // Find minimal placeholder size to hold completly folded diagram\n\n\n          minimalPlaceholderSize = setTreeLevelsVisibilityAndPositionTreeItems(levelVisibilities, levelVisibilities.length - 1);\n          minimalPlaceholderSize.addRect(panelSize);\n          minimalPlaceholderSize.offset(0, 0, 5, 5);\n          leftMargin = null;\n          rightMargin = null;\n          cursorIndex = null; // Maximized\n\n          placeholderSize = setTreeLevelsVisibilityAndPositionTreeItems(levelVisibilities, 0);\n\n          if (!checkDiagramSize(placeholderSize, minimalPlaceholderSize)) {\n            leftMargin = 0; // Minimized\n\n            placeholderSize = setTreeLevelsVisibilityAndPositionTreeItems(levelVisibilities, levelVisibilities.length - 1);\n\n            if (checkDiagramSize(placeholderSize, minimalPlaceholderSize)) {\n              rightMargin = levelVisibilities.length - 1;\n              cursorIndex = rightMargin;\n\n              while (rightMargin - leftMargin > 1) {\n                cursorIndex = Math.floor((rightMargin + leftMargin) / 2.0);\n                placeholderSize = setTreeLevelsVisibilityAndPositionTreeItems(levelVisibilities, cursorIndex);\n\n                if (checkDiagramSize(placeholderSize, minimalPlaceholderSize)) {\n                  rightMargin = cursorIndex;\n                } else {\n                  leftMargin = cursorIndex;\n                }\n              }\n\n              if (rightMargin !== cursorIndex) {\n                placeholderSize = setTreeLevelsVisibilityAndPositionTreeItems(levelVisibilities, rightMargin);\n              }\n            }\n          }\n\n          break;\n      }\n    }\n\n    return placeholderSize;\n  }\n\n  function setTreeLevelsVisibilityAndPositionTreeItems(levelVisibilities, cursorIndex) {\n    var index, levelVisibility;\n    _treeLevelsPositions = [];\n\n    _treeLevels.loopLevels(this, function (index, levelContext) {\n      var treeLevelPosition = new TreeLevelPosition();\n      treeLevelPosition.currentvisibility = Visibility.Normal;\n\n      _treeLevelsPositions.push(treeLevelPosition);\n    });\n\n    for (index = 0; index <= cursorIndex; index += 1) {\n      levelVisibility = levelVisibilities[index];\n      _treeLevelsPositions[levelVisibility.level].currentvisibility = levelVisibility.currentvisibility;\n    }\n\n    recalcItemsSize();\n    setOffsets();\n    recalcLevelsDepth();\n    shiftLevels();\n    return new Rect(0, 0, Math.round(getDiagramWidth()), Math.round(getDiagramHeight()));\n  }\n\n  function checkDiagramSize(diagramSize, panelSize) {\n    var result = false;\n\n    switch (_itemsSizesOptions.pageFitMode) {\n      case PageFitMode.PageWidth:\n        if (panelSize.width >= diagramSize.width) {\n          result = true;\n        }\n\n        break;\n\n      case PageFitMode.PageHeight:\n        if (panelSize.height >= diagramSize.height) {\n          result = true;\n        }\n\n        break;\n\n      case PageFitMode.FitToPage:\n        if (panelSize.height >= diagramSize.height && panelSize.width >= diagramSize.width) {\n          result = true;\n        }\n\n        break;\n    }\n\n    return result;\n  }\n\n  function getDiagramHeight() {\n    var len = _treeLevelsPositions.length,\n        treeLevel = _treeLevelsPositions[len - 1];\n    return treeLevel.shift + treeLevel.nextLevelShift;\n  }\n\n  function getDiagramWidth() {\n    var result = 0,\n        index,\n        len;\n\n    for (index = 0, len = _treeLevelsPositions.length; index < len; index += 1) {\n      result = Math.max(result, _treeLevelsPositions[index].currentOffset);\n    }\n\n    result += _itemsSizesOptions.normalItemsInterval;\n    return result;\n  }\n\n  function recalcItemsSize() {\n    var cursorItemId = cursorItemTask.getCursorTreeItem();\n    _data.treeItemsPositions = {};\n\n    _treeLevels.loopLevels(this, function (levelIndex, treeLevel) {\n      var treeLevelPosition = _treeLevelsPositions[levelIndex];\n\n      _treeLevels.loopLevelItems(this, levelIndex, function (treeItemId, treeItem, position) {\n        var treeItemPosition = new TreeItemPosition(),\n            treeItemVisibility = combinedNormalVisibilityItemsTask.isItemSelected(treeItemId) ? Visibility.Normal : treeItem.visibility,\n            treeItemtemplate = itemTemplateParamsTask.getTemplateParams(treeItemId);\n        var actualVisibility = treeItemVisibility === Visibility.Auto ? treeLevelPosition.currentvisibility : treeItemVisibility;\n        var size = getSize(actualVisibility, cursorItemId == treeItemId, treeItemtemplate, _itemsSizesOptions, _orientationOptions.orientationType, treeItemId);\n        treeItemPosition.actualVisibility = actualVisibility;\n        treeItemPosition.actualSize = size.actualSize;\n        treeItemPosition.contentPosition = size.contentPosition;\n        _data.treeItemsPositions[treeItemId] = treeItemPosition;\n      });\n    });\n  }\n\n  function recalcLevelsDepth() {\n    var index, len, index2, len2, index3, len3, treeItem, treeLevel, treeItems, itemPosition, treeItemsHavingPartners, treeItemsGroup, partners, partner, levelOffset, minimalDepth, dotsDepth, startIndex, endIndex, stackSegments;\n\n    _treeLevels.loopLevels(this, function (levelIndex, treeLevel) {\n      var treeLevelPosition = _treeLevelsPositions[levelIndex];\n      treeLevelPosition.shift = 0.0;\n      treeLevelPosition.depth = 0.0;\n      treeLevelPosition.actualVisibility = Visibility.Invisible;\n      treeItemsHavingPartners = [];\n      minimalDepth = null;\n      /* minimum  height of non-dot items in level */\n\n      dotsDepth = null;\n      /* maximum dots height */\n\n      _treeLevels.loopLevelItems(this, levelIndex, function (itemid, treeItem, position) {\n        var treeItemPosition = _data.treeItemsPositions[itemid];\n        treeLevelPosition.depth = Math.max(treeLevelPosition.depth, treeItemPosition.actualSize.height);\n\n        switch (treeItemPosition.actualVisibility) {\n          case Visibility.Dot:\n          case Visibility.Line:\n          case Visibility.Invisible:\n            dotsDepth = !dotsDepth ? treeItemPosition.actualSize.height : Math.min(dotsDepth, treeItemPosition.actualSize.height);\n            break;\n\n          default:\n            minimalDepth = !minimalDepth ? treeItemPosition.actualSize.height : Math.min(minimalDepth, treeItemPosition.actualSize.height);\n            break;\n        }\n\n        treeLevelPosition.actualVisibility = Math.min(treeLevelPosition.actualVisibility, treeItemPosition.actualVisibility);\n      });\n\n      if (minimalDepth == null) {\n        minimalDepth = treeLevelPosition.depth;\n      }\n\n      if (dotsDepth != null && dotsDepth > minimalDepth) {\n        minimalDepth = dotsDepth;\n      }\n\n      switch (_itemsSizesOptions.verticalAlignment) {\n        case VerticalAlignmentType.Top:\n          treeLevelPosition.horizontalConnectorsDepth = minimalDepth / 2.0;\n          break;\n\n        case VerticalAlignmentType.Middle:\n          treeLevelPosition.horizontalConnectorsDepth = treeLevelPosition.depth / 2.0;\n          break;\n\n        case VerticalAlignmentType.Bottom:\n          treeLevelPosition.horizontalConnectorsDepth = treeLevelPosition.depth - minimalDepth / 2.0;\n          break;\n      }\n    });\n  }\n\n  function shiftLevels() {\n    var shift = _itemsSizesOptions.lineLevelShift,\n        index,\n        len,\n        treeLevelPosition,\n        treeLevelConnectorStackSize,\n        childrenSpace = 0,\n        parentsSpace = 0,\n        arrowTipLength = _connectorsOptions.linesWidth * 8;\n\n    switch (_connectorsOptions.arrowsDirection) {\n      case GroupByType.Parents:\n        childrenSpace = arrowTipLength;\n        parentsSpace = 0;\n        break;\n\n      case GroupByType.Children:\n        childrenSpace = 0;\n        parentsSpace = arrowTipLength;\n        break;\n    }\n\n    for (index = 0, len = _treeLevelsPositions.length; index < len; index += 1) {\n      treeLevelPosition = _treeLevelsPositions[index];\n      treeLevelConnectorStackSize = visualTreeLevelsTask.getConnectorsStacksSizes(index);\n      shift += treeLevelPosition.setShift(shift, getLevelSpace(treeLevelPosition.actualVisibility), parentsSpace, childrenSpace, treeLevelConnectorStackSize.parentsStackSize);\n    }\n  }\n\n  function getLevelSpace(visibility) {\n    var result = 0.0;\n\n    switch (visibility) {\n      case Visibility.Normal:\n        result = _itemsSizesOptions.normalLevelShift;\n        break;\n\n      case Visibility.Dot:\n        result = _itemsSizesOptions.dotLevelShift;\n        break;\n\n      case Visibility.Line:\n      case Visibility.Invisible:\n        result = _itemsSizesOptions.lineLevelShift;\n        break;\n    }\n\n    return result;\n  }\n\n  function setOffsets() {\n    var index, len;\n\n    for (index = 0, len = _treeLevelsPositions.length; index < len; index += 1) {\n      _treeLevelsPositions[index].currentOffset = 0.0;\n    }\n\n    _visualTree.loopPostOrder(this, function (treeItemId, treeItem, parentid, parent) {\n      var treeItemPosition = _data.treeItemsPositions[treeItemId],\n          treeItemVisibility = treeItemPosition.actualVisibility,\n          treeItemLevelIndex = _treeLevels.getLevelIndex(treeItemId),\n          treeLevelPosition = _treeLevelsPositions[treeItemLevelIndex],\n          treeItemPadding = _intervals[treeItemVisibility === Visibility.Auto ? treeLevelPosition.currentvisibility : treeItemVisibility] / 2.0,\n          index,\n          len,\n          offset,\n          siblings,\n          gaps,\n          gap,\n          leftMargin,\n          parentItem,\n          groups,\n          items,\n          item1,\n          item2,\n          groupIndex,\n          groupOffset,\n          group,\n          sibling,\n          cousinsInterval = treeLevelPosition.currentOffset > 0 ? treeItemPadding * treeItem.relationDegree * _itemsSizesOptions.cousinsIntervalMultiplier : 0,\n          arrowTipLength = _connectorsOptions.linesWidth * 8;\n\n      treeItemPosition.leftPadding = treeItemPadding + cousinsInterval;\n      treeItemPosition.rightPadding = treeItemPadding;\n\n      if (_connectorsOptions.arrowsDirection != GroupByType.None) {\n        if (treeItem.connectorPlacement & SideFlag.Left) {\n          treeItemPosition.leftPadding += arrowTipLength;\n        }\n\n        if (treeItem.connectorPlacement & SideFlag.Right) {\n          treeItemPosition.rightPadding += arrowTipLength;\n        }\n      }\n\n      treeItemPosition.offset = treeLevelPosition.currentOffset + treeItemPosition.leftPadding;\n      treeLevelPosition.currentOffset = treeItemPosition.offset + treeItemPosition.actualSize.width + treeItemPosition.rightPadding;\n\n      if (_visualTree.hasChildren(treeItemId)) {\n        offset = getChildrenOffset(treeItem);\n\n        if (offset > 0) {\n          offsetItemChildren(treeItem, offset);\n        } else if (offset < 0) {\n          offset = -offset;\n          offsetItem(treeItem, offset);\n          siblings = null;\n          gaps = {};\n          leftMargin = null;\n          parentItem = _visualTree.parent(treeItem.id);\n\n          if (parentItem !== null) {\n            _visualTree.loopChildrenReversed(this, parentItem.id, function (childItemId, childItem, index) {\n              if (childItem === treeItem) {\n                siblings = [];\n              } else if (siblings !== null) {\n                gap = getGapBetweenSiblings(childItem, treeItem);\n                gaps[childItem.id] = gap;\n\n                if (gap > 0) {\n                  siblings.splice(0, 0, childItem);\n                } else {\n                  leftMargin = childItem;\n                  return true;\n                }\n              }\n            });\n\n            if (siblings.length > 0) {\n              groups = null;\n\n              if (leftMargin !== null) {\n                items = [leftMargin];\n                items = items.concat(siblings);\n                items.push(treeItem);\n                groups = [[leftMargin]];\n\n                for (index = 1, len = items.length; index < len; index += 1) {\n                  item1 = items[index - 1];\n                  item2 = items[index];\n\n                  if (item1.gravity == HorizontalAlignmentType.Right || item2.gravity == HorizontalAlignmentType.Left) {\n                    groups[groups.length - 1].push(item2);\n                  } else {\n                    groups.push([item2]);\n                  }\n                }\n              } else {\n                groups = [siblings.slice(0)];\n                groups[groups.length - 1].push(treeItem);\n              } // align items to the right\n\n\n              if (groups.length > 0) {\n                siblings = groups[groups.length - 1];\n\n                for (index = siblings.length - 2; index >= 0; index -= 1) {\n                  sibling = siblings[index];\n                  gap = gaps[sibling.id];\n                  offset = Math.min(gap, offset);\n                  offsetItem(sibling, offset);\n                  offsetItemChildren(sibling, offset);\n                }\n              } // spread items proportionally\n\n\n              groupOffset = offset / (groups.length - 1);\n\n              for (groupIndex = groups.length - 2; groupIndex > 0; groupIndex -= 1) {\n                group = groups[groupIndex];\n\n                for (index = group.length - 1; index >= 0; index -= 1) {\n                  sibling = group[index];\n                  gap = gaps[sibling.id];\n                  offset = Math.min(groupIndex * groupOffset, Math.min(gap, offset));\n                  offsetItem(sibling, offset);\n                  offsetItemChildren(sibling, offset);\n                }\n              }\n            }\n          }\n        }\n      }\n    });\n  }\n\n  function getGapBetweenSiblings(leftItem, rightItem) {\n    var result = null,\n        rightMargins = getRightMargins(leftItem),\n        leftMargins = getLeftMargins(rightItem),\n        depth = Math.min(rightMargins.length, leftMargins.length),\n        index,\n        gap;\n\n    for (index = 0; index < depth; index += 1) {\n      gap = leftMargins[index] - rightMargins[index];\n      result = result !== null ? Math.min(result, gap) : gap;\n\n      if (gap <= 0) {\n        break;\n      }\n    }\n\n    return Math.floor(result);\n  }\n\n  function getRightMargins(treeItem) {\n    var result = [],\n        rightMargins,\n        index,\n        len,\n        marginItemPosition;\n    rightMargins = _rightMargins[treeItem.id];\n\n    if (rightMargins === undefined) {\n      rightMargins = [];\n    }\n\n    rightMargins = rightMargins.slice();\n    rightMargins.splice(0, 0, treeItem.id);\n\n    for (index = 0, len = rightMargins.length; index < len; index += 1) {\n      marginItemPosition = _data.treeItemsPositions[rightMargins[index]];\n      result[index] = marginItemPosition.offset + marginItemPosition.actualSize.width + marginItemPosition.rightPadding;\n    }\n\n    return result;\n  }\n\n  function getLeftMargins(treeItem) {\n    var result = [],\n        leftMargins,\n        index,\n        len,\n        marginItemPosition;\n    leftMargins = _leftMargins[treeItem.id];\n\n    if (leftMargins === undefined) {\n      leftMargins = [];\n    }\n\n    leftMargins = leftMargins.slice();\n    leftMargins.splice(0, 0, treeItem.id);\n\n    for (index = 0, len = leftMargins.length; index < len; index += 1) {\n      marginItemPosition = _data.treeItemsPositions[leftMargins[index]];\n      result[index] = marginItemPosition.offset - marginItemPosition.leftPadding;\n    }\n\n    return result;\n  }\n\n  function getChildrenOffset(treeItem) {\n    var treeItemPosition = _data.treeItemsPositions[treeItem.id],\n        treeItemCenterOffset = treeItemPosition.offset + treeItemPosition.actualSize.width / 2.0,\n        childrenCenterOffset = null,\n        firstItem,\n        firstItemPosition,\n        lastItem,\n        lastItemPosition,\n        visualAggregatorPosition;\n\n    if (treeItem.visualAggregatorId === null) {\n      firstItem = null;\n\n      _visualTree.loopChildren(this, treeItem.id, function (childItemId, childItem, index) {\n        firstItem = childItem;\n\n        if (firstItem.connectorPlacement & SideFlag.Top) {\n          return true;\n        }\n      });\n\n      firstItemPosition = _data.treeItemsPositions[firstItem.id];\n      lastItem = null;\n\n      _visualTree.loopChildrenReversed(this, treeItem.id, function (childItemId, childItem, index) {\n        lastItem = childItem;\n\n        if (lastItem.connectorPlacement & SideFlag.Top) {\n          return true;\n        }\n      });\n\n      lastItemPosition = _data.treeItemsPositions[lastItem.id];\n\n      switch (_visualTreeOptions.horizontalAlignment) {\n        case HorizontalAlignmentType.Left:\n          childrenCenterOffset = firstItemPosition.offset + firstItemPosition.actualSize.width / 2.0;\n          break;\n\n        case HorizontalAlignmentType.Right:\n          childrenCenterOffset = lastItemPosition.offset + lastItemPosition.actualSize.width / 2.0;\n          break;\n\n        case HorizontalAlignmentType.Center:\n          childrenCenterOffset = (firstItemPosition.offset + lastItemPosition.offset + lastItemPosition.actualSize.width) / 2.0;\n          break;\n      }\n    } else {\n      visualAggregatorPosition = _data.treeItemsPositions[treeItem.visualAggregatorId];\n      childrenCenterOffset = visualAggregatorPosition.offset + visualAggregatorPosition.actualSize.width / 2.0;\n    }\n\n    var i = treeItemCenterOffset - childrenCenterOffset;\n    return treeItemCenterOffset - childrenCenterOffset;\n  }\n\n  function offsetItem(treeItem, offset) {\n    var treeItemPosition = _data.treeItemsPositions[treeItem.id];\n    treeItemPosition.offset += offset;\n\n    var treeLevelPosition = _treeLevelsPositions[_treeLevels.getLevelIndex(treeItem.id)];\n\n    treeLevelPosition.currentOffset = Math.max(treeLevelPosition.currentOffset, treeItemPosition.offset + treeItemPosition.actualSize.width + treeItemPosition.rightPadding);\n  }\n\n  function offsetItemChildren(treeItem, offset) {\n    var childTreeItemPosition, treeLevelPosition;\n\n    _visualTree.loopLevels(this, treeItem.id, function (childItemId, childItem, levelid) {\n      childTreeItemPosition = _data.treeItemsPositions[childItemId];\n      childTreeItemPosition.offset += offset;\n      treeLevelPosition = _treeLevelsPositions[_treeLevels.getLevelIndex(childItemId)];\n      treeLevelPosition.currentOffset = Math.max(treeLevelPosition.currentOffset, childTreeItemPosition.offset + childTreeItemPosition.actualSize.width);\n      return true;\n    });\n  }\n\n  function recalcItemsPositions() {\n    var prevLevelPosition = null;\n\n    _treeLevels.loopLevels(this, function (levelIndex, treeLevel) {\n      var treeLevelPosition = _treeLevelsPositions[levelIndex];\n\n      _treeLevels.loopLevelItems(this, levelIndex, function (itemid, treeItem, position) {\n        var treeItemPosition = _data.treeItemsPositions[itemid];\n        var result = getPosition(treeItemPosition.actualVisibility, treeItemPosition.offset, treeItemPosition.actualSize, prevLevelPosition, treeLevelPosition, _itemsSizesOptions.verticalAlignment);\n        treeItemPosition.actualPosition = result.position;\n        treeItemPosition.horizontalConnectorsShift = result.horizontalConnectorsShift;\n        treeItemPosition.topConnectorShift = result.topConnectorShift;\n        treeItemPosition.topConnectorInterval = result.topConnectorInterval;\n        treeItemPosition.bottomConnectorShift = result.bottomConnectorShift;\n        treeItemPosition.bottomConnectorInterval = result.bottomConnectorInterval;\n      });\n\n      prevLevelPosition = treeLevelPosition;\n    });\n  }\n\n  function getSize(visibility, isCursor, treeItemTemplate, itemsSizesOptions, orientationType, treeItemId) {\n    var templateConfig, size, contentPosition;\n\n    switch (visibility) {\n      case Visibility.Normal:\n        templateConfig = treeItemTemplate.template.templateConfig;\n        size = new Size(templateConfig.itemSize);\n        contentPosition = new Rect(0, 0, size.width, size.height);\n\n        if (templateConfig.getDynamicItemSize) {\n          var dynamicItemSize = templateConfig.getDynamicItemSize(treeItemId);\n          size.width += dynamicItemSize.width;\n          size.height = dynamicItemSize.height;\n        }\n\n        if (isCursor) {\n          size.height += templateConfig.cursorPadding.top + templateConfig.cursorPadding.bottom;\n          size.width += templateConfig.cursorPadding.left + templateConfig.cursorPadding.right;\n          contentPosition.x = templateConfig.cursorPadding.left;\n          contentPosition.y = templateConfig.cursorPadding.top;\n        }\n\n        if (treeItemTemplate.hasSelectorCheckbox) {\n          size.height += itemsSizesOptions.checkBoxPanelSize;\n        }\n\n        if (treeItemTemplate.hasButtons) {\n          size.width += itemsSizesOptions.buttonsPanelSize;\n\n          switch (itemsSizesOptions.groupTitlePlacementType) {\n            case AdviserPlacementType.Right:\n              contentPosition.x += itemsSizesOptions.buttonsPanelSize;\n              break;\n          }\n        }\n\n        if (treeItemTemplate.hasGroupTitle) {\n          size.width += itemsSizesOptions.groupTitlePanelSize;\n\n          switch (itemsSizesOptions.groupTitlePlacementType) {\n            case AdviserPlacementType.Right:\n              break;\n\n            default:\n              contentPosition.x += itemsSizesOptions.groupTitlePanelSize;\n              break;\n          }\n        }\n\n        break;\n\n      case Visibility.Dot:\n        templateConfig = treeItemTemplate.template.templateConfig;\n        size = new Size(templateConfig.minimizedItemSize);\n        break;\n\n      case Visibility.Line:\n      case Visibility.Invisible:\n        size = new Size();\n        break;\n    }\n\n    switch (orientationType) {\n      case OrientationType.Left:\n      case OrientationType.Right:\n        size.invert();\n        break;\n    }\n\n    return {\n      actualSize: size,\n      contentPosition: contentPosition\n    };\n  }\n\n  function getPosition(visibility, offset, size, prevLevel, level, verticalAlignment) {\n    var itemShift = 0;\n\n    switch (visibility) {\n      case Visibility.Normal:\n        switch (verticalAlignment) {\n          case VerticalAlignmentType.Top:\n            itemShift = 0;\n            break;\n\n          case VerticalAlignmentType.Middle:\n            itemShift = (level.depth - size.height) / 2.0;\n            break;\n\n          case VerticalAlignmentType.Bottom:\n            itemShift = level.depth - size.height;\n            break;\n        }\n\n        break;\n\n      case Visibility.Dot:\n      case Visibility.Line:\n      case Visibility.Invisible:\n        itemShift = level.horizontalConnectorsDepth - size.height / 2.0;\n        break;\n    }\n\n    return {\n      position: new Rect(offset, level.shift + itemShift, size.width, size.height),\n      horizontalConnectorsShift: level.shift + level.horizontalConnectorsDepth,\n      topConnectorShift: prevLevel != null ? prevLevel.shift + prevLevel.connectorShift : null,\n      topConnectorInterval: prevLevel != null ? prevLevel.levelSpace / 2 : null,\n      bottomConnectorShift: level.shift + level.connectorShift,\n      bottomConnectorInterval: level.levelSpace / 2\n    };\n  }\n\n  function getIntervals(options) {\n    var result = [];\n    result[Visibility.Normal] = options.normalItemsInterval;\n    result[Visibility.Dot] = options.dotItemsInterval;\n    result[Visibility.Line] = options.lineItemsInterval;\n    result[Visibility.Invisible] = options.lineItemsInterval;\n    return result;\n  }\n\n  function getItemPosition(itemid) {\n    return _data.treeItemsPositions[itemid];\n  }\n\n  function getItemsPositions() {\n    return _data.treeItemsPositions;\n  }\n\n  function getContentSize() {\n    return _data.panelSize;\n  }\n\n  return {\n    process: process,\n    getItemsPositions: getItemsPositions,\n    getItemPosition: getItemPosition,\n    getContentSize: getContentSize\n  };\n}\n;","map":{"version":3,"sources":["/Users/01005901/go/src/github.com/Resily/react/node_modules/basicprimitives/src/tasks/transformations/OrgItemsPositionsTask.js"],"names":["PageFitMode","OrientationType","AdviserPlacementType","Visibility","VerticalAlignmentType","HorizontalAlignmentType","SideFlag","GroupByType","Rect","Size","TreeItemPosition","LevelVisibility","TreeLevelPosition","OrgItemsPositionsTask","currentControlSizeTask","scaleOptionTask","orientationOptionTask","itemsSizesOptionTask","connectorsOptionTask","visualTreeOptionTask","visualTreeTask","visualTreeLevelsTask","itemTemplateParamsTask","cursorItemTask","combinedNormalVisibilityItemsTask","_data","treeItemsPositions","panelSize","_treeLevels","_treeLevelsPositions","_visualTree","_leftMargins","_rightMargins","_orientationOptions","_connectorsOptions","_visualTreeOptions","_itemsSizesOptions","_intervals","process","getOptions","optimalPanelSize","panelRect","scale","getIntervals","getTreeLevels","getVisualTree","getLeftMargins","getRightMargins","width","height","positionTreeItems","recalcItemsPositions","placeholderSize","levelVisibilities","visibilities","minimalPlaceholderSize","leftMargin","rightMargin","cursorIndex","orientationType","Left","Right","invert","isEmpty","pageFitMode","None","AutoSize","Normal","setTreeLevelsVisibilityAndPositionTreeItems","minimalVisibility","Dot","push","Auto","Line","Invisible","loopLevelsReversed","level","levelContext","index","length","addRect","offset","checkDiagramSize","Math","floor","levelVisibility","loopLevels","treeLevelPosition","currentvisibility","recalcItemsSize","setOffsets","recalcLevelsDepth","shiftLevels","round","getDiagramWidth","getDiagramHeight","diagramSize","result","PageWidth","PageHeight","FitToPage","len","treeLevel","shift","nextLevelShift","max","currentOffset","normalItemsInterval","cursorItemId","getCursorTreeItem","levelIndex","loopLevelItems","treeItemId","treeItem","position","treeItemPosition","treeItemVisibility","isItemSelected","visibility","treeItemtemplate","getTemplateParams","actualVisibility","size","getSize","actualSize","contentPosition","index2","len2","index3","len3","treeItems","itemPosition","treeItemsHavingPartners","treeItemsGroup","partners","partner","levelOffset","minimalDepth","dotsDepth","startIndex","endIndex","stackSegments","depth","itemid","min","verticalAlignment","Top","horizontalConnectorsDepth","Middle","Bottom","lineLevelShift","treeLevelConnectorStackSize","childrenSpace","parentsSpace","arrowTipLength","linesWidth","arrowsDirection","Parents","Children","getConnectorsStacksSizes","setShift","getLevelSpace","parentsStackSize","normalLevelShift","dotLevelShift","loopPostOrder","parentid","parent","treeItemLevelIndex","getLevelIndex","treeItemPadding","siblings","gaps","gap","parentItem","groups","items","item1","item2","groupIndex","groupOffset","group","sibling","cousinsInterval","relationDegree","cousinsIntervalMultiplier","leftPadding","rightPadding","connectorPlacement","hasChildren","getChildrenOffset","offsetItemChildren","offsetItem","id","loopChildrenReversed","childItemId","childItem","getGapBetweenSiblings","splice","concat","gravity","slice","leftItem","rightItem","rightMargins","leftMargins","marginItemPosition","undefined","treeItemCenterOffset","childrenCenterOffset","firstItem","firstItemPosition","lastItem","lastItemPosition","visualAggregatorPosition","visualAggregatorId","loopChildren","horizontalAlignment","Center","i","childTreeItemPosition","levelid","prevLevelPosition","getPosition","actualPosition","horizontalConnectorsShift","topConnectorShift","topConnectorInterval","bottomConnectorShift","bottomConnectorInterval","isCursor","treeItemTemplate","itemsSizesOptions","templateConfig","template","itemSize","getDynamicItemSize","dynamicItemSize","cursorPadding","top","bottom","left","right","x","y","hasSelectorCheckbox","checkBoxPanelSize","hasButtons","buttonsPanelSize","groupTitlePlacementType","hasGroupTitle","groupTitlePanelSize","minimizedItemSize","prevLevel","itemShift","connectorShift","levelSpace","options","dotItemsInterval","lineItemsInterval","getItemPosition","getItemsPositions","getContentSize"],"mappings":"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","sourcesContent":["import { PageFitMode, OrientationType, AdviserPlacementType, Visibility, VerticalAlignmentType, \n  HorizontalAlignmentType, SideFlag, GroupByType } from '../../enums';\nimport Rect from '../../graphics/structs/Rect';\nimport Size from '../../graphics/structs/Size';\nimport TreeItemPosition from '../../models/TreeItemPosition';\nimport LevelVisibility from '../../models/LevelVisibility';\nimport TreeLevelPosition from '../../models/TreeLevelPosition';\n\nexport default function OrgItemsPositionsTask(currentControlSizeTask, scaleOptionTask, orientationOptionTask, itemsSizesOptionTask, connectorsOptionTask, visualTreeOptionTask,\n  visualTreeTask, visualTreeLevelsTask,\n  itemTemplateParamsTask,\n  cursorItemTask, combinedNormalVisibilityItemsTask) {\n  var _data = {\n    treeItemsPositions: {}, // TreeItemPosition();\n    panelSize: null // Rect();\n  },\n    _treeLevels,\n    _treeLevelsPositions, // TreeLevelPosition()\n    _visualTree,\n    _leftMargins,\n    _rightMargins,\n    _orientationOptions,\n    _connectorsOptions,\n    _visualTreeOptions,\n    _itemsSizesOptions,\n    _intervals;\n\n  function process() {\n    var { optimalPanelSize } = currentControlSizeTask.getOptions(),\n      panelSize = new Size(optimalPanelSize),\n      panelRect,\n      { scale } = scaleOptionTask.getOptions();\n\n    _itemsSizesOptions = itemsSizesOptionTask.getOptions();\n    _intervals = getIntervals(_itemsSizesOptions);\n    _orientationOptions = orientationOptionTask.getOptions();\n    _connectorsOptions = connectorsOptionTask.getOptions();\n    _visualTreeOptions = visualTreeOptionTask.getOptions();\n\n    _treeLevels = visualTreeLevelsTask.getTreeLevels();\n    _visualTree = visualTreeTask.getVisualTree();\n    _leftMargins = visualTreeTask.getLeftMargins();\n    _rightMargins = visualTreeTask.getRightMargins();\n\n    _treeLevelsPositions = [];\n\n    _data.treeItemsPositions = {};\n\n    panelSize.scale(1.0 / scale);\n    panelRect = new Rect(0, 0, panelSize.width, panelSize.height);\n    _data.panelSize = positionTreeItems(panelRect);\n\n    recalcItemsPositions();\n\n    return true;\n  }\n\n  /*  Position */\n  function positionTreeItems(panelSize) {\n    var placeholderSize = new Rect(0, 0, 0, 0),\n      levelVisibilities,\n      visibilities,\n      minimalPlaceholderSize,\n      leftMargin,\n      rightMargin,\n      cursorIndex;\n\n    switch (_orientationOptions.orientationType) {\n      case OrientationType.Left:\n      case OrientationType.Right:\n        panelSize.invert();\n        break;\n    }\n\n    if (!_treeLevels.isEmpty()) {\n      switch (_itemsSizesOptions.pageFitMode) {\n        case PageFitMode.None:\n        case PageFitMode.AutoSize:\n          levelVisibilities = [new LevelVisibility(0, Visibility.Normal)];\n          placeholderSize = setTreeLevelsVisibilityAndPositionTreeItems(levelVisibilities, 0);\n          break;\n        default:\n          levelVisibilities = [new LevelVisibility(0, Visibility.Normal)];\n          visibilities = [];\n          switch (_itemsSizesOptions.minimalVisibility) {\n            case Visibility.Normal:\n              break;\n            case Visibility.Dot:\n              visibilities.push(Visibility.Dot);\n              break;\n            case Visibility.Auto:\n            case Visibility.Line:\n            case Visibility.Invisible:\n              visibilities.push(Visibility.Dot);\n              visibilities.push(Visibility.Line);\n              break;\n          }\n\n          _treeLevels.loopLevelsReversed(this, function (level, levelContext) {\n            var index;\n            for (index = 0; index < visibilities.length; index += 1) {\n              levelVisibilities.push(new LevelVisibility(level, visibilities[index]));\n            }\n          });\n\n          // Find minimal placeholder size to hold completly folded diagram\n          minimalPlaceholderSize = setTreeLevelsVisibilityAndPositionTreeItems(levelVisibilities, levelVisibilities.length - 1);\n          minimalPlaceholderSize.addRect(panelSize);\n          minimalPlaceholderSize.offset(0, 0, 5, 5);\n\n          leftMargin = null;\n          rightMargin = null;\n          cursorIndex = null;\n          // Maximized\n          placeholderSize = setTreeLevelsVisibilityAndPositionTreeItems(levelVisibilities, 0);\n          if (!checkDiagramSize(placeholderSize, minimalPlaceholderSize)) {\n            leftMargin = 0;\n\n            // Minimized\n            placeholderSize = setTreeLevelsVisibilityAndPositionTreeItems(levelVisibilities, levelVisibilities.length - 1);\n            if (checkDiagramSize(placeholderSize, minimalPlaceholderSize)) {\n              rightMargin = levelVisibilities.length - 1;\n\n              cursorIndex = rightMargin;\n              while (rightMargin - leftMargin > 1) {\n                cursorIndex = Math.floor((rightMargin + leftMargin) / 2.0);\n\n                placeholderSize = setTreeLevelsVisibilityAndPositionTreeItems(levelVisibilities, cursorIndex);\n                if (checkDiagramSize(placeholderSize, minimalPlaceholderSize)) {\n                  rightMargin = cursorIndex;\n                }\n                else {\n                  leftMargin = cursorIndex;\n                }\n              }\n              if (rightMargin !== cursorIndex) {\n                placeholderSize = setTreeLevelsVisibilityAndPositionTreeItems(levelVisibilities, rightMargin);\n              }\n            }\n          }\n          break;\n      }\n    }\n    return placeholderSize;\n  }\n\n  function setTreeLevelsVisibilityAndPositionTreeItems(levelVisibilities, cursorIndex) {\n    var index,\n      levelVisibility;\n\n    _treeLevelsPositions = [];\n    _treeLevels.loopLevels(this, function (index, levelContext) {\n      var treeLevelPosition = new TreeLevelPosition();\n      treeLevelPosition.currentvisibility = Visibility.Normal;\n\n      _treeLevelsPositions.push(treeLevelPosition);\n    });\n\n\n    for (index = 0; index <= cursorIndex; index += 1) {\n      levelVisibility = levelVisibilities[index];\n\n      _treeLevelsPositions[levelVisibility.level].currentvisibility = levelVisibility.currentvisibility;\n    }\n    recalcItemsSize();\n    setOffsets();\n    recalcLevelsDepth();\n    shiftLevels();\n\n    return new Rect(0, 0, Math.round(getDiagramWidth()), Math.round(getDiagramHeight()));\n  }\n\n  function checkDiagramSize(diagramSize, panelSize) {\n    var result = false;\n    switch (_itemsSizesOptions.pageFitMode) {\n      case PageFitMode.PageWidth:\n        if (panelSize.width >= diagramSize.width) {\n          result = true;\n        }\n        break;\n      case PageFitMode.PageHeight:\n        if (panelSize.height >= diagramSize.height) {\n          result = true;\n        }\n        break;\n      case PageFitMode.FitToPage:\n        if (panelSize.height >= diagramSize.height && panelSize.width >= diagramSize.width) {\n          result = true;\n        }\n        break;\n    }\n    return result;\n  }\n\n  function getDiagramHeight() {\n    var len = _treeLevelsPositions.length,\n      treeLevel = _treeLevelsPositions[len - 1];\n    return treeLevel.shift + treeLevel.nextLevelShift;\n  }\n\n  function getDiagramWidth() {\n    var result = 0,\n      index,\n      len;\n    for (index = 0, len = _treeLevelsPositions.length; index < len; index += 1) {\n      result = Math.max(result, _treeLevelsPositions[index].currentOffset);\n    }\n    result += _itemsSizesOptions.normalItemsInterval;\n    return result;\n  }\n\n  function recalcItemsSize() {\n    var cursorItemId = cursorItemTask.getCursorTreeItem();\n\n    _data.treeItemsPositions = {};\n    _treeLevels.loopLevels(this, function (levelIndex, treeLevel) {\n      var treeLevelPosition = _treeLevelsPositions[levelIndex];\n\n      _treeLevels.loopLevelItems(this, levelIndex, function (treeItemId, treeItem, position) {\n        var treeItemPosition = new TreeItemPosition(),\n          treeItemVisibility = combinedNormalVisibilityItemsTask.isItemSelected(treeItemId) ? Visibility.Normal : treeItem.visibility,\n          treeItemtemplate = itemTemplateParamsTask.getTemplateParams(treeItemId);\n\n        var actualVisibility = (treeItemVisibility === Visibility.Auto) ? treeLevelPosition.currentvisibility : treeItemVisibility;\n        var size = getSize(actualVisibility, cursorItemId == treeItemId, treeItemtemplate, _itemsSizesOptions, _orientationOptions.orientationType, treeItemId);\n\n        treeItemPosition.actualVisibility = actualVisibility;\n        treeItemPosition.actualSize = size.actualSize;\n        treeItemPosition.contentPosition = size.contentPosition;\n\n        _data.treeItemsPositions[treeItemId] = treeItemPosition;\n      });\n    });\n  }\n\n  function recalcLevelsDepth() {\n    var index, len,\n      index2, len2,\n      index3, len3,\n      treeItem,\n      treeLevel,\n      treeItems,\n      itemPosition,\n      treeItemsHavingPartners,\n      treeItemsGroup,\n      partners, partner,\n      levelOffset,\n      minimalDepth,\n      dotsDepth,\n      startIndex, endIndex,\n      stackSegments;\n\n\n    _treeLevels.loopLevels(this, function (levelIndex, treeLevel) {\n      var treeLevelPosition = _treeLevelsPositions[levelIndex];\n      treeLevelPosition.shift = 0.0;\n      treeLevelPosition.depth = 0.0;\n      treeLevelPosition.actualVisibility = Visibility.Invisible;\n\n      treeItemsHavingPartners = [];\n\n      minimalDepth = null; /* minimum  height of non-dot items in level */\n      dotsDepth = null; /* maximum dots height */\n\n      _treeLevels.loopLevelItems(this, levelIndex, function (itemid, treeItem, position) {\n        var treeItemPosition = _data.treeItemsPositions[itemid];\n        treeLevelPosition.depth = Math.max(treeLevelPosition.depth, treeItemPosition.actualSize.height);\n        switch (treeItemPosition.actualVisibility) {\n          case Visibility.Dot:\n          case Visibility.Line:\n          case Visibility.Invisible:\n            dotsDepth = !dotsDepth ? treeItemPosition.actualSize.height : Math.min(dotsDepth, treeItemPosition.actualSize.height);\n            break;\n          default:\n            minimalDepth = !minimalDepth ? treeItemPosition.actualSize.height : Math.min(minimalDepth, treeItemPosition.actualSize.height);\n            break;\n        }\n\n        treeLevelPosition.actualVisibility = Math.min(treeLevelPosition.actualVisibility, treeItemPosition.actualVisibility);\n      });\n\n      if (minimalDepth == null) {\n        minimalDepth = treeLevelPosition.depth;\n      }\n      if (dotsDepth != null && dotsDepth > minimalDepth) {\n        minimalDepth = dotsDepth;\n      }\n\n      switch (_itemsSizesOptions.verticalAlignment) {\n        case VerticalAlignmentType.Top:\n          treeLevelPosition.horizontalConnectorsDepth = minimalDepth / 2.0;\n          break;\n        case VerticalAlignmentType.Middle:\n          treeLevelPosition.horizontalConnectorsDepth = treeLevelPosition.depth / 2.0;\n          break;\n        case VerticalAlignmentType.Bottom:\n          treeLevelPosition.horizontalConnectorsDepth = treeLevelPosition.depth - minimalDepth / 2.0;\n          break;\n      }\n    });\n  }\n\n  function shiftLevels() {\n    var shift = _itemsSizesOptions.lineLevelShift,\n      index,\n      len,\n      treeLevelPosition, treeLevelConnectorStackSize,\n      childrenSpace = 0,\n      parentsSpace = 0,\n      arrowTipLength = _connectorsOptions.linesWidth * 8;\n\n    switch (_connectorsOptions.arrowsDirection) {\n      case GroupByType.Parents:\n        childrenSpace = arrowTipLength;\n        parentsSpace = 0;\n        break;\n      case GroupByType.Children:\n        childrenSpace = 0;\n        parentsSpace = arrowTipLength;\n        break;\n    }\n\n    for (index = 0, len = _treeLevelsPositions.length; index < len; index += 1) {\n      treeLevelPosition = _treeLevelsPositions[index];\n      treeLevelConnectorStackSize = visualTreeLevelsTask.getConnectorsStacksSizes(index);\n      shift += treeLevelPosition.setShift(shift, getLevelSpace(treeLevelPosition.actualVisibility), parentsSpace, childrenSpace, treeLevelConnectorStackSize.parentsStackSize);\n    }\n  }\n\n  function getLevelSpace(visibility) {\n    var result = 0.0;\n\n    switch (visibility) {\n      case Visibility.Normal:\n        result = _itemsSizesOptions.normalLevelShift;\n        break;\n      case Visibility.Dot:\n        result = _itemsSizesOptions.dotLevelShift;\n        break;\n      case Visibility.Line:\n      case Visibility.Invisible:\n        result = _itemsSizesOptions.lineLevelShift;\n        break;\n    }\n    return result;\n  }\n\n  function setOffsets() {\n    var index,\n      len;\n    for (index = 0, len = _treeLevelsPositions.length; index < len; index += 1) {\n      _treeLevelsPositions[index].currentOffset = 0.0;\n    }\n    _visualTree.loopPostOrder(this, function (treeItemId, treeItem, parentid, parent) {\n      var treeItemPosition = _data.treeItemsPositions[treeItemId],\n        treeItemVisibility = treeItemPosition.actualVisibility,\n        treeItemLevelIndex = _treeLevels.getLevelIndex(treeItemId),\n        treeLevelPosition = _treeLevelsPositions[treeItemLevelIndex],\n        treeItemPadding = _intervals[treeItemVisibility === Visibility.Auto ? treeLevelPosition.currentvisibility : treeItemVisibility] / 2.0,\n        index,\n        len,\n        offset,\n        siblings,\n        gaps,\n        gap,\n        leftMargin,\n        parentItem,\n        groups,\n        items,\n        item1,\n        item2,\n        groupIndex,\n        groupOffset,\n        group,\n        sibling,\n        cousinsInterval = treeLevelPosition.currentOffset > 0 ? treeItemPadding * (treeItem.relationDegree) * _itemsSizesOptions.cousinsIntervalMultiplier : 0,\n        arrowTipLength = _connectorsOptions.linesWidth * 8;\n      treeItemPosition.leftPadding = treeItemPadding + cousinsInterval;\n      treeItemPosition.rightPadding = treeItemPadding;\n      if (_connectorsOptions.arrowsDirection != GroupByType.None) {\n        if (treeItem.connectorPlacement & SideFlag.Left) {\n          treeItemPosition.leftPadding += arrowTipLength;\n        }\n        if (treeItem.connectorPlacement & SideFlag.Right) {\n          treeItemPosition.rightPadding += arrowTipLength;\n        }\n      }\n      treeItemPosition.offset = treeLevelPosition.currentOffset + treeItemPosition.leftPadding;\n      treeLevelPosition.currentOffset = treeItemPosition.offset + treeItemPosition.actualSize.width + treeItemPosition.rightPadding;\n\n      if (_visualTree.hasChildren(treeItemId)) {\n        offset = getChildrenOffset(treeItem);\n        if (offset > 0) {\n          offsetItemChildren(treeItem, offset);\n        }\n        else if (offset < 0) {\n          offset = -offset;\n          offsetItem(treeItem, offset);\n\n          siblings = null;\n          gaps = {};\n          leftMargin = null;\n          parentItem = _visualTree.parent(treeItem.id);\n          if (parentItem !== null) {\n            _visualTree.loopChildrenReversed(this, parentItem.id, function (childItemId, childItem, index) {\n              if (childItem === treeItem) {\n                siblings = [];\n              }\n              else if (siblings !== null) {\n                gap = getGapBetweenSiblings(childItem, treeItem);\n                gaps[childItem.id] = gap;\n                if (gap > 0) {\n                  siblings.splice(0, 0, childItem);\n                }\n                else {\n                  leftMargin = childItem;\n                  return true;\n                }\n              }\n            });\n\n            if (siblings.length > 0) {\n              groups = null;\n              if (leftMargin !== null) {\n                items = [leftMargin];\n                items = items.concat(siblings);\n                items.push(treeItem);\n\n                groups = [[leftMargin]];\n                for (index = 1, len = items.length; index < len; index += 1) {\n                  item1 = items[index - 1];\n                  item2 = items[index];\n                  if (item1.gravity == HorizontalAlignmentType.Right || item2.gravity == HorizontalAlignmentType.Left) {\n                    groups[groups.length - 1].push(item2);\n                  }\n                  else {\n                    groups.push([item2]);\n                  }\n                }\n              }\n              else {\n                groups = [siblings.slice(0)];\n                groups[groups.length - 1].push(treeItem);\n              }\n\n              // align items to the right\n              if (groups.length > 0) {\n                siblings = groups[groups.length - 1];\n                for (index = siblings.length - 2; index >= 0; index -= 1) {\n                  sibling = siblings[index];\n                  gap = gaps[sibling.id];\n                  offset = Math.min(gap, offset);\n\n                  offsetItem(sibling, offset);\n                  offsetItemChildren(sibling, offset);\n                }\n              }\n\n              // spread items proportionally\n              groupOffset = offset / (groups.length - 1);\n              for (groupIndex = groups.length - 2; groupIndex > 0; groupIndex -= 1) {\n                group = groups[groupIndex];\n                for (index = group.length - 1; index >= 0; index -= 1) {\n                  sibling = group[index];\n                  gap = gaps[sibling.id];\n                  offset = Math.min(groupIndex * groupOffset, Math.min(gap, offset));\n\n                  offsetItem(sibling, offset);\n                  offsetItemChildren(sibling, offset);\n                }\n              }\n            }\n          }\n        }\n      }\n    });\n  }\n\n  function getGapBetweenSiblings(leftItem, rightItem) {\n    var result = null,\n      rightMargins = getRightMargins(leftItem),\n      leftMargins = getLeftMargins(rightItem),\n      depth = Math.min(rightMargins.length, leftMargins.length),\n      index,\n      gap;\n\n    for (index = 0; index < depth; index += 1) {\n      gap = leftMargins[index] - rightMargins[index];\n      result = (result !== null) ? Math.min(result, gap) : gap;\n\n      if (gap <= 0) {\n        break;\n      }\n    }\n\n    return Math.floor(result);\n  }\n\n  function getRightMargins(treeItem) {\n    var result = [],\n      rightMargins,\n      index,\n      len,\n      marginItemPosition;\n\n    rightMargins = _rightMargins[treeItem.id];\n    if (rightMargins === undefined) {\n      rightMargins = [];\n    }\n    rightMargins = rightMargins.slice();\n    rightMargins.splice(0, 0, treeItem.id);\n    for (index = 0, len = rightMargins.length; index < len; index += 1) {\n      marginItemPosition = _data.treeItemsPositions[rightMargins[index]];\n      result[index] = marginItemPosition.offset + marginItemPosition.actualSize.width + marginItemPosition.rightPadding;\n    }\n\n    return result;\n  }\n\n  function getLeftMargins(treeItem) {\n    var result = [],\n      leftMargins,\n      index, len,\n      marginItemPosition;\n\n    leftMargins = _leftMargins[treeItem.id];\n    if (leftMargins === undefined) {\n      leftMargins = [];\n    }\n    leftMargins = leftMargins.slice();\n    leftMargins.splice(0, 0, treeItem.id);\n    for (index = 0, len = leftMargins.length; index < len; index += 1) {\n      marginItemPosition = _data.treeItemsPositions[leftMargins[index]];\n      result[index] = marginItemPosition.offset - marginItemPosition.leftPadding;\n    }\n\n    return result;\n  }\n\n  function getChildrenOffset(treeItem) {\n    var treeItemPosition = _data.treeItemsPositions[treeItem.id],\n      treeItemCenterOffset = treeItemPosition.offset + treeItemPosition.actualSize.width / 2.0,\n      childrenCenterOffset = null,\n      firstItem, firstItemPosition,\n      lastItem, lastItemPosition,\n      visualAggregatorPosition;\n    if (treeItem.visualAggregatorId === null) {\n      firstItem = null;\n      _visualTree.loopChildren(this, treeItem.id, function (childItemId, childItem, index) {\n        firstItem = childItem;\n        if (firstItem.connectorPlacement & SideFlag.Top) {\n          return true;\n        }\n      });\n      firstItemPosition = _data.treeItemsPositions[firstItem.id];\n\n      lastItem = null;\n      _visualTree.loopChildrenReversed(this, treeItem.id, function (childItemId, childItem, index) {\n        lastItem = childItem;\n        if (lastItem.connectorPlacement & SideFlag.Top) {\n          return true;\n        }\n      });\n      lastItemPosition = _data.treeItemsPositions[lastItem.id];\n\n      switch (_visualTreeOptions.horizontalAlignment) {\n        case HorizontalAlignmentType.Left:\n          childrenCenterOffset = firstItemPosition.offset + firstItemPosition.actualSize.width / 2.0;\n          break;\n        case HorizontalAlignmentType.Right:\n          childrenCenterOffset = lastItemPosition.offset + lastItemPosition.actualSize.width / 2.0;\n          break;\n        case HorizontalAlignmentType.Center:\n          childrenCenterOffset = (firstItemPosition.offset + lastItemPosition.offset + lastItemPosition.actualSize.width) / 2.0;\n          break;\n      }\n    }\n    else {\n      visualAggregatorPosition = _data.treeItemsPositions[treeItem.visualAggregatorId];\n      childrenCenterOffset = visualAggregatorPosition.offset + visualAggregatorPosition.actualSize.width / 2.0;\n    }\n\n    var i = treeItemCenterOffset - childrenCenterOffset;\n    return treeItemCenterOffset - childrenCenterOffset;\n  }\n\n  function offsetItem(treeItem, offset) {\n    var treeItemPosition = _data.treeItemsPositions[treeItem.id];\n    treeItemPosition.offset += offset;\n\n    var treeLevelPosition = _treeLevelsPositions[_treeLevels.getLevelIndex(treeItem.id)];\n    treeLevelPosition.currentOffset = Math.max(treeLevelPosition.currentOffset, treeItemPosition.offset + treeItemPosition.actualSize.width + treeItemPosition.rightPadding);\n  }\n\n  function offsetItemChildren(treeItem, offset) {\n    var childTreeItemPosition,\n      treeLevelPosition;\n\n    _visualTree.loopLevels(this, treeItem.id, function (childItemId, childItem, levelid) {\n      childTreeItemPosition = _data.treeItemsPositions[childItemId];\n      childTreeItemPosition.offset += offset;\n\n      treeLevelPosition = _treeLevelsPositions[_treeLevels.getLevelIndex(childItemId)];\n      treeLevelPosition.currentOffset = Math.max(treeLevelPosition.currentOffset, childTreeItemPosition.offset + childTreeItemPosition.actualSize.width);\n\n      return true;\n    });\n  }\n\n  function recalcItemsPositions() {\n    var prevLevelPosition = null;\n    _treeLevels.loopLevels(this, function (levelIndex, treeLevel) {\n      var treeLevelPosition = _treeLevelsPositions[levelIndex];\n\n      _treeLevels.loopLevelItems(this, levelIndex, function (itemid, treeItem, position) {\n        var treeItemPosition = _data.treeItemsPositions[itemid];\n        var result = getPosition(treeItemPosition.actualVisibility, treeItemPosition.offset, treeItemPosition.actualSize, prevLevelPosition, treeLevelPosition, _itemsSizesOptions.verticalAlignment);\n        treeItemPosition.actualPosition = result.position;\n        treeItemPosition.horizontalConnectorsShift = result.horizontalConnectorsShift;\n        treeItemPosition.topConnectorShift = result.topConnectorShift;\n        treeItemPosition.topConnectorInterval = result.topConnectorInterval;\n        treeItemPosition.bottomConnectorShift = result.bottomConnectorShift;\n        treeItemPosition.bottomConnectorInterval = result.bottomConnectorInterval;\n      });\n\n      prevLevelPosition = treeLevelPosition;\n    });\n  }\n\n  function getSize(visibility, isCursor, treeItemTemplate, itemsSizesOptions, orientationType, treeItemId) {\n    var templateConfig,\n      size,\n      contentPosition;\n\n    switch (visibility) {\n      case Visibility.Normal:\n        templateConfig = treeItemTemplate.template.templateConfig;\n        size = new Size(templateConfig.itemSize);\n        contentPosition = new Rect(0, 0, size.width, size.height);\n        if (templateConfig.getDynamicItemSize) {\n          const dynamicItemSize = templateConfig.getDynamicItemSize(treeItemId)\n          size.width += dynamicItemSize.width\n          size.height = dynamicItemSize.height\n        }\n        if (isCursor) {\n          size.height += templateConfig.cursorPadding.top + templateConfig.cursorPadding.bottom;\n          size.width += templateConfig.cursorPadding.left + templateConfig.cursorPadding.right;\n          contentPosition.x = templateConfig.cursorPadding.left;\n          contentPosition.y = templateConfig.cursorPadding.top;\n        }\n        if (treeItemTemplate.hasSelectorCheckbox) {\n          size.height += itemsSizesOptions.checkBoxPanelSize;\n        }\n        if (treeItemTemplate.hasButtons) {\n          size.width += itemsSizesOptions.buttonsPanelSize;\n          switch (itemsSizesOptions.groupTitlePlacementType) {\n            case AdviserPlacementType.Right:\n              contentPosition.x += itemsSizesOptions.buttonsPanelSize;\n              break;\n          }\n        }\n        if (treeItemTemplate.hasGroupTitle) {\n          size.width += itemsSizesOptions.groupTitlePanelSize;\n          switch (itemsSizesOptions.groupTitlePlacementType) {\n            case AdviserPlacementType.Right:\n              break;\n            default:\n              contentPosition.x += itemsSizesOptions.groupTitlePanelSize;\n              break;\n          }\n        }\n        break;\n      case Visibility.Dot:\n        templateConfig = treeItemTemplate.template.templateConfig;\n        size = new Size(templateConfig.minimizedItemSize);\n        break;\n      case Visibility.Line:\n      case Visibility.Invisible:\n        size = new Size();\n        break;\n    }\n\n    switch (orientationType) {\n      case OrientationType.Left:\n      case OrientationType.Right:\n        size.invert();\n        break;\n    }\n\n    return {\n      actualSize: size,\n      contentPosition: contentPosition\n    };\n  }\n\n  function getPosition(visibility, offset, size, prevLevel, level, verticalAlignment) {\n    var itemShift = 0;\n\n    switch (visibility) {\n      case Visibility.Normal:\n        switch (verticalAlignment) {\n          case VerticalAlignmentType.Top:\n            itemShift = 0;\n            break;\n          case VerticalAlignmentType.Middle:\n            itemShift = (level.depth - size.height) / 2.0;\n            break;\n          case VerticalAlignmentType.Bottom:\n            itemShift = level.depth - size.height;\n            break;\n        }\n        break;\n      case Visibility.Dot:\n      case Visibility.Line:\n      case Visibility.Invisible:\n        itemShift = level.horizontalConnectorsDepth - size.height / 2.0;\n        break;\n    }\n\n    return {\n      position: new Rect(offset, level.shift + itemShift, size.width, size.height),\n      horizontalConnectorsShift: level.shift + level.horizontalConnectorsDepth,\n      topConnectorShift: prevLevel != null ? prevLevel.shift + prevLevel.connectorShift : null,\n      topConnectorInterval: prevLevel != null ? prevLevel.levelSpace / 2 : null,\n      bottomConnectorShift: level.shift + level.connectorShift,\n      bottomConnectorInterval: level.levelSpace / 2\n    };\n  }\n\n  function getIntervals(options) {\n    var result = [];\n    result[Visibility.Normal] = options.normalItemsInterval;\n    result[Visibility.Dot] = options.dotItemsInterval;\n    result[Visibility.Line] = options.lineItemsInterval;\n    result[Visibility.Invisible] = options.lineItemsInterval;\n    return result;\n  }\n\n  function getItemPosition(itemid) {\n    return _data.treeItemsPositions[itemid];\n  }\n\n  function getItemsPositions() {\n    return _data.treeItemsPositions;\n  }\n\n  function getContentSize() {\n    return _data.panelSize;\n  }\n\n  return {\n    process: process,\n    getItemsPositions: getItemsPositions,\n    getItemPosition: getItemPosition,\n    getContentSize: getContentSize\n  };\n};"]},"metadata":{},"sourceType":"module"}